---@class ccui
ccui={}
---@class cc
cc={}
---@class ccs
ccs={}
---@class ccexp
ccexp={}
---@class sp
sp={}


---@class ccui.AbstractCheckButton :  Widget
local AbstractCheckButton={ }
---@class AbstractCheckButton : ccui.AbstractCheckButton
ccui.AbstractCheckButton=AbstractCheckButton


---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function AbstractCheckButton:getCrossDisabledFile() end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function AbstractCheckButton:getBackDisabledFile() end
---* Load background selected state texture for check button.<br>
---* param backGroundSelected    The background selected state image name.<br>
---* param texType    @see `Widget::TextureResType`
---@param backGroundSelected string@ #string backGroundSelected
---@param texType int@ #int texType
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:loadTextureBackGroundSelected(backGroundSelected,texType) end
---* Load background disabled state texture for checkbox.<br>
---* param backGroundDisabled    The background disabled state texture name.<br>
---* param texType    @see `Widget::TextureResType`
---@param backGroundDisabled string@ #string backGroundDisabled
---@param texType int@ #int texType
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:loadTextureBackGroundDisabled(backGroundDisabled,texType) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function AbstractCheckButton:getCrossNormalFile() end
---* Change CheckBox state.<br>
---* Set to true will cause the CheckBox's state to "selected", false otherwise.<br>
---* param selected Set to true will change CheckBox to selected state, false otherwise.
---@param selected boolean@ #bool selected
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:setSelected(selected) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function AbstractCheckButton:getBackPressedFile() end
---* brief Return the sprite instance of front cross when disabled<br>
---* return the sprite instance of front cross when disabled
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function AbstractCheckButton:getRendererFrontCrossDisabled() end
---* brief Return the sprite instance of background<br>
---* return the sprite instance of background.
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function AbstractCheckButton:getRendererBackground() end
---* Load cross texture for check button.<br>
---* param crossTextureName    The cross texture name.<br>
---* param texType    @see `Widget::TextureResType`
---@param crossTextureName string@ #string crossTextureName
---@param texType int@ #int texType
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:loadTextureFrontCross(crossTextureName,texType) end
---* brief Return the sprite instance of background when disabled<br>
---* return the sprite instance of background when disabled
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function AbstractCheckButton:getRendererBackgroundDisabled() end
---* Query whether CheckBox is selected or not.<br>
---* return true means "selected", false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function AbstractCheckButton:isSelected() end
---* 
---@param backGround string@ #string backGround
---@param backGroundSelected string@ #string backGroundSelected
---@param cross string@ #string cross
---@param backGroundDisabled string@ #string backGroundDisabled
---@param frontCrossDisabled string@ #string frontCrossDisabled
---@param texType int@ #int texType
---@return boolean@ bool#bool ret (return value: bool)
function AbstractCheckButton:init(backGround,backGroundSelected,cross,backGroundDisabled,frontCrossDisabled,texType) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function AbstractCheckButton:getBackNormalFile() end
---* Load all textures for initializing a check button.<br>
---* param background    The background image name.<br>
---* param backgroundSelected    The background selected image name.<br>
---* param cross    The cross image name.<br>
---* param backgroundDisabled    The background disabled state texture.<br>
---* param frontCrossDisabled    The front cross disabled state image name.<br>
---* param texType    @see `Widget::TextureResType`
---@param background string@ #string background
---@param backgroundSelected string@ #string backgroundSelected
---@param cross string@ #string cross
---@param backgroundDisabled string@ #string backgroundDisabled
---@param frontCrossDisabled string@ #string frontCrossDisabled
---@param texType int@ #int texType
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:loadTextures(background,backgroundSelected,cross,backgroundDisabled,frontCrossDisabled,texType) end
---* brief Return a zoom scale<br>
---* return A zoom scale of Checkbox.<br>
---* since v3.3
---@return float@ float#float ret (return value: float)
function AbstractCheckButton:getZoomScale() end
---* brief Return the sprite instance of front cross<br>
---* return the sprite instance of front cross
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function AbstractCheckButton:getRendererFrontCross() end
---* brief Return the sprite instance of background when selected<br>
---* return the sprite instance of background when selected
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function AbstractCheckButton:getRendererBackgroundSelected() end
---* Load background texture for check button.<br>
---* param backGround   The background image name.<br>
---* param type    @see `Widget::TextureResType`
---@param backGround string@ #string backGround
---@param type int@ #int type
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:loadTextureBackGround(backGround,type) end
---*  When user pressed the CheckBox, the button will zoom to a scale.<br>
---* The final scale of the CheckBox  equals (CheckBox original scale + _zoomScale)<br>
---* since v3.3
---@param scale float@ #float scale
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:setZoomScale(scale) end
---* Load frontcross disabled texture for checkbox.<br>
---* param frontCrossDisabled    The front cross disabled state texture name.<br>
---* param texType    @see `Widget::TextureResType`
---@param frontCrossDisabled string@ #string frontCrossDisabled
---@param texType int@ #int texType
---@return ccui.AbstractCheckButton@ AbstractCheckButton#AbstractCheckButton self (return value: ccui.AbstractCheckButton)
function AbstractCheckButton:loadTextureFrontCrossDisabled(frontCrossDisabled,texType) end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function AbstractCheckButton:getVirtualRenderer() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function AbstractCheckButton:init() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function AbstractCheckButton:getVirtualRendererSize() end


---@class cc.Action :  Ref
local Action={ }
---@class Action : cc.Action
cc.Action=Action


---*  Called before the action start. It will also set the target. <br>
---* param target A certain target.
---@param target cc.Node@ #cc.Node target
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:startWithTarget(target) end
---* Set the original target, since target can be nil.<br>
---* Is the target that were used to run the action. Unless you are doing something complex, like ActionManager, you should NOT call this method.<br>
---* The target is 'assigned', it is not 'retained'.<br>
---* since v0.8.2<br>
---* param originalTarget Is 'assigned', it is not 'retained'.
---@param originalTarget cc.Node@ #cc.Node originalTarget
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:setOriginalTarget(originalTarget) end
---*  Returns a clone of action.<br>
---* return A clone action.
---@return cc.Action@ Action#Action ret (return value: cc.Action)
function Action:clone() end
---*  Return a original Target. <br>
---* return A original Target.
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Action:getOriginalTarget() end
---* Called after the action has finished. It will set the 'target' to nil.<br>
---* IMPORTANT: You should never call "Action::stop()" manually. Instead, use: "target->stopAction(action);".
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:stop() end
---* Called once per frame. time a value between 0 and 1.<br>
---* For example:<br>
---* - 0 Means that the action just started.<br>
---* - 0.5 Means that the action is in the middle.<br>
---* - 1 Means that the action is over.<br>
---* param time A value between 0 and 1.
---@param time float@ #float time
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:update(time) end
---*  Return certain target.<br>
---* return A certain target.
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Action:getTarget() end
---*  Returns a flag field that is used to group the actions easily.<br>
---* return A tag.
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Action:getFlags() end
---*  Called every frame with it's delta time, dt in seconds. DON'T override unless you know what you are doing. <br>
---* param dt In seconds.
---@param dt float@ #float dt
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:step(dt) end
---*  Changes the tag that is used to identify the action easily. <br>
---* param tag Used to identify the action easily.
---@param tag int@ #int tag
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:setTag(tag) end
---*  Changes the flag field that is used to group the actions easily.<br>
---* param flags Used to group the actions easily.
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:setFlags(flags) end
---*  Returns a tag that is used to identify the action easily. <br>
---* return A tag.
---@return int@ int#int ret (return value: int)
function Action:getTag() end
---*  The action will modify the target properties. <br>
---* param target A certain target.
---@param target cc.Node@ #cc.Node target
---@return cc.Action@ Action#Action self (return value: cc.Action)
function Action:setTarget(target) end
---*  Return true if the action has finished. <br>
---* return Is true if the action has finished.
---@return boolean@ bool#bool ret (return value: bool)
function Action:isDone() end
---*  Returns a new action that performs the exact reverse of the action. <br>
---* return A new action that performs the exact reverse of the action.<br>
---* js NA
---@return cc.Action@ Action#Action ret (return value: cc.Action)
function Action:reverse() end


---@class cc.ActionCamera :  ActionInterval
local ActionCamera={ }
---@class ActionCamera : cc.ActionCamera
cc.ActionCamera=ActionCamera


---@param x float@ #float x
---@param y float@ #float y
---@param z float@ #float z
---@return cc.ActionCamera@ ActionCamera#ActionCamera self (return value: cc.ActionCamera)
---@overload fun(x:float,y:float,z:float):cc.ActionCamera
---@overload fun(unkown0:vec3_table):cc.ActionCamera
function ActionCamera:setEye(x,y,z) end
---* 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function ActionCamera:getEye() end
---* 
---@param up vec3_table@ #vec3_table up
---@return cc.ActionCamera@ ActionCamera#ActionCamera self (return value: cc.ActionCamera)
function ActionCamera:setUp(up) end
---* 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function ActionCamera:getCenter() end
---* 
---@param center vec3_table@ #vec3_table center
---@return cc.ActionCamera@ ActionCamera#ActionCamera self (return value: cc.ActionCamera)
function ActionCamera:setCenter(center) end
---* 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function ActionCamera:getUp() end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ActionCamera@ ActionCamera#ActionCamera self (return value: cc.ActionCamera)
function ActionCamera:startWithTarget(target) end
---* 
---@return cc.ActionCamera@ ActionCamera#ActionCamera ret (return value: cc.ActionCamera)
function ActionCamera:clone() end
---* 
---@return cc.ActionCamera@ ActionCamera#ActionCamera ret (return value: cc.ActionCamera)
function ActionCamera:reverse() end
---* js ctor<br>
---* lua new
---@return cc.ActionCamera@ ActionCamera#ActionCamera self (return value: cc.ActionCamera)
function ActionCamera:ActionCamera() end


---@class cc.ActionEase :  ActionInterval
local ActionEase={ }
---@class ActionEase : cc.ActionEase
cc.ActionEase=ActionEase


---* brief Initializes the action.<br>
---* return Return true when the initialization success, otherwise return false.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return boolean@ bool#bool ret (return value: bool)
function ActionEase:initWithAction(action) end
---* brief Get the pointer of the inner action.<br>
---* return The pointer of the inner action.
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function ActionEase:getInnerAction() end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ActionEase@ ActionEase#ActionEase self (return value: cc.ActionEase)
function ActionEase:startWithTarget(target) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase self (return value: cc.ActionEase)
function ActionEase:stop() end
---* 
---@param time float@ #float time
---@return cc.ActionEase@ ActionEase#ActionEase self (return value: cc.ActionEase)
function ActionEase:update(time) end


---@class ccs.ActionFadeFrame :  ActionFrame
local ActionFadeFrame={ }
---@class ActionFadeFrame : ccs.ActionFadeFrame
ccs.ActionFadeFrame=ActionFadeFrame


---* Gets the fade action opacity.<br>
---* return the fade action opacity.
---@return int@ int#int ret (return value: int)
function ActionFadeFrame:getOpacity() end
---* Gets the ActionInterval of ActionFrame.<br>
---* param duration   the duration time of ActionFrame<br>
---* return ActionInterval
---@param duration float@ #float duration
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function ActionFadeFrame:getAction(duration) end
---* Changes the fade action opacity.<br>
---* param opacity the fade action opacity
---@param opacity int@ #int opacity
---@return ccs.ActionFadeFrame@ ActionFadeFrame#ActionFadeFrame self (return value: ccs.ActionFadeFrame)
function ActionFadeFrame:setOpacity(opacity) end
---* Default constructor
---@return ccs.ActionFadeFrame@ ActionFadeFrame#ActionFadeFrame self (return value: ccs.ActionFadeFrame)
function ActionFadeFrame:ActionFadeFrame() end


---@class cc.ActionFloat :  ActionInterval
local ActionFloat={ }
---@class ActionFloat : cc.ActionFloat
cc.ActionFloat=ActionFloat


---* 
---@param duration float@ #float duration
---@param from float@ #float from
---@param to float@ #float to
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function ActionFloat:initWithDuration(duration,from,to,callback) end
---* Creates FloatAction with specified duration, from value, to value and callback to report back<br>
---* results<br>
---* param duration of the action<br>
---* param from value to start from<br>
---* param to value to be at the end of the action<br>
---* param callback to report back result<br>
---* return An autoreleased ActionFloat object
---@param duration float@ #float duration
---@param from float@ #float from
---@param to float@ #float to
---@param callback function@ #function callback
---@return cc.ActionFloat@ ActionFloat#ActionFloat ret (return value: cc.ActionFloat)
function ActionFloat:create(duration,from,to,callback) end
---* Overridden ActionInterval methods
---@param target cc.Node@ #cc.Node target
---@return cc.ActionFloat@ ActionFloat#ActionFloat self (return value: cc.ActionFloat)
function ActionFloat:startWithTarget(target) end
---* 
---@return cc.ActionFloat@ ActionFloat#ActionFloat ret (return value: cc.ActionFloat)
function ActionFloat:clone() end
---* 
---@param delta float@ #float delta
---@return cc.ActionFloat@ ActionFloat#ActionFloat self (return value: cc.ActionFloat)
function ActionFloat:update(delta) end
---* 
---@return cc.ActionFloat@ ActionFloat#ActionFloat ret (return value: cc.ActionFloat)
function ActionFloat:reverse() end
---* 
---@return cc.ActionFloat@ ActionFloat#ActionFloat self (return value: cc.ActionFloat)
function ActionFloat:ActionFloat() end


---@class ccs.ActionFrame :  Ref
local ActionFrame={ }
---@class ActionFrame : ccs.ActionFrame
ccs.ActionFrame=ActionFrame


---@param duration float@ #float duration
---@param srcFrame ccs.ActionFrame@ #ccs.ActionFrame srcFrame
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
---@overload fun(duration:float,srcFrame:ccs.ActionFrame):cc.ActionInterval
---@overload fun(duration:float):cc.ActionInterval
function ActionFrame:getAction(duration,srcFrame) end
---* Gets the type of action frame<br>
---* return the type of action frame
---@return int@ int#int ret (return value: int)
function ActionFrame:getFrameType() end
---* Changes the time of action frame<br>
---* param fTime  the time of action frame
---@param fTime float@ #float fTime
---@return ccs.ActionFrame@ ActionFrame#ActionFrame self (return value: ccs.ActionFrame)
function ActionFrame:setFrameTime(fTime) end
---* Changes the easing type.<br>
---* param easingType the easing type.
---@param easingType int@ #int easingType
---@return ccs.ActionFrame@ ActionFrame#ActionFrame self (return value: ccs.ActionFrame)
function ActionFrame:setEasingType(easingType) end
---* Gets the time of action frame<br>
---* return fTime  the time of action frame
---@return float@ float#float ret (return value: float)
function ActionFrame:getFrameTime() end
---* Gets the index of action frame<br>
---* return the index of action frame
---@return int@ int#int ret (return value: int)
function ActionFrame:getFrameIndex() end
---* Changes the type of action frame<br>
---* param frameType   the type of action frame
---@param frameType int@ #int frameType
---@return ccs.ActionFrame@ ActionFrame#ActionFrame self (return value: ccs.ActionFrame)
function ActionFrame:setFrameType(frameType) end
---* Changes the index of action frame<br>
---* param index   the index of action frame
---@param index int@ #int index
---@return ccs.ActionFrame@ ActionFrame#ActionFrame self (return value: ccs.ActionFrame)
function ActionFrame:setFrameIndex(index) end
---* Set the ActionInterval easing parameter.<br>
---* param parameter   the parameter for frame ease
---@param parameter array_table@ #array_table parameter
---@return ccs.ActionFrame@ ActionFrame#ActionFrame self (return value: ccs.ActionFrame)
function ActionFrame:setEasingParameter(parameter) end
---* Gets the easing type.<br>
---* return the easing type.
---@return int@ int#int ret (return value: int)
function ActionFrame:getEasingType() end
---* Default constructor
---@return ccs.ActionFrame@ ActionFrame#ActionFrame self (return value: ccs.ActionFrame)
function ActionFrame:ActionFrame() end


---@class cc.ActionInstant :  FiniteTimeAction
local ActionInstant={ }
---@class ActionInstant : cc.ActionInstant
cc.ActionInstant=ActionInstant


---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ActionInstant@ ActionInstant#ActionInstant self (return value: cc.ActionInstant)
function ActionInstant:startWithTarget(target) end
---* 
---@return cc.ActionInstant@ ActionInstant#ActionInstant ret (return value: cc.ActionInstant)
function ActionInstant:reverse() end
---* 
---@return cc.ActionInstant@ ActionInstant#ActionInstant ret (return value: cc.ActionInstant)
function ActionInstant:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.ActionInstant@ ActionInstant#ActionInstant self (return value: cc.ActionInstant)
function ActionInstant:update(time) end
---* param dt In seconds.
---@param dt float@ #float dt
---@return cc.ActionInstant@ ActionInstant#ActionInstant self (return value: cc.ActionInstant)
function ActionInstant:step(dt) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ActionInstant:isDone() end


---@class cc.ActionInterval :  FiniteTimeAction
local ActionInterval={ }
---@class ActionInterval : cc.ActionInterval
cc.ActionInterval=ActionInterval


---*  Gets the amplitude rate, extension in GridAction<br>
---* return  The amplitude rate.
---@return float@ float#float ret (return value: float)
function ActionInterval:getAmplitudeRate() end
---*  initializes the action 
---@param d float@ #float d
---@return boolean@ bool#bool ret (return value: bool)
function ActionInterval:initWithDuration(d) end
---*  Sets the amplitude rate, extension in GridAction<br>
---* param amp   The amplitude rate.
---@param amp float@ #float amp
---@return cc.ActionInterval@ ActionInterval#ActionInterval self (return value: cc.ActionInterval)
function ActionInterval:setAmplitudeRate(amp) end
---*  How many seconds had elapsed since the actions started to run.<br>
---* return The seconds had elapsed since the actions started to run.
---@return float@ float#float ret (return value: float)
function ActionInterval:getElapsed() end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ActionInterval@ ActionInterval#ActionInterval self (return value: cc.ActionInterval)
function ActionInterval:startWithTarget(target) end
---* param dt in seconds
---@param dt float@ #float dt
---@return cc.ActionInterval@ ActionInterval#ActionInterval self (return value: cc.ActionInterval)
function ActionInterval:step(dt) end
---* 
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function ActionInterval:clone() end
---* 
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function ActionInterval:reverse() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ActionInterval:isDone() end


---@class cc.ActionManager :  Ref
local ActionManager={ }
---@class ActionManager : cc.ActionManager
cc.ActionManager=ActionManager


---*  Gets an action given its tag an a target.<br>
---* param tag       The action's tag.<br>
---* param target    A certain target.<br>
---* return  The Action the with the given tag.
---@param tag int@ #int tag
---@param target cc.Node@ #cc.Node target
---@return cc.Action@ Action#Action ret (return value: cc.Action)
function ActionManager:getActionByTag(tag,target) end
---*  Removes an action given its tag and the target.<br>
---* param tag       The action's tag.<br>
---* param target    A certain target.
---@param tag int@ #int tag
---@param target cc.Node@ #cc.Node target
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:removeActionByTag(tag,target) end
---*  Removes all actions matching at least one bit in flags and the target.<br>
---* param flags     The flag field to match the actions' flags based on bitwise AND.<br>
---* param target    A certain target.<br>
---* js NA
---@param flags unsigned_int@ #unsigned int flags
---@param target cc.Node@ #cc.Node target
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:removeActionsByFlags(flags,target) end
---*  Removes all actions from all the targets.
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:removeAllActions() end
---*  Adds an action with a target. <br>
---* If the target is already present, then the action will be added to the existing target.<br>
---* If the target is not present, a new instance of this target will be created either paused or not, and the action will be added to the newly created target.<br>
---* When the target is paused, the queued actions won't be 'ticked'.<br>
---* param action    A certain action.<br>
---* param target    The target which need to be added an action.<br>
---* param paused    Is the target paused or not.
---@param action cc.Action@ #cc.Action action
---@param target cc.Node@ #cc.Node target
---@param paused boolean@ #bool paused
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:addAction(action,target,paused) end
---*  Resumes the target. All queued actions will be resumed.<br>
---* param target    A certain target.
---@param target cc.Node@ #cc.Node target
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:resumeTarget(target) end
---*  Returns the numbers of actions that are running in all targets.<br>
---* return  The numbers of actions that are running in all target.<br>
---* js NA
---@return int@ int#int ret (return value: int)
function ActionManager:getNumberOfRunningActions() end
---*  Pauses the target: all running actions and newly added actions will be paused.<br>
---* param target    A certain target.
---@param target cc.Node@ #cc.Node target
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:pauseTarget(target) end
---*  Returns the numbers of actions that are running in a certain target. <br>
---* Composable actions are counted as 1 action. Example:<br>
---* - If you are running 1 Sequence of 7 actions, it will return 1.<br>
---* - If you are running 7 Sequences of 2 actions, it will return 7.<br>
---* param target    A certain target.<br>
---* return  The numbers of actions that are running in a certain target.<br>
---* js NA
---@param target cc.Node@ #cc.Node target
---@return int@ int#int ret (return value: int)
function ActionManager:getNumberOfRunningActionsInTarget(target) end
---*  Removes all actions from a certain target.<br>
---* All the actions that belongs to the target will be removed.<br>
---* param target    A certain target.
---@param target cc.Node@ #cc.Node target
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:removeAllActionsFromTarget(target) end
---*  Resume a set of targets (convenience function to reverse a pauseAllRunningActions call).<br>
---* param targetsToResume   A set of targets need to be resumed.
---@param targetsToResume array_table@ #array_table targetsToResume
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:resumeTargets(targetsToResume) end
---*  Removes an action given an action reference.<br>
---* param action    A certain target.
---@param action cc.Action@ #cc.Action action
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:removeAction(action) end
---*  Pauses all running actions, returning a list of targets whose actions were paused.<br>
---* return  A list of targets whose actions were paused.
---@return array_table@ array_table#array_table ret (return value: array_table)
function ActionManager:pauseAllRunningActions() end
---*  Main loop of ActionManager.<br>
---* param dt    In seconds.
---@param dt float@ #float dt
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:update(dt) end
---*  Removes all actions given its tag and the target.<br>
---* param tag       The actions' tag.<br>
---* param target    A certain target.<br>
---* js NA
---@param tag int@ #int tag
---@param target cc.Node@ #cc.Node target
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:removeAllActionsByTag(tag,target) end
---*  Returns the numbers of actions that are running in a<br>
---* certain target with a specific tag.<br>
---* Like getNumberOfRunningActionsInTarget Composable actions<br>
---* are counted as 1 action. Example:<br>
---* - If you are running 1 Sequence of 7 actions, it will return 1.<br>
---* - If you are running 7 Sequences of 2 actions, it will return 7.<br>
---* param target    A certain target.<br>
---* param tag       Tag that will be searched.<br>
---* return  The numbers of actions that are running in a certain target<br>
---* with a specific tag.<br>
---* see getNumberOfRunningActionsInTarget<br>
---* js NA
---@param target cc.Node@ #cc.Node target
---@param tag int@ #int tag
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function ActionManager:getNumberOfRunningActionsInTargetByTag(target,tag) end
---* js ctor
---@return cc.ActionManager@ ActionManager#ActionManager self (return value: cc.ActionManager)
function ActionManager:ActionManager() end


---@class ccs.ActionManagerEx :  Ref
local ActionManagerEx={ }
---@class ActionManagerEx : ccs.ActionManagerEx
ccs.ActionManagerEx=ActionManagerEx


---* Stop an Action with a name.<br>
---* param jsonName  UI file name<br>
---* param actionName  action name in the UIfile.<br>
---* return  ActionObject which named as the param name
---@param jsonName char@ #char jsonName
---@param actionName char@ #char actionName
---@return ccs.ActionObject@ ActionObject#ActionObject ret (return value: ccs.ActionObject)
function ActionManagerEx:stopActionByName(jsonName,actionName) end
---* Gets an ActionObject with a name.<br>
---* param jsonName  UI file name<br>
---* param actionName  action name in the UI file.<br>
---* return  ActionObject which named as the param name
---@param jsonName char@ #char jsonName
---@param actionName char@ #char actionName
---@return ccs.ActionObject@ ActionObject#ActionObject ret (return value: ccs.ActionObject)
function ActionManagerEx:getActionByName(jsonName,actionName) end
---* 
---@return int@ int#int ret (return value: int)
function ActionManagerEx:getStudioVersionNumber() end
---@param jsonName char@ #char jsonName
---@param actionName char@ #char actionName
---@param func cc.CallFunc@ #cc.CallFunc func
---@return ccs.ActionObject@ ActionObject#ActionObject ret (return value: ccs.ActionObject)
---@overload fun(jsonName:char,actionName:char,func:cc.CallFunc):ccs.ActionObject
---@overload fun(jsonName:char,actionName:char):ccs.ActionObject
function ActionManagerEx:playActionByName(jsonName,actionName,func) end
---* Release all actions.
---@return ccs.ActionManagerEx@ ActionManagerEx#ActionManagerEx self (return value: ccs.ActionManagerEx)
function ActionManagerEx:releaseActions() end
---* Purges ActionManager point.<br>
---* js purge<br>
---* lua destroyActionManager
---@return ccs.ActionManagerEx@ ActionManagerEx#ActionManagerEx self (return value: ccs.ActionManagerEx)
function ActionManagerEx:destroyInstance() end
---* Gets the static instance of ActionManager.<br>
---* js getInstance<br>
---* lua getInstance
---@return ccs.ActionManagerEx@ ActionManagerEx#ActionManagerEx ret (return value: ccs.ActionManagerEx)
function ActionManagerEx:getInstance() end


---@class ccs.ActionMoveFrame :  ActionFrame
local ActionMoveFrame={ }
---@class ActionMoveFrame : ccs.ActionMoveFrame
ccs.ActionMoveFrame=ActionMoveFrame


---* Changes the move action position.<br>
---* param the move action position.
---@param pos vec2_table@ #vec2_table pos
---@return ccs.ActionMoveFrame@ ActionMoveFrame#ActionMoveFrame self (return value: ccs.ActionMoveFrame)
function ActionMoveFrame:setPosition(pos) end
---* Gets the ActionInterval of ActionFrame.<br>
---* param duration   the duration time of ActionFrame<br>
---* return ActionInterval
---@param duration float@ #float duration
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function ActionMoveFrame:getAction(duration) end
---* Gets the move action position.<br>
---* return the move action position.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ActionMoveFrame:getPosition() end
---* Default constructor
---@return ccs.ActionMoveFrame@ ActionMoveFrame#ActionMoveFrame self (return value: ccs.ActionMoveFrame)
function ActionMoveFrame:ActionMoveFrame() end


---@class ccs.ActionObject :  Ref
local ActionObject={ }
---@class ActionObject : ccs.ActionObject
ccs.ActionObject=ActionObject


---* Sets the current time of frame.<br>
---* param fTime   the current time of frame
---@param fTime float@ #float fTime
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:setCurrentTime(fTime) end
---* Pause the action.
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:pause() end
---* Sets name for object<br>
---* param name    name of object
---@param name char@ #char name
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:setName(name) end
---* Sets the time interval of frame.<br>
---* param fTime   the time interval of frame
---@param fTime float@ #float fTime
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:setUnitTime(fTime) end
---* Gets the total time of frame.<br>
---* return the total time of frame
---@return float@ float#float ret (return value: float)
function ActionObject:getTotalTime() end
---* Gets name of object<br>
---* return name of object
---@return char@ char#char ret (return value: char)
function ActionObject:getName() end
---* Stop the action.
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:stop() end
---@param func cc.CallFunc@ #cc.CallFunc func
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
---@overload fun(func:cc.CallFunc):ccs.ActionObject
---@overload fun():ccs.ActionObject
function ActionObject:play(func) end
---* Gets the current time of frame.<br>
---* return the current time of frame
---@return float@ float#float ret (return value: float)
function ActionObject:getCurrentTime() end
---* Removes a ActionNode which play the action.<br>
---* param node    the ActionNode which play the action
---@param node ccs.ActionNode@ #ccs.ActionNode node
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:removeActionNode(node) end
---* Gets if the action will loop play.<br>
---* return   that if the action will loop play
---@return boolean@ bool#bool ret (return value: bool)
function ActionObject:getLoop() end
---* Adds a ActionNode to play the action.<br>
---* param node    the ActionNode which will play the action
---@param node ccs.ActionNode@ #ccs.ActionNode node
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:addActionNode(node) end
---* Gets the time interval of frame.<br>
---* return the time interval of frame
---@return float@ float#float ret (return value: float)
function ActionObject:getUnitTime() end
---* Return if the action is playing.<br>
---* return true if the action is playing, false the otherwise
---@return boolean@ bool#bool ret (return value: bool)
function ActionObject:isPlaying() end
---* 
---@param fTime float@ #float fTime
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:updateToFrameByTime(fTime) end
---* Sets if the action will loop play.<br>
---* param bLoop     that if the action will loop play
---@param bLoop boolean@ #bool bLoop
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:setLoop(bLoop) end
---* 
---@param dt float@ #float dt
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:simulationActionUpdate(dt) end
---* Default constructor
---@return ccs.ActionObject@ ActionObject#ActionObject self (return value: ccs.ActionObject)
function ActionObject:ActionObject() end


---@class ccs.ActionRotationFrame :  ActionFrame
local ActionRotationFrame={ }
---@class ActionRotationFrame : ccs.ActionRotationFrame
ccs.ActionRotationFrame=ActionRotationFrame


---* Changes rotate action rotation.<br>
---* param rotation rotate action rotation.
---@param rotation float@ #float rotation
---@return ccs.ActionRotationFrame@ ActionRotationFrame#ActionRotationFrame self (return value: ccs.ActionRotationFrame)
function ActionRotationFrame:setRotation(rotation) end
---@param duration float@ #float duration
---@param srcFrame ccs.ActionFrame@ #ccs.ActionFrame srcFrame
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
---@overload fun(duration:float,srcFrame:ccs.ActionFrame):cc.ActionInterval
---@overload fun(duration:float):cc.ActionInterval
function ActionRotationFrame:getAction(duration,srcFrame) end
---* Gets the rotate action rotation.<br>
---* return the rotate action rotation.
---@return float@ float#float ret (return value: float)
function ActionRotationFrame:getRotation() end
---* Default constructor
---@return ccs.ActionRotationFrame@ ActionRotationFrame#ActionRotationFrame self (return value: ccs.ActionRotationFrame)
function ActionRotationFrame:ActionRotationFrame() end


---@class ccs.ActionScaleFrame :  ActionFrame
local ActionScaleFrame={ }
---@class ActionScaleFrame : ccs.ActionScaleFrame
ccs.ActionScaleFrame=ActionScaleFrame


---* Changes the scale action scaleY.<br>
---* param rotation the scale action scaleY.
---@param scaleY float@ #float scaleY
---@return ccs.ActionScaleFrame@ ActionScaleFrame#ActionScaleFrame self (return value: ccs.ActionScaleFrame)
function ActionScaleFrame:setScaleY(scaleY) end
---* Changes the scale action scaleX.<br>
---* param the scale action scaleX.
---@param scaleX float@ #float scaleX
---@return ccs.ActionScaleFrame@ ActionScaleFrame#ActionScaleFrame self (return value: ccs.ActionScaleFrame)
function ActionScaleFrame:setScaleX(scaleX) end
---* Gets the scale action scaleY.<br>
---* return the scale action scaleY.
---@return float@ float#float ret (return value: float)
function ActionScaleFrame:getScaleY() end
---* Gets the scale action scaleX.<br>
---* return the scale action scaleX.
---@return float@ float#float ret (return value: float)
function ActionScaleFrame:getScaleX() end
---* Gets the ActionInterval of ActionFrame.<br>
---* param duration   the duration time of ActionFrame<br>
---* return ActionInterval
---@param duration float@ #float duration
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function ActionScaleFrame:getAction(duration) end
---* Default constructor
---@return ccs.ActionScaleFrame@ ActionScaleFrame#ActionScaleFrame self (return value: ccs.ActionScaleFrame)
function ActionScaleFrame:ActionScaleFrame() end


---@class ccs.ActionTimeline :  Action@PlayableProtocol
local ActionTimeline={ }
---@class ActionTimeline : ccs.ActionTimeline
ccs.ActionTimeline=ActionTimeline


---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:clearFrameEndCallFuncs() end
---* add a frame end call back to animation's end frame<br>
---* param animationName  @addFrameEndCallFunc, make the animationName as funcKey<br>
---* param func the callback function
---@param animationName string@ #string animationName
---@param func function@ #function func
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:setAnimationEndCallFunc(animationName,func) end
---*  add Timeline to ActionTimeline 
---@param timeline ccs.Timeline@ #ccs.Timeline timeline
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:addTimeline(timeline) end
---*  Get current frame. 
---@return int@ int#int ret (return value: int)
function ActionTimeline:getCurrentFrame() end
---*  Start frame index of this action
---@return int@ int#int ret (return value: int)
function ActionTimeline:getStartFrame() end
---*  Pause the animation. 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:pause() end
---* / @{/ @name implement Playable Protocol
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:start() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ActionTimeline:init() end
---* 
---@param timeline ccs.Timeline@ #ccs.Timeline timeline
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:removeTimeline(timeline) end
---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:clearFrameEventCallFunc() end
---*  Last frame callback will call when arriving last frame 
---@param listener function@ #function listener
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:setLastFrameCallFunc(listener) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function ActionTimeline:getTimelines() end
---* 
---@param animationName string@ #string animationName
---@param loop boolean@ #bool loop
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:play(animationName,loop) end
---* 
---@param animationName string@ #string animationName
---@return ccs.AnimationInfo@ AnimationInfo#AnimationInfo ret (return value: ccs.AnimationInfo)
function ActionTimeline:getAnimationInfo(animationName) end
---*  Resume the animation. 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:resume() end
---*  add a callback function after played frameIndex<br>
---* param frameIndex the frame index call back after<br>
---* param funcKey for identity the callback function<br>
---* param func the callback function
---@param frameIndex int@ #int frameIndex
---@param funcKey string@ #string funcKey
---@param func function@ #function func
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:addFrameEndCallFunc(frameIndex,funcKey,func) end
---* 
---@param animationName string@ #string animationName
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:removeAnimationInfo(animationName) end
---*  Get current animation speed. 
---@return float@ float#float ret (return value: float)
function ActionTimeline:getTimeSpeed() end
---*  AnimationInfo
---@param animationInfo ccs.AnimationInfo@ #ccs.AnimationInfo animationInfo
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:addAnimationInfo(animationInfo) end
---* 
---@return int@ int#int ret (return value: int)
function ActionTimeline:getDuration() end
---*  Goto the specified frame index, and pause at this index.<br>
---* param startIndex The animation will pause at this index.
---@param startIndex int@ #int startIndex
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:gotoFrameAndPause(startIndex) end
---*  Whether or not Action is playing. 
---@return boolean@ bool#bool ret (return value: bool)
function ActionTimeline:isPlaying() end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:removeFrameEndCallFuncs(frameIndex) end
---@param startIndex int@ #int startIndex
---@param endIndex int@ #int endIndex
---@param currentFrameIndex int@ #int currentFrameIndex
---@param loop boolean@ #bool loop
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
---@overload fun(startIndex:int,unkown1:boolean):ccs.ActionTimeline
---@overload fun(startIndex:int):ccs.ActionTimeline
---@overload fun(startIndex:int,endIndex:int,unkown2:boolean):ccs.ActionTimeline
---@overload fun(startIndex:int,endIndex:int,currentFrameIndex:int,loop:boolean):ccs.ActionTimeline
function ActionTimeline:gotoFrameAndPlay(startIndex,endIndex,currentFrameIndex,loop) end
---* 
---@param animationName string@ #string animationName
---@return boolean@ bool#bool ret (return value: bool)
function ActionTimeline:IsAnimationInfoExists(animationName) end
---*  End frame of this action.<br>
---* When action play to this frame, if action is not loop, then it will stop, <br>
---* or it will play from start frame again. 
---@return int@ int#int ret (return value: int)
function ActionTimeline:getEndFrame() end
---*  Set the animation speed, this will speed up or slow down the speed. 
---@param speed float@ #float speed
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:setTimeSpeed(speed) end
---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:clearLastFrameCallFunc() end
---*  duration of the whole action
---@param duration int@ #int duration
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:setDuration(duration) end
---*  Set current frame index, this will cause action plays to this frame. 
---@param frameIndex int@ #int frameIndex
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:setCurrentFrame(frameIndex) end
---* 
---@param frameIndex int@ #int frameIndex
---@param funcKey string@ #string funcKey
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:removeFrameEndCallFunc(frameIndex,funcKey) end
---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimeline:create() end
---* 
---@param target cc.Node@ #cc.Node target
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:startWithTarget(target) end
---*  Returns a reverse of ActionTimeline. <br>
---* Not implement yet.
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimeline:reverse() end
---*  Returns a clone of ActionTimeline 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimeline:clone() end
---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:stop() end
---* 
---@param delta float@ #float delta
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:step(delta) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ActionTimeline:isDone() end
---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline self (return value: ccs.ActionTimeline)
function ActionTimeline:ActionTimeline() end


---@class ccs.ActionTimelineCache 
local ActionTimelineCache={ }
---@class ActionTimelineCache : ccs.ActionTimelineCache
ccs.ActionTimelineCache=ActionTimelineCache


---*  Clone a action with the specified name from the container. 
---@param fileName string@ #string fileName
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:createActionFromJson(fileName) end
---* 
---@param fileName string@ #string fileName
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:createActionWithFlatBuffersFile(fileName) end
---* 
---@param fileName string@ #string fileName
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:loadAnimationActionWithFlatBuffersFile(fileName) end
---* 
---@param fileName string@ #string fileName
---@param content string@ #string content
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:createActionFromContent(fileName,content) end
---* 
---@return ccs.ActionTimelineCache@ ActionTimelineCache#ActionTimelineCache self (return value: ccs.ActionTimelineCache)
function ActionTimelineCache:purge() end
---* 
---@return ccs.ActionTimelineCache@ ActionTimelineCache#ActionTimelineCache self (return value: ccs.ActionTimelineCache)
function ActionTimelineCache:init() end
---* 
---@param fileName string@ #string fileName
---@param content string@ #string content
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:loadAnimationActionWithContent(fileName,content) end
---* 
---@param fileName string@ #string fileName
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:loadAnimationActionWithFile(fileName) end
---*  Remove action with filename, and also remove other resource relate with this file 
---@param fileName string@ #string fileName
---@return ccs.ActionTimelineCache@ ActionTimelineCache#ActionTimelineCache self (return value: ccs.ActionTimelineCache)
function ActionTimelineCache:removeAction(fileName) end
---* 
---@param fileName string@ #string fileName
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:createActionWithFlatBuffersForSimulator(fileName) end
---*  Destroys the singleton 
---@return ccs.ActionTimelineCache@ ActionTimelineCache#ActionTimelineCache self (return value: ccs.ActionTimelineCache)
function ActionTimelineCache:destroyInstance() end
---* 
---@param fileName string@ #string fileName
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineCache:createAction(fileName) end


---@class ccs.ActionTimelineData :  Ref
local ActionTimelineData={ }
---@class ActionTimelineData : ccs.ActionTimelineData
ccs.ActionTimelineData=ActionTimelineData


---* 
---@param actionTag int@ #int actionTag
---@return ccs.ActionTimelineData@ ActionTimelineData#ActionTimelineData self (return value: ccs.ActionTimelineData)
function ActionTimelineData:setActionTag(actionTag) end
---* 
---@param actionTag int@ #int actionTag
---@return boolean@ bool#bool ret (return value: bool)
function ActionTimelineData:init(actionTag) end
---* 
---@return int@ int#int ret (return value: int)
function ActionTimelineData:getActionTag() end
---* 
---@param actionTag int@ #int actionTag
---@return ccs.ActionTimelineData@ ActionTimelineData#ActionTimelineData ret (return value: ccs.ActionTimelineData)
function ActionTimelineData:create(actionTag) end
---* 
---@return ccs.ActionTimelineData@ ActionTimelineData#ActionTimelineData self (return value: ccs.ActionTimelineData)
function ActionTimelineData:ActionTimelineData() end


---@class ccs.ActionTimelineNode :  Node
local ActionTimelineNode={ }
---@class ActionTimelineNode : ccs.ActionTimelineNode
ccs.ActionTimelineNode=ActionTimelineNode


---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ActionTimelineNode:getRoot() end
---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function ActionTimelineNode:getActionTimeline() end
---* 
---@param action ccs.ActionTimeline@ #ccs.ActionTimeline action
---@return ccs.ActionTimelineNode@ ActionTimelineNode#ActionTimelineNode self (return value: ccs.ActionTimelineNode)
function ActionTimelineNode:setActionTimeline(action) end
---* 
---@param root cc.Node@ #cc.Node root
---@param action ccs.ActionTimeline@ #ccs.ActionTimeline action
---@return boolean@ bool#bool ret (return value: bool)
function ActionTimelineNode:init(root,action) end
---* 
---@param root cc.Node@ #cc.Node root
---@return ccs.ActionTimelineNode@ ActionTimelineNode#ActionTimelineNode self (return value: ccs.ActionTimelineNode)
function ActionTimelineNode:setRoot(root) end
---* 
---@param root cc.Node@ #cc.Node root
---@param action ccs.ActionTimeline@ #ccs.ActionTimeline action
---@return ccs.ActionTimelineNode@ ActionTimelineNode#ActionTimelineNode ret (return value: ccs.ActionTimelineNode)
function ActionTimelineNode:create(root,action) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ActionTimelineNode:init() end
---* 
---@return ccs.ActionTimelineNode@ ActionTimelineNode#ActionTimelineNode self (return value: ccs.ActionTimelineNode)
function ActionTimelineNode:ActionTimelineNode() end


---@class ccs.ActionTintFrame :  ActionFrame
local ActionTintFrame={ }
---@class ActionTintFrame : ccs.ActionTintFrame
ccs.ActionTintFrame=ActionTintFrame


---* Gets the tint action color.<br>
---* return the tint action color.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function ActionTintFrame:getColor() end
---* Gets the ActionInterval of ActionFrame.<br>
---* param duration   the duration time of ActionFrame<br>
---* return ActionInterval
---@param duration float@ #float duration
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function ActionTintFrame:getAction(duration) end
---* Changes the tint action color.<br>
---* param ccolor the tint action color
---@param ccolor color3b_table@ #color3b_table ccolor
---@return ccs.ActionTintFrame@ ActionTintFrame#ActionTintFrame self (return value: ccs.ActionTintFrame)
function ActionTintFrame:setColor(ccolor) end
---* Default constructor
---@return ccs.ActionTintFrame@ ActionTintFrame#ActionTintFrame self (return value: ccs.ActionTintFrame)
function ActionTintFrame:ActionTintFrame() end


---@class cc.ActionTween :  ActionInterval
local ActionTween={ }
---@class ActionTween : cc.ActionTween
cc.ActionTween=ActionTween


---* brief Initializes the action with the property name (key), and the from and to parameters.<br>
---* param duration The duration of the ActionTween. It's a value in seconds.<br>
---* param key The key of property which should be updated.<br>
---* param from The value of the specified property when the action begin.<br>
---* param to The value of the specified property when the action end.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param key string@ #string key
---@param from float@ #float from
---@param to float@ #float to
---@return boolean@ bool#bool ret (return value: bool)
function ActionTween:initWithDuration(duration,key,from,to) end
---* brief Create and initializes the action with the property name (key), and the from and to parameters.<br>
---* param duration The duration of the ActionTween. It's a value in seconds.<br>
---* param key The key of property which should be updated.<br>
---* param from The value of the specified property when the action begin.<br>
---* param to The value of the specified property when the action end.<br>
---* return If the creation success, return a pointer of ActionTween; otherwise, return nil.
---@param duration float@ #float duration
---@param key string@ #string key
---@param from float@ #float from
---@param to float@ #float to
---@return cc.ActionTween@ ActionTween#ActionTween ret (return value: cc.ActionTween)
function ActionTween:create(duration,key,from,to) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ActionTween@ ActionTween#ActionTween self (return value: cc.ActionTween)
function ActionTween:startWithTarget(target) end
---* 
---@return cc.ActionTween@ ActionTween#ActionTween ret (return value: cc.ActionTween)
function ActionTween:clone() end
---* 
---@param dt float@ #float dt
---@return cc.ActionTween@ ActionTween#ActionTween self (return value: cc.ActionTween)
function ActionTween:update(dt) end
---* 
---@return cc.ActionTween@ ActionTween#ActionTween ret (return value: cc.ActionTween)
function ActionTween:reverse() end


---@class ccs.AlphaFrame :  Frame
local AlphaFrame={ }
---@class AlphaFrame : ccs.AlphaFrame
ccs.AlphaFrame=AlphaFrame


---* 
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function AlphaFrame:getAlpha() end
---* 
---@param alpha unsigned_char@ #unsigned char alpha
---@return ccs.AlphaFrame@ AlphaFrame#AlphaFrame self (return value: ccs.AlphaFrame)
function AlphaFrame:setAlpha(alpha) end
---* 
---@return ccs.AlphaFrame@ AlphaFrame#AlphaFrame ret (return value: ccs.AlphaFrame)
function AlphaFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function AlphaFrame:clone() end
---* 
---@return ccs.AlphaFrame@ AlphaFrame#AlphaFrame self (return value: ccs.AlphaFrame)
function AlphaFrame:AlphaFrame() end


---@class cc.AmbientLight :  BaseLight
local AmbientLight={ }
---@class AmbientLight : cc.AmbientLight
cc.AmbientLight=AmbientLight


---* Creates a ambient light.<br>
---* param color The light's color.<br>
---* return The new ambient light.
---@param color color3b_table@ #color3b_table color
---@return cc.AmbientLight@ AmbientLight#AmbientLight ret (return value: cc.AmbientLight)
function AmbientLight:create(color) end
---* 
---@return int@ int#int ret (return value: int)
function AmbientLight:getLightType() end
---* 
---@return cc.AmbientLight@ AmbientLight#AmbientLight self (return value: cc.AmbientLight)
function AmbientLight:AmbientLight() end


---@class ccs.AnchorPointFrame :  Frame
local AnchorPointFrame={ }
---@class AnchorPointFrame : ccs.AnchorPointFrame
ccs.AnchorPointFrame=AnchorPointFrame


---* 
---@param point vec2_table@ #vec2_table point
---@return ccs.AnchorPointFrame@ AnchorPointFrame#AnchorPointFrame self (return value: ccs.AnchorPointFrame)
function AnchorPointFrame:setAnchorPoint(point) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function AnchorPointFrame:getAnchorPoint() end
---* 
---@return ccs.AnchorPointFrame@ AnchorPointFrame#AnchorPointFrame ret (return value: ccs.AnchorPointFrame)
function AnchorPointFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function AnchorPointFrame:clone() end
---* 
---@return ccs.AnchorPointFrame@ AnchorPointFrame#AnchorPointFrame self (return value: ccs.AnchorPointFrame)
function AnchorPointFrame:AnchorPointFrame() end


---@class cc.Animate :  ActionInterval
local Animate={ }
---@class Animate : cc.Animate
cc.Animate=Animate


---*  initializes the action with an Animation and will restore the original frame when the animation is over 
---@param animation cc.Animation@ #cc.Animation animation
---@return boolean@ bool#bool ret (return value: bool)
function Animate:initWithAnimation(animation) end
---@return cc.Animation@ Animation#Animation ret (return value: cc.Animation)
---@overload fun():cc.Animation
---@overload fun():cc.Animation
function Animate:getAnimation() end
---* Gets the index of sprite frame currently displayed.<br>
---* return int  the index of sprite frame currently displayed.
---@return int@ int#int ret (return value: int)
function Animate:getCurrentFrameIndex() end
---*  Sets the Animation object to be animated <br>
---* param animation certain animation.
---@param animation cc.Animation@ #cc.Animation animation
---@return cc.Animate@ Animate#Animate self (return value: cc.Animate)
function Animate:setAnimation(animation) end
---*  Creates the action with an Animation and will restore the original frame when the animation is over.<br>
---* param animation A certain animation.<br>
---* return An autoreleased Animate object.
---@param animation cc.Animation@ #cc.Animation animation
---@return cc.Animate@ Animate#Animate ret (return value: cc.Animate)
function Animate:create(animation) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.Animate@ Animate#Animate self (return value: cc.Animate)
function Animate:startWithTarget(target) end
---* 
---@return cc.Animate@ Animate#Animate ret (return value: cc.Animate)
function Animate:clone() end
---* 
---@return cc.Animate@ Animate#Animate self (return value: cc.Animate)
function Animate:stop() end
---* 
---@return cc.Animate@ Animate#Animate ret (return value: cc.Animate)
function Animate:reverse() end
---* param t In seconds.
---@param t float@ #float t
---@return cc.Animate@ Animate#Animate self (return value: cc.Animate)
function Animate:update(t) end
---* 
---@return cc.Animate@ Animate#Animate self (return value: cc.Animate)
function Animate:Animate() end


---@class cc.Animate3D :  ActionInterval
local Animate3D={ }
---@class Animate3D : cc.Animate3D
cc.Animate3D=Animate3D


---* 
---@param keyFrame int@ #int keyFrame
---@param userInfo map_table@ #map_table userInfo
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:setKeyFrameUserInfo(keyFrame,userInfo) end
---* get & set speed, negative speed means playing reverse 
---@return float@ float#float ret (return value: float)
function Animate3D:getSpeed() end
---* set animate quality
---@param quality int@ #int quality
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:setQuality(quality) end
---* 
---@param weight float@ #float weight
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:setWeight(weight) end
---* 
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:removeFromMap() end
---* 
---@param animation cc.Animation3D@ #cc.Animation3D animation
---@param startFrame int@ #int startFrame
---@param endFrame int@ #int endFrame
---@param frameRate float@ #float frameRate
---@return boolean@ bool#bool ret (return value: bool)
function Animate3D:initWithFrames(animation,startFrame,endFrame,frameRate) end
---* 
---@return float@ float#float ret (return value: float)
function Animate3D:getOriginInterval() end
---* 
---@param speed float@ #float speed
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:setSpeed(speed) end
---@param animation cc.Animation3D@ #cc.Animation3D animation
---@param fromTime float@ #float fromTime
---@param duration float@ #float duration
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(animation:cc.Animation3D,fromTime:float,duration:float):boolean
---@overload fun(animation:cc.Animation3D):boolean
function Animate3D:init(animation,fromTime,duration) end
---* get & set origin interval
---@param interval float@ #float interval
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:setOriginInterval(interval) end
---* get & set blend weight, weight must positive
---@return float@ float#float ret (return value: float)
function Animate3D:getWeight() end
---* get animate quality
---@return int@ int#int ret (return value: int)
function Animate3D:getQuality() end
---@param animation cc.Animation3D@ #cc.Animation3D animation
---@param fromTime float@ #float fromTime
---@param duration float@ #float duration
---@return cc.Animate3D@ Animate3D#Animate3D ret (return value: cc.Animate3D)
---@overload fun(animation:cc.Animation3D,fromTime:float,duration:float):cc.Animate3D
---@overload fun(animation:cc.Animation3D):cc.Animate3D
function Animate3D:create(animation,fromTime,duration) end
---*  get animate transition time between 3d animations 
---@return float@ float#float ret (return value: float)
function Animate3D:getTransitionTime() end
---* create Animate3D by frame section, [startFrame, endFrame)<br>
---* param animation used to generate animate3D<br>
---* param startFrame<br>
---* param endFrame<br>
---* param frameRate default is 30 per second<br>
---* return Animate3D created using animate
---@param animation cc.Animation3D@ #cc.Animation3D animation
---@param startFrame int@ #int startFrame
---@param endFrame int@ #int endFrame
---@param frameRate float@ #float frameRate
---@return cc.Animate3D@ Animate3D#Animate3D ret (return value: cc.Animate3D)
function Animate3D:createWithFrames(animation,startFrame,endFrame,frameRate) end
---*  set animate transition time between 3d animations 
---@param transTime float@ #float transTime
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:setTransitionTime(transTime) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:startWithTarget(target) end
---* 
---@return cc.Animate3D@ Animate3D#Animate3D ret (return value: cc.Animate3D)
function Animate3D:reverse() end
---* 
---@return cc.Animate3D@ Animate3D#Animate3D ret (return value: cc.Animate3D)
function Animate3D:clone() end
---* 
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:stop() end
---* 
---@param t float@ #float t
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:update(t) end
---* 
---@param dt float@ #float dt
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:step(dt) end
---* 
---@return cc.Animate3D@ Animate3D#Animate3D self (return value: cc.Animate3D)
function Animate3D:Animate3D() end


---@class cc.Animation :  Ref
local Animation={ }
---@class Animation : cc.Animation
cc.Animation=Animation


---*  Gets the times the animation is going to loop. 0 means animation is not animated. 1, animation is executed one time, ... <br>
---* return The times the animation is going to loop.
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Animation:getLoops() end
---*  Adds a SpriteFrame to a Animation.<br>
---* param frame The frame will be added with one "delay unit".
---@param frame cc.SpriteFrame@ #cc.SpriteFrame frame
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:addSpriteFrame(frame) end
---*  Sets whether to restore the original frame when animation finishes. <br>
---* param restoreOriginalFrame Whether to restore the original frame when animation finishes.
---@param restoreOriginalFrame boolean@ #bool restoreOriginalFrame
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:setRestoreOriginalFrame(restoreOriginalFrame) end
---* 
---@return cc.Animation@ Animation#Animation ret (return value: cc.Animation)
function Animation:clone() end
---*  Gets the duration in seconds of the whole animation. It is the result of totalDelayUnits * delayPerUnit.<br>
---* return Result of totalDelayUnits * delayPerUnit.
---@return float@ float#float ret (return value: float)
function Animation:getDuration() end
---*  Initializes a Animation with AnimationFrame.<br>
---* since v2.0
---@param arrayOfAnimationFrameNames array_table@ #array_table arrayOfAnimationFrameNames
---@param delayPerUnit float@ #float delayPerUnit
---@param loops unsigned_int@ #unsigned int loops
---@return boolean@ bool#bool ret (return value: bool)
function Animation:initWithAnimationFrames(arrayOfAnimationFrameNames,delayPerUnit,loops) end
---*  Initializes a Animation. 
---@return boolean@ bool#bool ret (return value: bool)
function Animation:init() end
---*  Sets the array of AnimationFrames. <br>
---* param frames The array of AnimationFrames.
---@param frames array_table@ #array_table frames
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:setFrames(frames) end
---*  Gets the array of AnimationFrames.<br>
---* return The array of AnimationFrames.
---@return array_table@ array_table#array_table ret (return value: array_table)
function Animation:getFrames() end
---*  Sets the times the animation is going to loop. 0 means animation is not animated. 1, animation is executed one time, ... <br>
---* param loops The times the animation is going to loop.
---@param loops unsigned_int@ #unsigned int loops
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:setLoops(loops) end
---*  Sets the delay in seconds of the "delay unit".<br>
---* param delayPerUnit The delay in seconds of the "delay unit".
---@param delayPerUnit float@ #float delayPerUnit
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:setDelayPerUnit(delayPerUnit) end
---*  Adds a frame with an image filename. Internally it will create a SpriteFrame and it will add it.<br>
---* The frame will be added with one "delay unit".<br>
---* Added to facilitate the migration from v0.8 to v0.9.<br>
---* param filename The path of SpriteFrame.
---@param filename string@ #string filename
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:addSpriteFrameWithFile(filename) end
---*  Gets the total Delay units of the Animation. <br>
---* return The total Delay units of the Animation.
---@return float@ float#float ret (return value: float)
function Animation:getTotalDelayUnits() end
---*  Gets the delay in seconds of the "delay unit".<br>
---* return The delay in seconds of the "delay unit".
---@return float@ float#float ret (return value: float)
function Animation:getDelayPerUnit() end
---*  Initializes a Animation with frames and a delay between frames.<br>
---* since v0.99.5
---@param arrayOfSpriteFrameNames array_table@ #array_table arrayOfSpriteFrameNames
---@param delay float@ #float delay
---@param loops unsigned_int@ #unsigned int loops
---@return boolean@ bool#bool ret (return value: bool)
function Animation:initWithSpriteFrames(arrayOfSpriteFrameNames,delay,loops) end
---*  Checks whether to restore the original frame when animation finishes. <br>
---* return Restore the original frame when animation finishes.
---@return boolean@ bool#bool ret (return value: bool)
function Animation:getRestoreOriginalFrame() end
---*  Adds a frame with a texture and a rect. Internally it will create a SpriteFrame and it will add it.<br>
---* The frame will be added with one "delay unit".<br>
---* Added to facilitate the migration from v0.8 to v0.9.<br>
---* param pobTexture A frame with a texture.<br>
---* param rect The Texture of rect.
---@param pobTexture cc.Texture2D@ #cc.Texture2D pobTexture
---@param rect rect_table@ #rect_table rect
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:addSpriteFrameWithTexture(pobTexture,rect) end
---@param arrayOfAnimationFrameNames array_table@ #array_table arrayOfAnimationFrameNames
---@param delayPerUnit float@ #float delayPerUnit
---@param loops unsigned_int@ #unsigned int loops
---@return cc.Animation@ Animation#Animation ret (return value: cc.Animation)
---@overload fun(arrayOfAnimationFrameNames:array_table,delayPerUnit:float,loops:unsigned_int):cc.Animation
---@overload fun():cc.Animation
function Animation:create(arrayOfAnimationFrameNames,delayPerUnit,loops) end
---* 
---@param arrayOfSpriteFrameNames array_table@ #array_table arrayOfSpriteFrameNames
---@param delay float@ #float delay
---@param loops unsigned_int@ #unsigned int loops
---@return cc.Animation@ Animation#Animation ret (return value: cc.Animation)
function Animation:createWithSpriteFrames(arrayOfSpriteFrameNames,delay,loops) end
---* 
---@return cc.Animation@ Animation#Animation self (return value: cc.Animation)
function Animation:Animation() end


---@class cc.Animation3D :  Ref
local Animation3D={ }
---@class Animation3D : cc.Animation3D
cc.Animation3D=Animation3D


---* init Animation3D with file name and animation name
---@param filename string@ #string filename
---@param animationName string@ #string animationName
---@return boolean@ bool#bool ret (return value: bool)
function Animation3D:initWithFile(filename,animationName) end
---* init Animation3D from bundle data
---@param data cc.Animation3DData@ #cc.Animation3DData data
---@return boolean@ bool#bool ret (return value: bool)
function Animation3D:init(data) end
---* get duration
---@return float@ float#float ret (return value: float)
function Animation3D:getDuration() end
---* read all animation or only the animation with given animationName? animationName == "" read the first.
---@param filename string@ #string filename
---@param animationName string@ #string animationName
---@return cc.Animation3D@ Animation3D#Animation3D ret (return value: cc.Animation3D)
function Animation3D:create(filename,animationName) end
---* 
---@return cc.Animation3D@ Animation3D#Animation3D self (return value: cc.Animation3D)
function Animation3D:Animation3D() end


---@class cc.AnimationCache :  Ref
local AnimationCache={ }
---@class AnimationCache : cc.AnimationCache
cc.AnimationCache=AnimationCache


---*  Returns a Animation that was previously added.<br>
---* If the name is not found it will return nil.<br>
---* You should retain the returned copy if you are going to use it.<br>
---* return A Animation that was previously added. If the name is not found it will return nil.
---@param name string@ #string name
---@return cc.Animation@ Animation#Animation ret (return value: cc.Animation)
function AnimationCache:getAnimation(name) end
---*  Adds a Animation with a name.<br>
---* param animation An animation.<br>
---* param name The name of animation.
---@param animation cc.Animation@ #cc.Animation animation
---@param name string@ #string name
---@return cc.AnimationCache@ AnimationCache#AnimationCache self (return value: cc.AnimationCache)
function AnimationCache:addAnimation(animation,name) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function AnimationCache:init() end
---*  Adds an animation from an NSDictionary.<br>
---* Make sure that the frames were previously loaded in the SpriteFrameCache.<br>
---* param dictionary An NSDictionary.<br>
---* param plist The path of the relative file,it use to find the plist path for load SpriteFrames.<br>
---* since v1.1<br>
---* js NA
---@param dictionary map_table@ #map_table dictionary
---@param plist string@ #string plist
---@return cc.AnimationCache@ AnimationCache#AnimationCache self (return value: cc.AnimationCache)
function AnimationCache:addAnimationsWithDictionary(dictionary,plist) end
---*  Deletes a Animation from the cache.<br>
---* param name The name of animation.
---@param name string@ #string name
---@return cc.AnimationCache@ AnimationCache#AnimationCache self (return value: cc.AnimationCache)
function AnimationCache:removeAnimation(name) end
---*  Adds an animation from a plist file.<br>
---* Make sure that the frames were previously loaded in the SpriteFrameCache.<br>
---* since v1.1<br>
---* js addAnimations<br>
---* lua addAnimations<br>
---* param plist An animation from a plist file.
---@param plist string@ #string plist
---@return cc.AnimationCache@ AnimationCache#AnimationCache self (return value: cc.AnimationCache)
function AnimationCache:addAnimationsWithFile(plist) end
---*  Purges the cache. It releases all the Animation objects and the shared instance.<br>
---* js NA
---@return cc.AnimationCache@ AnimationCache#AnimationCache self (return value: cc.AnimationCache)
function AnimationCache:destroyInstance() end
---*  Returns the shared instance of the Animation cache <br>
---* js NA
---@return cc.AnimationCache@ AnimationCache#AnimationCache ret (return value: cc.AnimationCache)
function AnimationCache:getInstance() end
---* js ctor
---@return cc.AnimationCache@ AnimationCache#AnimationCache self (return value: cc.AnimationCache)
function AnimationCache:AnimationCache() end


---@class ccs.AnimationData :  Ref
local AnimationData={ }
---@class AnimationData : ccs.AnimationData
ccs.AnimationData=AnimationData


---* 
---@param movementName string@ #string movementName
---@return ccs.MovementData@ MovementData#MovementData ret (return value: ccs.MovementData)
function AnimationData:getMovement(movementName) end
---* 
---@return int@ int#int ret (return value: int)
function AnimationData:getMovementCount() end
---* 
---@param movData ccs.MovementData@ #ccs.MovementData movData
---@return ccs.AnimationData@ AnimationData#AnimationData self (return value: ccs.AnimationData)
function AnimationData:addMovement(movData) end
---* 
---@return ccs.AnimationData@ AnimationData#AnimationData ret (return value: ccs.AnimationData)
function AnimationData:create() end
---* js ctor
---@return ccs.AnimationData@ AnimationData#AnimationData self (return value: ccs.AnimationData)
function AnimationData:AnimationData() end


---@class cc.AnimationFrame :  Ref
local AnimationFrame={ }
---@class AnimationFrame : cc.AnimationFrame
cc.AnimationFrame=AnimationFrame


---*  Set the SpriteFrame.<br>
---* param frame A SpriteFrame will be used.
---@param frame cc.SpriteFrame@ #cc.SpriteFrame frame
---@return cc.AnimationFrame@ AnimationFrame#AnimationFrame self (return value: cc.AnimationFrame)
function AnimationFrame:setSpriteFrame(frame) end
---@return map_table@ map_table#map_table ret (return value: map_table)
---@overload fun():map_table
---@overload fun():map_table
function AnimationFrame:getUserInfo() end
---*  Sets the units of time the frame takes.<br>
---* param delayUnits The units of time the frame takes.
---@param delayUnits float@ #float delayUnits
---@return cc.AnimationFrame@ AnimationFrame#AnimationFrame self (return value: cc.AnimationFrame)
function AnimationFrame:setDelayUnits(delayUnits) end
---* 
---@return cc.AnimationFrame@ AnimationFrame#AnimationFrame ret (return value: cc.AnimationFrame)
function AnimationFrame:clone() end
---*  Return a SpriteFrameName to be used.<br>
---* return a SpriteFrameName to be used.
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame ret (return value: cc.SpriteFrame)
function AnimationFrame:getSpriteFrame() end
---*  Gets the units of time the frame takes.<br>
---* return The units of time the frame takes.
---@return float@ float#float ret (return value: float)
function AnimationFrame:getDelayUnits() end
---*  Sets user information.<br>
---* param userInfo A dictionary as UserInfo.
---@param userInfo map_table@ #map_table userInfo
---@return cc.AnimationFrame@ AnimationFrame#AnimationFrame self (return value: cc.AnimationFrame)
function AnimationFrame:setUserInfo(userInfo) end
---*  initializes the animation frame with a spriteframe, number of delay units and a notification user info 
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@param delayUnits float@ #float delayUnits
---@param userInfo map_table@ #map_table userInfo
---@return boolean@ bool#bool ret (return value: bool)
function AnimationFrame:initWithSpriteFrame(spriteFrame,delayUnits,userInfo) end
---* Creates the animation frame with a spriteframe, number of delay units and a notification user info.<br>
---* param spriteFrame The animation frame with a spriteframe.<br>
---* param delayUnits Number of delay units.<br>
---* param userInfo A notification user info.<br>
---* since 3.0
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@param delayUnits float@ #float delayUnits
---@param userInfo map_table@ #map_table userInfo
---@return cc.AnimationFrame@ AnimationFrame#AnimationFrame ret (return value: cc.AnimationFrame)
function AnimationFrame:create(spriteFrame,delayUnits,userInfo) end
---* js ctor
---@return cc.AnimationFrame@ AnimationFrame#AnimationFrame self (return value: cc.AnimationFrame)
function AnimationFrame:AnimationFrame() end


---@class cc.Application 
local Application={ }
---@class Application : cc.Application
cc.Application=Application


---* brief Get target platform
---@return int@ int#int ret (return value: int)
function Application:getTargetPlatform() end
---* brief Get current language config<br>
---* return Current language config
---@return int@ int#int ret (return value: int)
function Application:getCurrentLanguage() end
---* brief Get current language iso 639-1 code<br>
---* return Current language iso 639-1 code
---@return char@ char#char ret (return value: char)
function Application:getCurrentLanguageCode() end
---* brief Open url in default browser<br>
---* param String with url to open.<br>
---* return true if the resource located by the URL was successfully opened; otherwise false.
---@param url string@ #string url
---@return boolean@ bool#bool ret (return value: bool)
function Application:openURL(url) end
---* brief Get application version.
---@return string@ string#string ret (return value: string)
function Application:getVersion() end
---* brief    Callback by Director to limit FPS.<br>
---* param interval The time, expressed in seconds, between current frame and next.
---@param interval float@ #float interval
---@return cc.Application@ Application#Application self (return value: cc.Application)
function Application:setAnimationInterval(interval) end
---* brief    Get current application instance.<br>
---* return Current application instance pointer.
---@return cc.Application@ Application#Application ret (return value: cc.Application)
function Application:getInstance() end


---@class ccs.Armature :  Node@BlendProtocol
local Armature={ }
---@class Armature : ccs.Armature
ccs.Armature=Armature


---* Get a bone with the specified name<br>
---* param name The bone's name you want to get
---@param name string@ #string name
---@return ccs.Bone@ Bone#Bone ret (return value: ccs.Bone)
function Armature:getBone(name) end
---* Change a bone's parent with the specified parent name.<br>
---* param bone The bone you want to change parent<br>
---* param parentName The new parent's name.
---@param bone ccs.Bone@ #ccs.Bone bone
---@param parentName string@ #string parentName
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:changeBoneParent(bone,parentName) end
---* 
---@param animation ccs.ArmatureAnimation@ #ccs.ArmatureAnimation animation
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:setAnimation(animation) end
---* 
---@param x float@ #float x
---@param y float@ #float y
---@return ccs.Bone@ Bone#Bone ret (return value: ccs.Bone)
function Armature:getBoneAtPoint(x,y) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Armature:getArmatureTransformDirty() end
---* 
---@param version float@ #float version
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:setVersion(version) end
---* Set contentsize and Calculate anchor point.
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:updateOffsetPoint() end
---* 
---@return ccs.Bone@ Bone#Bone ret (return value: ccs.Bone)
function Armature:getParentBone() end
---* Remove a bone with the specified name. If recursion it will also remove child Bone recursionly.<br>
---* param bone The bone you want to remove<br>
---* param recursion Determine whether remove the bone's child  recursion.
---@param bone ccs.Bone@ #ccs.Bone bone
---@param recursion boolean@ #bool recursion
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:removeBone(bone,recursion) end
---* 
---@return ccs.BatchNode@ BatchNode#BatchNode ret (return value: ccs.BatchNode)
function Armature:getBatchNode() end
---@param name string@ #string name
---@param parentBone ccs.Bone@ #ccs.Bone parentBone
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(name:string,parentBone:ccs.Bone):boolean
---@overload fun(name:string):boolean
function Armature:init(name,parentBone) end
---* 
---@param parentBone ccs.Bone@ #ccs.Bone parentBone
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:setParentBone(parentBone) end
---* 
---@param batchNode ccs.BatchNode@ #ccs.BatchNode batchNode
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:setBatchNode(batchNode) end
---* js NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function Armature:getBlendFunc() end
---* 
---@param armatureData ccs.ArmatureData@ #ccs.ArmatureData armatureData
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:setArmatureData(armatureData) end
---* Add a Bone to this Armature,<br>
---* param bone  The Bone you want to add to Armature<br>
---* param parentName   The parent Bone's name you want to add to . If it's  nullptr, then set Armature to its parent
---@param bone ccs.Bone@ #ccs.Bone bone
---@param parentName string@ #string parentName
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:addBone(bone,parentName) end
---* 
---@return ccs.ArmatureData@ ArmatureData#ArmatureData ret (return value: ccs.ArmatureData)
function Armature:getArmatureData() end
---* 
---@return float@ float#float ret (return value: float)
function Armature:getVersion() end
---* 
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation ret (return value: ccs.ArmatureAnimation)
function Armature:getAnimation() end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Armature:getOffsetPoints() end
---* js NA<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:setBlendFunc(blendFunc) end
---* Get Armature's bone dictionary<br>
---* return Armature's bone dictionary
---@return map_table@ map_table#map_table ret (return value: map_table)
function Armature:getBoneDic() end
---@param name string@ #string name
---@param parentBone ccs.Bone@ #ccs.Bone parentBone
---@return ccs.Armature@ Armature#Armature ret (return value: ccs.Armature)
---@overload fun(name:string):ccs.Armature
---@overload fun():ccs.Armature
---@overload fun(name:string,parentBone:ccs.Bone):ccs.Armature
function Armature:create(name,parentBone) end
---* 
---@param point vec2_table@ #vec2_table point
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:setAnchorPoint(point) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:draw(renderer,transform,flags) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Armature:getAnchorPointInPoints() end
---* 
---@param dt float@ #float dt
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:update(dt) end
---* Init the empty armature
---@return boolean@ bool#bool ret (return value: bool)
function Armature:init() end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Armature:getNodeToParentTransform() end
---* This boundingBox will calculate all bones' boundingBox every time
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Armature:getBoundingBox() end
---* js ctor
---@return ccs.Armature@ Armature#Armature self (return value: ccs.Armature)
function Armature:Armature() end


---@class ccs.ArmatureAnimation :  ProcessBase
local ArmatureAnimation={ }
---@class ArmatureAnimation : ccs.ArmatureAnimation
ccs.ArmatureAnimation=ArmatureAnimation


---* 
---@return float@ float#float ret (return value: float)
function ArmatureAnimation:getSpeedScale() end
---* Play animation by animation name.<br>
---* param  animationName  The animation name you want to play<br>
---* param  durationTo The frames between two animation changing-over.<br>
---* It's meaning is changing to this animation need how many frames<br>
---* -1 : use the value from MovementData get from flash design panel<br>
---* param  loop   Whether the animation is loop<br>
---* loop < 0 : use the value from MovementData get from flash design panel<br>
---* loop = 0 : this animation is not loop<br>
---* loop > 0 : this animation is loop
---@param animationName string@ #string animationName
---@param durationTo int@ #int durationTo
---@param loop int@ #int loop
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:play(animationName,durationTo,loop) end
---* Go to specified frame and pause current movement.
---@param frameIndex int@ #int frameIndex
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:gotoAndPause(frameIndex) end
---* 
---@param movementIndexes array_table@ #array_table movementIndexes
---@param durationTo int@ #int durationTo
---@param loop boolean@ #bool loop
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:playWithIndexes(movementIndexes,durationTo,loop) end
---* 
---@param data ccs.AnimationData@ #ccs.AnimationData data
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:setAnimationData(data) end
---* Scale animation play speed.<br>
---* param animationScale Scale value
---@param speedScale float@ #float speedScale
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:setSpeedScale(speedScale) end
---* 
---@return ccs.AnimationData@ AnimationData#AnimationData ret (return value: ccs.AnimationData)
function ArmatureAnimation:getAnimationData() end
---* Go to specified frame and play current movement.<br>
---* You need first switch to the movement you want to play, then call this function.<br>
---* example : playByIndex(0);<br>
---* gotoAndPlay(0);<br>
---* playByIndex(1);<br>
---* gotoAndPlay(0);<br>
---* gotoAndPlay(15);
---@param frameIndex int@ #int frameIndex
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:gotoAndPlay(frameIndex) end
---* Init with a Armature<br>
---* param armature The Armature ArmatureAnimation will bind to
---@param armature ccs.Armature@ #ccs.Armature armature
---@return boolean@ bool#bool ret (return value: bool)
function ArmatureAnimation:init(armature) end
---* 
---@param movementNames array_table@ #array_table movementNames
---@param durationTo int@ #int durationTo
---@param loop boolean@ #bool loop
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:playWithNames(movementNames,durationTo,loop) end
---* Get movement count
---@return int@ int#int ret (return value: int)
function ArmatureAnimation:getMovementCount() end
---* 
---@param animationIndex int@ #int animationIndex
---@param durationTo int@ #int durationTo
---@param loop int@ #int loop
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:playWithIndex(animationIndex,durationTo,loop) end
---* Get current movementID<br>
---* return The name of current movement
---@return string@ string#string ret (return value: string)
function ArmatureAnimation:getCurrentMovementID() end
---* Create with a Armature<br>
---* param armature The Armature ArmatureAnimation will bind to
---@param armature ccs.Armature@ #ccs.Armature armature
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation ret (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:create(armature) end
---* Pause the Process
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:pause() end
---* Stop the Process
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:stop() end
---* 
---@param dt float@ #float dt
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:update(dt) end
---* Resume the Process
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:resume() end
---* js ctor
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation self (return value: ccs.ArmatureAnimation)
function ArmatureAnimation:ArmatureAnimation() end


---@class ccs.ArmatureData :  Ref
local ArmatureData={ }
---@class ArmatureData : ccs.ArmatureData
ccs.ArmatureData=ArmatureData


---* 
---@param boneData ccs.BoneData@ #ccs.BoneData boneData
---@return ccs.ArmatureData@ ArmatureData#ArmatureData self (return value: ccs.ArmatureData)
function ArmatureData:addBoneData(boneData) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ArmatureData:init() end
---* 
---@param boneName string@ #string boneName
---@return ccs.BoneData@ BoneData#BoneData ret (return value: ccs.BoneData)
function ArmatureData:getBoneData(boneName) end
---* 
---@return ccs.ArmatureData@ ArmatureData#ArmatureData ret (return value: ccs.ArmatureData)
function ArmatureData:create() end
---* js ctor
---@return ccs.ArmatureData@ ArmatureData#ArmatureData self (return value: ccs.ArmatureData)
function ArmatureData:ArmatureData() end


---@class ccs.ArmatureDataManager :  Ref
local ArmatureDataManager={ }
---@class ArmatureDataManager : ccs.ArmatureDataManager
ccs.ArmatureDataManager=ArmatureDataManager


---* 
---@return map_table@ map_table#map_table ret (return value: map_table)
function ArmatureDataManager:getAnimationDatas() end
---* brief    remove animation data<br>
---* param     id the id of the animation data
---@param id string@ #string id
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:removeAnimationData(id) end
---* Add armature data<br>
---* param id The id of the armature data<br>
---* param armatureData ArmatureData *
---@param id string@ #string id
---@param armatureData ccs.ArmatureData@ #ccs.ArmatureData armatureData
---@param configFilePath string@ #string configFilePath
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:addArmatureData(id,armatureData,configFilePath) end
---@param imagePath string@ #string imagePath
---@param plistPath string@ #string plistPath
---@param configFilePath string@ #string configFilePath
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
---@overload fun(imagePath:string,plistPath:string,configFilePath:string):ccs.ArmatureDataManager
---@overload fun(imagePath:string):ccs.ArmatureDataManager
function ArmatureDataManager:addArmatureFileInfo(imagePath,plistPath,configFilePath) end
---* 
---@param configFilePath string@ #string configFilePath
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:removeArmatureFileInfo(configFilePath) end
---* 
---@return map_table@ map_table#map_table ret (return value: map_table)
function ArmatureDataManager:getTextureDatas() end
---* brief    get texture data<br>
---* param     id the id of the texture data you want to get<br>
---* return TextureData *
---@param id string@ #string id
---@return ccs.TextureData@ TextureData#TextureData ret (return value: ccs.TextureData)
function ArmatureDataManager:getTextureData(id) end
---* brief    get armature data<br>
---* param    id the id of the armature data you want to get<br>
---* return    ArmatureData *
---@param id string@ #string id
---@return ccs.ArmatureData@ ArmatureData#ArmatureData ret (return value: ccs.ArmatureData)
function ArmatureDataManager:getArmatureData(id) end
---* brief    get animation data from _animationDatas(Dictionary)<br>
---* param     id the id of the animation data you want to get<br>
---* return AnimationData *
---@param id string@ #string id
---@return ccs.AnimationData@ AnimationData#AnimationData ret (return value: ccs.AnimationData)
function ArmatureDataManager:getAnimationData(id) end
---* brief    add animation data<br>
---* param     id the id of the animation data<br>
---* return AnimationData *
---@param id string@ #string id
---@param animationData ccs.AnimationData@ #ccs.AnimationData animationData
---@param configFilePath string@ #string configFilePath
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:addAnimationData(id,animationData,configFilePath) end
---* Init ArmatureDataManager
---@return boolean@ bool#bool ret (return value: bool)
function ArmatureDataManager:init() end
---* brief    remove armature data<br>
---* param    id the id of the armature data you want to get
---@param id string@ #string id
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:removeArmatureData(id) end
---* 
---@return map_table@ map_table#map_table ret (return value: map_table)
function ArmatureDataManager:getArmatureDatas() end
---* brief    remove texture data<br>
---* param     id the id of the texture data you want to get
---@param id string@ #string id
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:removeTextureData(id) end
---* brief    add texture data<br>
---* param     id the id of the texture data<br>
---* return TextureData *
---@param id string@ #string id
---@param textureData ccs.TextureData@ #ccs.TextureData textureData
---@param configFilePath string@ #string configFilePath
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:addTextureData(id,textureData,configFilePath) end
---* brief    Judge whether or not need auto load sprite file
---@return boolean@ bool#bool ret (return value: bool)
function ArmatureDataManager:isAutoLoadSpriteFile() end
---* brief    Add sprite frame to CCSpriteFrameCache, it will save display name and it's relative image name
---@param plistPath string@ #string plistPath
---@param imagePath string@ #string imagePath
---@param configFilePath string@ #string configFilePath
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:addSpriteFrameFromFile(plistPath,imagePath,configFilePath) end
---* 
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager self (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:destroyInstance() end
---* 
---@return ccs.ArmatureDataManager@ ArmatureDataManager#ArmatureDataManager ret (return value: ccs.ArmatureDataManager)
function ArmatureDataManager:getInstance() end


---@class ccs.ArmatureDisplayData :  DisplayData
local ArmatureDisplayData={ }
---@class ArmatureDisplayData : ccs.ArmatureDisplayData
ccs.ArmatureDisplayData=ArmatureDisplayData


---* 
---@return ccs.ArmatureDisplayData@ ArmatureDisplayData#ArmatureDisplayData ret (return value: ccs.ArmatureDisplayData)
function ArmatureDisplayData:create() end
---* js ctor
---@return ccs.ArmatureDisplayData@ ArmatureDisplayData#ArmatureDisplayData self (return value: ccs.ArmatureDisplayData)
function ArmatureDisplayData:ArmatureDisplayData() end


---@class cc.AssetsManager :  Node
local AssetsManager={ }
---@class AssetsManager : cc.AssetsManager
cc.AssetsManager=AssetsManager


---* 
---@param storagePath char@ #char storagePath
---@return cc.AssetsManager@ AssetsManager#AssetsManager self (return value: cc.AssetsManager)
function AssetsManager:setStoragePath(storagePath) end
---* 
---@param packageUrl char@ #char packageUrl
---@return cc.AssetsManager@ AssetsManager#AssetsManager self (return value: cc.AssetsManager)
function AssetsManager:setPackageUrl(packageUrl) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function AssetsManager:checkUpdate() end
---* 
---@return char@ char#char ret (return value: char)
function AssetsManager:getStoragePath() end
---* 
---@return cc.AssetsManager@ AssetsManager#AssetsManager self (return value: cc.AssetsManager)
function AssetsManager:update() end
---*  @brief Sets connection time out in seconds
---@param timeout unsigned_int@ #unsigned int timeout
---@return cc.AssetsManager@ AssetsManager#AssetsManager self (return value: cc.AssetsManager)
function AssetsManager:setConnectionTimeout(timeout) end
---* 
---@param versionFileUrl char@ #char versionFileUrl
---@return cc.AssetsManager@ AssetsManager#AssetsManager self (return value: cc.AssetsManager)
function AssetsManager:setVersionFileUrl(versionFileUrl) end
---* 
---@return char@ char#char ret (return value: char)
function AssetsManager:getPackageUrl() end
---*  @brief Gets connection time out in seconds
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function AssetsManager:getConnectionTimeout() end
---* 
---@return string@ string#string ret (return value: string)
function AssetsManager:getVersion() end
---* 
---@return char@ char#char ret (return value: char)
function AssetsManager:getVersionFileUrl() end
---* 
---@return cc.AssetsManager@ AssetsManager#AssetsManager self (return value: cc.AssetsManager)
function AssetsManager:deleteVersion() end
---* 
---@param packageUrl char@ #char packageUrl
---@param versionFileUrl char@ #char versionFileUrl
---@param storagePath char@ #char storagePath
---@param errorCallback function@ #function errorCallback
---@param progressCallback function@ #function progressCallback
---@param successCallback function@ #function successCallback
---@return cc.AssetsManager@ AssetsManager#AssetsManager ret (return value: cc.AssetsManager)
function AssetsManager:create(packageUrl,versionFileUrl,storagePath,errorCallback,progressCallback,successCallback) end
---* 
---@return cc.AssetsManager@ AssetsManager#AssetsManager self (return value: cc.AssetsManager)
function AssetsManager:AssetsManager() end


---@class cc.AssetsManagerEx :  Ref
local AssetsManagerEx={ }
---@class AssetsManagerEx : cc.AssetsManagerEx
cc.AssetsManagerEx=AssetsManagerEx


---*  @brief Gets the current update state.
---@return int@ int#int ret (return value: int)
function AssetsManagerEx:getState() end
---*  @brief Function for retrieving the max concurrent task count
---@return int@ int#int ret (return value: int)
function AssetsManagerEx:getMaxConcurrentTask() end
---*  @brief  Check out if there is a new version of manifest.<br>
---* You may use this method before updating, then let user determine whether<br>
---* he wants to update resources.
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx self (return value: cc.AssetsManagerEx)
function AssetsManagerEx:checkUpdate() end
---*  @brief Set the verification function for checking whether downloaded asset is correct, e.g. using md5 verification<br>
---* param callback  The verify callback function
---@param callback function@ #function callback
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx self (return value: cc.AssetsManagerEx)
function AssetsManagerEx:setVerifyCallback(callback) end
---*  @brief Gets storage path.
---@return string@ string#string ret (return value: string)
function AssetsManagerEx:getStoragePath() end
---*  @brief Update with the current local manifest.
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx self (return value: cc.AssetsManagerEx)
function AssetsManagerEx:update() end
---*  @brief Set the handle function for comparing manifests versions<br>
---* param handle    The compare function
---@param handle function@ #function handle
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx self (return value: cc.AssetsManagerEx)
function AssetsManagerEx:setVersionCompareHandle(handle) end
---*  @brief Function for setting the max concurrent task count
---@param max int@ #int max
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx self (return value: cc.AssetsManagerEx)
function AssetsManagerEx:setMaxConcurrentTask(max) end
---*  @brief Function for retrieving the local manifest object
---@return cc.Manifest@ Manifest#Manifest ret (return value: cc.Manifest)
function AssetsManagerEx:getLocalManifest() end
---*  @brief Function for retrieving the remote manifest object
---@return cc.Manifest@ Manifest#Manifest ret (return value: cc.Manifest)
function AssetsManagerEx:getRemoteManifest() end
---*  @brief Reupdate all failed assets under the current AssetsManagerEx context
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx self (return value: cc.AssetsManagerEx)
function AssetsManagerEx:downloadFailedAssets() end
---*  @brief Create function for creating a new AssetsManagerEx<br>
---* param manifestUrl   The url for the local manifest file<br>
---* param storagePath   The storage path for downloaded assets<br>
---* warning   The cached manifest in your storage path have higher priority and will be searched first,<br>
---* only if it doesn't exist, AssetsManagerEx will use the given manifestUrl.
---@param manifestUrl string@ #string manifestUrl
---@param storagePath string@ #string storagePath
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx ret (return value: cc.AssetsManagerEx)
function AssetsManagerEx:create(manifestUrl,storagePath) end
---* 
---@param manifestUrl string@ #string manifestUrl
---@param storagePath string@ #string storagePath
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx self (return value: cc.AssetsManagerEx)
function AssetsManagerEx:AssetsManagerEx(manifestUrl,storagePath) end


---@class cc.AsyncTaskPool 
local AsyncTaskPool={ }
---@class AsyncTaskPool : cc.AsyncTaskPool
cc.AsyncTaskPool=AsyncTaskPool


---@param type int@ #int type
---@param callback function@ #function callback
---@param callbackParam void@ #void callbackParam
---@param task function@ #function task
---@return cc.AsyncTaskPool@ AsyncTaskPool#AsyncTaskPool self (return value: cc.AsyncTaskPool)
---@overload fun(type:int,callback:function):cc.AsyncTaskPool
---@overload fun(type:int,callback:function,callbackParam:void,task:function):cc.AsyncTaskPool
function AsyncTaskPool:enqueue(type,callback,callbackParam,task) end
---* Stop tasks.<br>
---* param type Task type you want to stop.
---@param type int@ #int type
---@return cc.AsyncTaskPool@ AsyncTaskPool#AsyncTaskPool self (return value: cc.AsyncTaskPool)
function AsyncTaskPool:stopTasks(type) end
---* Destroys the async task pool.
---@return cc.AsyncTaskPool@ AsyncTaskPool#AsyncTaskPool self (return value: cc.AsyncTaskPool)
function AsyncTaskPool:destroyInstance() end
---* Returns the shared instance of the async task pool.
---@return cc.AsyncTaskPool@ AsyncTaskPool#AsyncTaskPool ret (return value: cc.AsyncTaskPool)
function AsyncTaskPool:getInstance() end
---* 
---@return cc.AsyncTaskPool@ AsyncTaskPool#AsyncTaskPool self (return value: cc.AsyncTaskPool)
function AsyncTaskPool:AsyncTaskPool() end


---@class cc.AtlasNode :  Node@TextureProtocol
local AtlasNode={ }
---@class AtlasNode : cc.AtlasNode
cc.AtlasNode=AtlasNode


---*  updates the Atlas (indexed vertex array).<br>
---* Shall be overridden in subclasses.
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:updateAtlasValues() end
---*  Initializes an AtlasNode  with an Atlas file the width and height of each item and the quantity of items to render
---@param tile string@ #string tile
---@param tileWidth int@ #int tileWidth
---@param tileHeight int@ #int tileHeight
---@param itemsToRender int@ #int itemsToRender
---@return boolean@ bool#bool ret (return value: bool)
function AtlasNode:initWithTileFile(tile,tileWidth,tileHeight,itemsToRender) end
---* 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function AtlasNode:getTexture() end
---*  Set an buffer manager of the texture vertex. 
---@param textureAtlas cc.TextureAtlas@ #cc.TextureAtlas textureAtlas
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:setTextureAtlas(textureAtlas) end
---* code<br>
---* When this function bound into js or lua,the parameter will be changed<br>
---* In js: var setBlendFunc(var src, var dst)<br>
---* endcode<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:setBlendFunc(blendFunc) end
---*  Return the buffer manager of the texture vertex. <br>
---* return Return A TextureAtlas.
---@return cc.TextureAtlas@ TextureAtlas#TextureAtlas ret (return value: cc.TextureAtlas)
function AtlasNode:getTextureAtlas() end
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function AtlasNode:getBlendFunc() end
---* 
---@return int@ int#int ret (return value: int)
function AtlasNode:getQuadsToDraw() end
---* 
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:setTexture(texture) end
---*  Initializes an AtlasNode  with a texture the width and height of each item measured in points and the quantity of items to render
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param tileWidth int@ #int tileWidth
---@param tileHeight int@ #int tileHeight
---@param itemsToRender int@ #int itemsToRender
---@return boolean@ bool#bool ret (return value: bool)
function AtlasNode:initWithTexture(texture,tileWidth,tileHeight,itemsToRender) end
---* 
---@param quadsToDraw int@ #int quadsToDraw
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:setQuadsToDraw(quadsToDraw) end
---*  creates a AtlasNode  with an Atlas file the width and height of each item and the quantity of items to render.<br>
---* param filename The path of Atlas file.<br>
---* param tileWidth The width of the item.<br>
---* param tileHeight The height of the item.<br>
---* param itemsToRender The quantity of items to render.
---@param filename string@ #string filename
---@param tileWidth int@ #int tileWidth
---@param tileHeight int@ #int tileHeight
---@param itemsToRender int@ #int itemsToRender
---@return cc.AtlasNode@ AtlasNode#AtlasNode ret (return value: cc.AtlasNode)
function AtlasNode:create(filename,tileWidth,tileHeight,itemsToRender) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:draw(renderer,transform,flags) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function AtlasNode:isOpacityModifyRGB() end
---* 
---@param color color3b_table@ #color3b_table color
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:setColor(color) end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function AtlasNode:getColor() end
---* 
---@param isOpacityModifyRGB boolean@ #bool isOpacityModifyRGB
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:setOpacityModifyRGB(isOpacityModifyRGB) end
---* 
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:setOpacity(opacity) end
---* 
---@return cc.AtlasNode@ AtlasNode#AtlasNode self (return value: cc.AtlasNode)
function AtlasNode:AtlasNode() end


---@class cc.AttachNode :  Node
local AttachNode={ }
---@class AttachNode : cc.AttachNode
cc.AttachNode=AttachNode


---* creates an AttachNode<br>
---* param attachBone The bone to which the AttachNode is going to attach, the attacheBone must be a bone of the AttachNode's parent
---@param attachBone cc.Bone3D@ #cc.Bone3D attachBone
---@return cc.AttachNode@ AttachNode#AttachNode ret (return value: cc.AttachNode)
function AttachNode:create(attachBone) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.AttachNode@ AttachNode#AttachNode self (return value: cc.AttachNode)
function AttachNode:visit(renderer,parentTransform,parentFlags) end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function AttachNode:getWorldToNodeTransform() end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function AttachNode:getNodeToWorldTransform() end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function AttachNode:getNodeToParentTransform() end
---* 
---@return cc.AttachNode@ AttachNode#AttachNode self (return value: cc.AttachNode)
function AttachNode:AttachNode() end


---@class ccexp.AudioEngine 
local AudioEngine={ }
---@class AudioEngine : ccexp.AudioEngine
ccexp.AudioEngine=AudioEngine


---* 
---@return boolean@ bool#bool ret (return value: bool)
function AudioEngine:lazyInit() end
---* Sets the current playback position of an audio instance.<br>
---* param audioID   An audioID returned by the play2d function.<br>
---* param sec       The offset in seconds from the start to seek to.<br>
---* return 
---@param audioID int@ #int audioID
---@param sec float@ #float sec
---@return boolean@ bool#bool ret (return value: bool)
function AudioEngine:setCurrentTime(audioID,sec) end
---* Gets the volume value of an audio instance.<br>
---* param audioID An audioID returned by the play2d function.<br>
---* return Volume value (range from 0.0 to 1.0).
---@param audioID int@ #int audioID
---@return float@ float#float ret (return value: float)
function AudioEngine:getVolume(audioID) end
---* Uncache the audio data from internal buffer.<br>
---* AudioEngine cache audio data on ios,mac, and win32 platform.<br>
---* warning This can lead to stop related audio first.<br>
---* param filePath Audio file path.
---@param filePath string@ #string filePath
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:uncache(filePath) end
---*  Resume all suspended audio instances. 
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:resumeAll() end
---*  Stop all audio instances. 
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:stopAll() end
---* Pause an audio instance.<br>
---* param audioID An audioID returned by the play2d function.
---@param audioID int@ #int audioID
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:pause(audioID) end
---* Gets the maximum number of simultaneous audio instance of AudioEngine.
---@return int@ int#int ret (return value: int)
function AudioEngine:getMaxAudioInstance() end
---* Check whether AudioEngine is enabled.
---@return boolean@ bool#bool ret (return value: bool)
function AudioEngine:isEnabled() end
---* Gets the current playback position of an audio instance.<br>
---* param audioID An audioID returned by the play2d function.<br>
---* return The current playback position of an audio instance.
---@param audioID int@ #int audioID
---@return float@ float#float ret (return value: float)
function AudioEngine:getCurrentTime(audioID) end
---* Sets the maximum number of simultaneous audio instance for AudioEngine.<br>
---* param maxInstances The maximum number of simultaneous audio instance.
---@param maxInstances int@ #int maxInstances
---@return boolean@ bool#bool ret (return value: bool)
function AudioEngine:setMaxAudioInstance(maxInstances) end
---* Checks whether an audio instance is loop.<br>
---* param audioID An audioID returned by the play2d function.<br>
---* return Whether or not an audio instance is loop.
---@param audioID int@ #int audioID
---@return boolean@ bool#bool ret (return value: bool)
function AudioEngine:isLoop(audioID) end
---*  Pause all playing audio instances. 
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:pauseAll() end
---* Uncache all audio data from internal buffer.<br>
---* warning All audio will be stopped first.
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:uncacheAll() end
---* Sets volume for an audio instance.<br>
---* param audioID An audioID returned by the play2d function.<br>
---* param volume Volume value (range from 0.0 to 1.0).
---@param audioID int@ #int audioID
---@param volume float@ #float volume
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:setVolume(audioID,volume) end
---@param filePath string@ #string filePath
---@param callback function@ #function callback
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
---@overload fun(filePath:string,callback:function):ccexp.AudioEngine
---@overload fun(filePath:string):ccexp.AudioEngine
function AudioEngine:preload(filePath,callback) end
---* Whether to enable playing audios<br>
---* note If it's disabled, current playing audios will be stopped and the later 'preload', 'play2d' methods will take no effects.
---@param isEnabled boolean@ #bool isEnabled
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:setEnabled(isEnabled) end
---* Play 2d sound.<br>
---* param filePath The path of an audio file.<br>
---* param loop Whether audio instance loop or not.<br>
---* param volume Volume value (range from 0.0 to 1.0).<br>
---* param profile A profile for audio instance. When profile is not specified, default profile will be used.<br>
---* return An audio ID. It allows you to dynamically change the behavior of an audio instance on the fly.<br>
---* see `AudioProfile`
---@param filePath string@ #string filePath
---@param loop boolean@ #bool loop
---@param volume float@ #float volume
---@param profile ccexp.AudioProfile@ #cc.experimental::AudioProfile profile
---@return int@ int#int ret (return value: int)
function AudioEngine:play2d(filePath,loop,volume,profile) end
---* Returns the state of an audio instance.<br>
---* param audioID An audioID returned by the play2d function.<br>
---* return The status of an audio instance.
---@param audioID int@ #int audioID
---@return int@ int#int ret (return value: int)
function AudioEngine:getState(audioID) end
---* Resume an audio instance.<br>
---* param audioID An audioID returned by the play2d function.
---@param audioID int@ #int audioID
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:resume(audioID) end
---* Stop an audio instance.<br>
---* param audioID An audioID returned by the play2d function.
---@param audioID int@ #int audioID
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:stop(audioID) end
---* Release objects relating to AudioEngine.<br>
---* warning It must be called before the application exit.<br>
---* lua endToLua
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:endToLua() end
---* Gets the duration of an audio instance.<br>
---* param audioID An audioID returned by the play2d function.<br>
---* return The duration of an audio instance.
---@param audioID int@ #int audioID
---@return float@ float#float ret (return value: float)
function AudioEngine:getDuration(audioID) end
---* Sets whether an audio instance loop or not.<br>
---* param audioID An audioID returned by the play2d function.<br>
---* param loop Whether audio instance loop or not.
---@param audioID int@ #int audioID
---@param loop boolean@ #bool loop
---@return ccexp.AudioEngine@ experimental::AudioEngine#experimental::AudioEngine self (return value: cc.experimental::AudioEngine)
function AudioEngine:setLoop(audioID,loop) end
---* Gets the default profile of audio instances.<br>
---* return The default profile of audio instances.
---@return ccexp.AudioProfile@ experimental::AudioProfile#experimental::AudioProfile ret (return value: cc.experimental::AudioProfile)
function AudioEngine:getDefaultProfile() end
---@param audioID int@ #int audioID
---@return ccexp.AudioProfile@ experimental::AudioProfile#experimental::AudioProfile ret (return value: cc.experimental::AudioProfile)
---@overload fun(unkown0:string):ccexp.AudioProfile
---@overload fun(audioID:int):ccexp.AudioProfile
function AudioEngine:getProfile(audioID) end
---* Gets playing audio count.
---@return int@ int#int ret (return value: int)
function AudioEngine:getPlayingAudioCount() end


---@class ccexp.AudioProfile 
local AudioProfile={ }
---@class AudioProfile : ccexp.AudioProfile
ccexp.AudioProfile=AudioProfile


---* Default constructor<br>
---* lua new
---@return ccexp.AudioProfile@ experimental::AudioProfile#experimental::AudioProfile self (return value: cc.experimental::AudioProfile)
function AudioProfile:AudioProfile() end


---@class cc.AutoPolygon 
local AutoPolygon={ }
---@class AutoPolygon : cc.AutoPolygon
cc.AutoPolygon=AutoPolygon


---* create an AutoPolygon and initialize it with an image file<br>
---* the image must be a 32bit PNG for current version 3.7<br>
---* param   filename    a path to image file, e.g., "scene1/monster.png".<br>
---* return  an AutoPolygon object;
---@param filename string@ #string filename
---@return cc.AutoPolygon@ AutoPolygon#AutoPolygon self (return value: cc.AutoPolygon)
function AutoPolygon:AutoPolygon(filename) end


---@class ccs.BaseData :  Ref
local BaseData={ }
---@class BaseData : ccs.BaseData
ccs.BaseData=BaseData


---* 
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function BaseData:getColor() end
---* 
---@param color color4b_table@ #color4b_table color
---@return ccs.BaseData@ BaseData#BaseData self (return value: ccs.BaseData)
function BaseData:setColor(color) end
---* 
---@return ccs.BaseData@ BaseData#BaseData ret (return value: ccs.BaseData)
function BaseData:create() end
---* js ctor
---@return ccs.BaseData@ BaseData#BaseData self (return value: ccs.BaseData)
function BaseData:BaseData() end


---@class cc.BaseLight :  Node
local BaseLight={ }
---@class BaseLight : cc.BaseLight
cc.BaseLight=BaseLight


---* light enabled getter and setter.
---@param enabled boolean@ #bool enabled
---@return cc.BaseLight@ BaseLight#BaseLight self (return value: cc.BaseLight)
function BaseLight:setEnabled(enabled) end
---*  intensity getter and setter 
---@return float@ float#float ret (return value: float)
function BaseLight:getIntensity() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function BaseLight:isEnabled() end
---* Get the light type,light type MUST be one of LightType::DIRECTIONAL ,<br>
---* LightType::POINT, LightType::SPOT, LightType::AMBIENT.
---@return int@ int#int ret (return value: int)
function BaseLight:getLightType() end
---* 
---@param flag int@ #int flag
---@return cc.BaseLight@ BaseLight#BaseLight self (return value: cc.BaseLight)
function BaseLight:setLightFlag(flag) end
---* 
---@param intensity float@ #float intensity
---@return cc.BaseLight@ BaseLight#BaseLight self (return value: cc.BaseLight)
function BaseLight:setIntensity(intensity) end
---* light flag getter and setter
---@return int@ int#int ret (return value: int)
function BaseLight:getLightFlag() end


---@class ccs.BatchNode :  Node
local BatchNode={ }
---@class BatchNode : ccs.BatchNode
ccs.BatchNode=BatchNode


---* 
---@return ccs.BatchNode@ BatchNode#BatchNode ret (return value: ccs.BatchNode)
function BatchNode:create() end
---@param pChild cc.Node@ #cc.Node pChild
---@param zOrder int@ #int zOrder
---@param tag int@ #int tag
---@return ccs.BatchNode@ BatchNode#BatchNode self (return value: ccs.BatchNode)
---@overload fun(pChild:cc.Node,zOrder:int,unkown2:string):ccs.BatchNode
---@overload fun(pChild:cc.Node,zOrder:int,tag:int):ccs.BatchNode
function BatchNode:addChild(pChild,zOrder,tag) end
---* js NA
---@return boolean@ bool#bool ret (return value: bool)
function BatchNode:init() end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return ccs.BatchNode@ BatchNode#BatchNode self (return value: ccs.BatchNode)
function BatchNode:draw(renderer,transform,flags) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return ccs.BatchNode@ BatchNode#BatchNode self (return value: ccs.BatchNode)
function BatchNode:removeChild(child,cleanup) end


---@class cc.BezierBy :  ActionInterval
local BezierBy={ }
---@class BezierBy : cc.BezierBy
cc.BezierBy=BezierBy


---* initializes the action with a duration and a bezier configuration<br>
---* param t in seconds
---@param t float@ #float t
---@param c cc._ccBezierConfig@ #cc._ccBezierConfig c
---@return boolean@ bool#bool ret (return value: bool)
function BezierBy:initWithDuration(t,c) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.BezierBy@ BezierBy#BezierBy self (return value: cc.BezierBy)
function BezierBy:startWithTarget(target) end
---* 
---@return cc.BezierBy@ BezierBy#BezierBy ret (return value: cc.BezierBy)
function BezierBy:clone() end
---* 
---@return cc.BezierBy@ BezierBy#BezierBy ret (return value: cc.BezierBy)
function BezierBy:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.BezierBy@ BezierBy#BezierBy self (return value: cc.BezierBy)
function BezierBy:update(time) end
---* 
---@return cc.BezierBy@ BezierBy#BezierBy self (return value: cc.BezierBy)
function BezierBy:BezierBy() end


---@class cc.BezierTo :  BezierBy
local BezierTo={ }
---@class BezierTo : cc.BezierTo
cc.BezierTo=BezierTo


---* param t In seconds.
---@param t float@ #float t
---@param c cc._ccBezierConfig@ #cc._ccBezierConfig c
---@return boolean@ bool#bool ret (return value: bool)
function BezierTo:initWithDuration(t,c) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.BezierTo@ BezierTo#BezierTo self (return value: cc.BezierTo)
function BezierTo:startWithTarget(target) end
---* 
---@return cc.BezierTo@ BezierTo#BezierTo ret (return value: cc.BezierTo)
function BezierTo:clone() end
---* 
---@return cc.BezierTo@ BezierTo#BezierTo ret (return value: cc.BezierTo)
function BezierTo:reverse() end
---* 
---@return cc.BezierTo@ BezierTo#BezierTo self (return value: cc.BezierTo)
function BezierTo:BezierTo() end


---@class cc.BillBoard :  Sprite
local BillBoard={ }
---@class BillBoard : cc.BillBoard
cc.BillBoard=BillBoard


---*  Get the billboard rotation mode. 
---@return int@ int#int ret (return value: int)
function BillBoard:getMode() end
---*  Set the billboard rotation mode. 
---@param mode int@ #int mode
---@return cc.BillBoard@ BillBoard#BillBoard self (return value: cc.BillBoard)
function BillBoard:setMode(mode) end
---@param filename string@ #string filename
---@param rect rect_table@ #rect_table rect
---@param mode int@ #int mode
---@return cc.BillBoard@ BillBoard#BillBoard ret (return value: cc.BillBoard)
---@overload fun(filename:string,unkown1:int):cc.BillBoard
---@overload fun(unkown0:int):cc.BillBoard
---@overload fun(filename:string,rect:rect_table,mode:int):cc.BillBoard
function BillBoard:create(filename,rect,mode) end
---* Creates a BillBoard with a Texture2D object.<br>
---* After creation, the rect will be the size of the texture, and the offset will be (0,0).<br>
---* param   texture    A pointer to a Texture2D object.<br>
---* return  An autoreleased BillBoard object
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param mode int@ #int mode
---@return cc.BillBoard@ BillBoard#BillBoard ret (return value: cc.BillBoard)
function BillBoard:createWithTexture(texture,mode) end
---*  update billboard's transform and turn it towards camera 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.BillBoard@ BillBoard#BillBoard self (return value: cc.BillBoard)
function BillBoard:visit(renderer,parentTransform,parentFlags) end
---* 
---@return cc.BillBoard@ BillBoard#BillBoard self (return value: cc.BillBoard)
function BillBoard:BillBoard() end


---@class ccs.BlendFuncFrame :  Frame
local BlendFuncFrame={ }
---@class BlendFuncFrame : ccs.BlendFuncFrame
ccs.BlendFuncFrame=BlendFuncFrame


---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function BlendFuncFrame:getBlendFunc() end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return ccs.BlendFuncFrame@ BlendFuncFrame#BlendFuncFrame self (return value: ccs.BlendFuncFrame)
function BlendFuncFrame:setBlendFunc(blendFunc) end
---* 
---@return ccs.BlendFuncFrame@ BlendFuncFrame#BlendFuncFrame ret (return value: ccs.BlendFuncFrame)
function BlendFuncFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function BlendFuncFrame:clone() end
---* 
---@return ccs.BlendFuncFrame@ BlendFuncFrame#BlendFuncFrame self (return value: ccs.BlendFuncFrame)
function BlendFuncFrame:BlendFuncFrame() end


---@class cc.Blink :  ActionInterval
local Blink={ }
---@class Blink : cc.Blink
cc.Blink=Blink


---* initializes the action <br>
---* param duration in seconds
---@param duration float@ #float duration
---@param blinks int@ #int blinks
---@return boolean@ bool#bool ret (return value: bool)
function Blink:initWithDuration(duration,blinks) end
---* Creates the action.<br>
---* param duration Duration time, in seconds.<br>
---* param blinks Blink times.<br>
---* return An autoreleased Blink object.
---@param duration float@ #float duration
---@param blinks int@ #int blinks
---@return cc.Blink@ Blink#Blink ret (return value: cc.Blink)
function Blink:create(duration,blinks) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.Blink@ Blink#Blink self (return value: cc.Blink)
function Blink:startWithTarget(target) end
---* 
---@return cc.Blink@ Blink#Blink ret (return value: cc.Blink)
function Blink:clone() end
---* 
---@return cc.Blink@ Blink#Blink self (return value: cc.Blink)
function Blink:stop() end
---* 
---@return cc.Blink@ Blink#Blink ret (return value: cc.Blink)
function Blink:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.Blink@ Blink#Blink self (return value: cc.Blink)
function Blink:update(time) end
---* 
---@return cc.Blink@ Blink#Blink self (return value: cc.Blink)
function Blink:Blink() end


---@class ccs.Bone :  Node
local Bone={ }
---@class Bone : ccs.Bone
ccs.Bone=Bone


---* 
---@return boolean@ bool#bool ret (return value: bool)
function Bone:isTransformDirty() end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setBlendFunc(blendFunc) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Bone:isIgnoreMovementBoneData() end
---*  Update zorder
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:updateZOrder() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Bone:getDisplayRenderNode() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Bone:isBlendDirty() end
---* Add a child to this bone, and it will let this child call setParent(Bone *parent) function to set self to it's parent<br>
---* param     child  the child you want to add
---@param child ccs.Bone@ #ccs.Bone child
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:addChildBone(child) end
---* 
---@return ccs.BaseData@ BaseData#BaseData ret (return value: ccs.BaseData)
function Bone:getWorldInfo() end
---* 
---@return ccs.Tween@ Tween#Tween ret (return value: ccs.Tween)
function Bone:getTween() end
---* Get parent bone<br>
---* return parent bone
---@return ccs.Bone@ Bone#Bone ret (return value: ccs.Bone)
function Bone:getParentBone() end
---*  Update color to render display
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:updateColor() end
---* 
---@param dirty boolean@ #bool dirty
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setTransformDirty(dirty) end
---* 
---@return int@ int#int ret (return value: int)
function Bone:getDisplayRenderNodeType() end
---* 
---@param index int@ #int index
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:removeDisplay(index) end
---* 
---@param boneData ccs.BoneData@ #ccs.BoneData boneData
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setBoneData(boneData) end
---* Initializes a Bone with the specified name<br>
---* param name Bone's name.
---@param name string@ #string name
---@return boolean@ bool#bool ret (return value: bool)
function Bone:init(name) end
---* Set parent bone.<br>
---* If parent is null, then also remove this bone from armature.<br>
---* It will not set the Armature, if you want to add the bone to a Armature, you should use Armature::addBone(Bone *bone, const char* parentName).<br>
---* param parent  the parent bone.<br>
---* nullptr : remove this bone from armature
---@param parent ccs.Bone@ #ccs.Bone parent
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setParentBone(parent) end
---@param displayData ccs.DisplayData@ #ccs.DisplayData displayData
---@param index int@ #int index
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
---@overload fun(unkown0:cc.Node,index:int):ccs.Bone
---@overload fun(displayData:ccs.DisplayData,index:int):ccs.Bone
function Bone:addDisplay(displayData,index) end
---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function Bone:getBlendFunc() end
---* Remove itself from its parent.<br>
---* param recursion    whether or not to remove childBone's display
---@param recursion boolean@ #bool recursion
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:removeFromParent(recursion) end
---* 
---@return ccs.ColliderDetector@ ColliderDetector#ColliderDetector ret (return value: ccs.ColliderDetector)
function Bone:getColliderDetector() end
---* 
---@return ccs.Armature@ Armature#Armature ret (return value: ccs.Armature)
function Bone:getChildArmature() end
---* 
---@return ccs.FrameData@ FrameData#FrameData ret (return value: ccs.FrameData)
function Bone:getTweenData() end
---* 
---@param index int@ #int index
---@param force boolean@ #bool force
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:changeDisplayWithIndex(index,force) end
---* 
---@param name string@ #string name
---@param force boolean@ #bool force
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:changeDisplayWithName(name,force) end
---* 
---@param armature ccs.Armature@ #ccs.Armature armature
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setArmature(armature) end
---* 
---@param dirty boolean@ #bool dirty
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setBlendDirty(dirty) end
---* Removes a child Bone<br>
---* param     bone   the bone you want to remove
---@param bone ccs.Bone@ #ccs.Bone bone
---@param recursion boolean@ #bool recursion
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:removeChildBone(bone,recursion) end
---* 
---@param childArmature ccs.Armature@ #ccs.Armature childArmature
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setChildArmature(childArmature) end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Bone:getNodeToArmatureTransform() end
---* 
---@return ccs.DisplayManager@ DisplayManager#DisplayManager ret (return value: ccs.DisplayManager)
function Bone:getDisplayManager() end
---* 
---@return ccs.Armature@ Armature#Armature ret (return value: ccs.Armature)
function Bone:getArmature() end
---* 
---@return ccs.BoneData@ BoneData#BoneData ret (return value: ccs.BoneData)
function Bone:getBoneData() end
---@param name string@ #string name
---@return ccs.Bone@ Bone#Bone ret (return value: ccs.Bone)
---@overload fun(name:string):ccs.Bone
---@overload fun():ccs.Bone
function Bone:create(name) end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Bone:getNodeToWorldTransform() end
---* 
---@param zOrder int@ #int zOrder
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:setLocalZOrder(zOrder) end
---* 
---@param delta float@ #float delta
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:update(delta) end
---* 
---@param parentOpacity unsigned_char@ #unsigned char parentOpacity
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:updateDisplayedOpacity(parentOpacity) end
---* Initializes an empty Bone with nothing init.
---@return boolean@ bool#bool ret (return value: bool)
function Bone:init() end
---* 
---@param parentColor color3b_table@ #color3b_table parentColor
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:updateDisplayedColor(parentColor) end
---* js ctor
---@return ccs.Bone@ Bone#Bone self (return value: ccs.Bone)
function Bone:Bone() end


---@class ccs.BoneData :  BaseData
local BoneData={ }
---@class BoneData : ccs.BoneData
ccs.BoneData=BoneData


---* 
---@param index int@ #int index
---@return ccs.DisplayData@ DisplayData#DisplayData ret (return value: ccs.DisplayData)
function BoneData:getDisplayData(index) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function BoneData:init() end
---* 
---@param displayData ccs.DisplayData@ #ccs.DisplayData displayData
---@return ccs.BoneData@ BoneData#BoneData self (return value: ccs.BoneData)
function BoneData:addDisplayData(displayData) end
---* 
---@return ccs.BoneData@ BoneData#BoneData ret (return value: ccs.BoneData)
function BoneData:create() end
---* js ctor
---@return ccs.BoneData@ BoneData#BoneData self (return value: ccs.BoneData)
function BoneData:BoneData() end


---@class ccs.BoneNode :  Node@BlendProtocol
local BoneNode={ }
---@class BoneNode : ccs.BoneNode
ccs.BoneNode=BoneNode


---* 
---@return float@ float#float ret (return value: float)
function BoneNode:getDebugDrawWidth() end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function BoneNode:getChildBones() end
---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function BoneNode:getBlendFunc() end
---* brief: get all bones in this bone tree
---@return array_table@ array_table#array_table ret (return value: array_table)
function BoneNode:getAllSubBones() end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setBlendFunc(blendFunc) end
---* 
---@param isDebugDraw boolean@ #bool isDebugDraw
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setDebugDrawEnabled(isDebugDraw) end
---* get displayings rect in self transform
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function BoneNode:getVisibleSkinsRect() end
---* brief: get all skins in this bone tree
---@return array_table@ array_table#array_table ret (return value: array_table)
function BoneNode:getAllSubSkins() end
---@param skin cc.Node@ #cc.Node skin
---@param hideOthers boolean@ #bool hideOthers
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
---@overload fun(unkown0:string,hideOthers:boolean):ccs.BoneNode
---@overload fun(skin:cc.Node,hideOthers:boolean):ccs.BoneNode
function BoneNode:displaySkin(skin,hideOthers) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function BoneNode:isDebugDrawEnabled() end
---@param skin cc.Node@ #cc.Node skin
---@param display boolean@ #bool display
---@param hideOthers boolean@ #bool hideOthers
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
---@overload fun(skin:cc.Node,display:boolean,hideOthers:boolean):ccs.BoneNode
---@overload fun(skin:cc.Node,display:boolean):ccs.BoneNode
function BoneNode:addSkin(skin,display,hideOthers) end
---* 
---@return ccs.SkeletonNode@ SkeletonNode#SkeletonNode ret (return value: ccs.SkeletonNode)
function BoneNode:getRootSkeletonNode() end
---* 
---@param length float@ #float length
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setDebugDrawLength(length) end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function BoneNode:getSkins() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function BoneNode:getVisibleSkins() end
---* 
---@param width float@ #float width
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setDebugDrawWidth(width) end
---* 
---@return float@ float#float ret (return value: float)
function BoneNode:getDebugDrawLength() end
---* 
---@param color color4f_table@ #color4f_table color
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setDebugDrawColor(color) end
---* 
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function BoneNode:getDebugDrawColor() end
---@param length int@ #int length
---@return ccs.BoneNode@ BoneNode#BoneNode ret (return value: ccs.BoneNode)
---@overload fun(length:int):ccs.BoneNode
---@overload fun():ccs.BoneNode
function BoneNode:create(length) end
---@param child cc.Node@ #cc.Node child
---@param localZOrder int@ #int localZOrder
---@param name string@ #string name
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
---@overload fun(child:cc.Node,localZOrder:int,unkown2:int):ccs.BoneNode
---@overload fun(child:cc.Node,localZOrder:int,name:string):ccs.BoneNode
function BoneNode:addChild(child,localZOrder,name) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:draw(renderer,transform,flags) end
---* 
---@param name string@ #string name
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setName(name) end
---* 
---@param anchorPoint vec2_table@ #vec2_table anchorPoint
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setAnchorPoint(anchorPoint) end
---* 
---@param localZOrder int@ #int localZOrder
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setLocalZOrder(localZOrder) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:removeChild(child,cleanup) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function BoneNode:init() end
---* 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function BoneNode:getBoundingBox() end
---* 
---@param contentSize size_table@ #size_table contentSize
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setContentSize(contentSize) end
---* 
---@param visible boolean@ #bool visible
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:setVisible(visible) end
---* 
---@return ccs.BoneNode@ BoneNode#BoneNode self (return value: ccs.BoneNode)
function BoneNode:BoneNode() end


---@class cc.Bundle3D 
local Bundle3D={ }
---@class Bundle3D : cc.Bundle3D
cc.Bundle3D=Bundle3D


---* load a file. You must load a file first, then call loadMeshData, loadSkinData, and so on<br>
---* param path File to be loaded<br>
---* return result of load
---@param path string@ #string path
---@return boolean@ bool#bool ret (return value: bool)
function Bundle3D:load(path) end
---* load skin data from bundle<br>
---* param id The ID of the skin, load the first Skin in the bundle if it is empty
---@param id string@ #string id
---@param skindata cc.SkinData@ #cc.SkinData skindata
---@return boolean@ bool#bool ret (return value: bool)
function Bundle3D:loadSkinData(id,skindata) end
---* 
---@return cc.Bundle3D@ Bundle3D#Bundle3D self (return value: cc.Bundle3D)
function Bundle3D:clear() end
---* 
---@param materialdatas cc.MaterialDatas@ #cc.MaterialDatas materialdatas
---@return boolean@ bool#bool ret (return value: bool)
function Bundle3D:loadMaterials(materialdatas) end
---* 
---@param nodedatas cc.NodeDatas@ #cc.NodeDatas nodedatas
---@return boolean@ bool#bool ret (return value: bool)
function Bundle3D:loadNodes(nodedatas) end
---* load material data from bundle<br>
---* param id The ID of the animation, load the first animation in the bundle if it is empty
---@param id string@ #string id
---@param animationdata cc.Animation3DData@ #cc.Animation3DData animationdata
---@return boolean@ bool#bool ret (return value: bool)
function Bundle3D:loadAnimationData(id,animationdata) end
---* create a new bundle, destroy it when finish using it
---@return cc.Bundle3D@ Bundle3D#Bundle3D ret (return value: cc.Bundle3D)
function Bundle3D:createBundle() end
---* 
---@param bundle cc.Bundle3D@ #cc.Bundle3D bundle
---@return cc.Bundle3D@ Bundle3D#Bundle3D self (return value: cc.Bundle3D)
function Bundle3D:destroyBundle(bundle) end
---* 
---@return cc.Bundle3D@ Bundle3D#Bundle3D self (return value: cc.Bundle3D)
function Bundle3D:Bundle3D() end


---@class ccui.Button :  Widget
local Button={ }
---@class Button : ccui.Button
ccui.Button=Button


---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Button:getNormalTextureSize() end
---* Query the button title content.<br>
---* return Get the button's title content.
---@return string@ string#string ret (return value: string)
function Button:getTitleText() end
---*  replaces the current Label node with a new one 
---@param label cc.Label@ #cc.Label label
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setTitleLabel(label) end
---* Change the font size of button's title<br>
---* param size Title font size in float.
---@param size float@ #float size
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setTitleFontSize(size) end
---* 
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:resetPressedRender() end
---* Enable scale9 renderer.<br>
---* param enable Set to true will use scale9 renderer, false otherwise.
---@param enable boolean@ #bool enable
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setScale9Enabled(enable) end
---* 
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:resetDisabledRender() end
---* Return the inner title renderer of Button.<br>
---* return The button title.<br>
---* since v3.3
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function Button:getTitleRenderer() end
---* brief Return the nine-patch sprite of clicked state<br>
---* return the nine-patch sprite of clicked state<br>
---* since v3.9
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
function Button:getRendererClicked() end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Button:getDisabledFile() end
---* brief Return a zoom scale<br>
---* return the zoom scale in float<br>
---* since v3.3
---@return float@ float#float ret (return value: float)
function Button:getZoomScale() end
---* Return the capInsets of disabled state scale9sprite.<br>
---* return The disabled scale9 renderer capInsets.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Button:getCapInsetsDisabledRenderer() end
---* Change the color of button's title.<br>
---* param color The title color in Color3B.
---@param color color3b_table@ #color3b_table color
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setTitleColor(color) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Button:getNormalFile() end
---* 
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:resetNormalRender() end
---* brief Return the nine-patch sprite of disabled state<br>
---* return the nine-patch sprite of disabled state<br>
---* since v3.9
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
function Button:getRendererDisabled() end
---* Sets capInsets for button, only the disabled state scale9 renderer will be affected.<br>
---* param capInsets  capInsets in Rect.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setCapInsetsDisabledRenderer(capInsets) end
---* Sets capInsets for button.<br>
---* The capInset affects  all button scale9 renderer only if `setScale9Enabled(true)` is called<br>
---* param capInsets    capInset in Rect.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setCapInsets(capInsets) end
---* Load disabled state texture for button.<br>
---* param disabled    dark state texture.<br>
---* param texType    @see `TextureResType`
---@param disabled string@ #string disabled
---@param texType int@ #int texType
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:loadTextureDisabled(disabled,texType) end
---* 
---@param normalImage string@ #string normalImage
---@param selectedImage string@ #string selectedImage
---@param disableImage string@ #string disableImage
---@param texType int@ #int texType
---@return boolean@ bool#bool ret (return value: bool)
function Button:init(normalImage,selectedImage,disableImage,texType) end
---* Change the content of button's title.<br>
---* param text The title in std::string.
---@param text string@ #string text
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setTitleText(text) end
---* Sets capInsets for button, only the normal state scale9 renderer will be affected.<br>
---* param capInsets    capInsets in Rect.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setCapInsetsNormalRenderer(capInsets) end
---* Load selected state texture for button.<br>
---* param selected    selected state texture.<br>
---* param texType    @see `TextureResType`
---@param selected string@ #string selected
---@param texType int@ #int texType
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:loadTexturePressed(selected,texType) end
---* Change the font name of button's title<br>
---* param fontName a font name string.
---@param fontName string@ #string fontName
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setTitleFontName(fontName) end
---* Return the capInsets of normal state scale9sprite.<br>
---* return The normal scale9 renderer capInsets.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Button:getCapInsetsNormalRenderer() end
---@param hAlignment int@ #int hAlignment
---@param vAlignment int@ #int vAlignment
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
---@overload fun(hAlignment:int,vAlignment:int):ccui.Button
---@overload fun(hAlignment:int):ccui.Button
function Button:setTitleAlignment(hAlignment,vAlignment) end
---* Return the capInsets of pressed state scale9sprite.<br>
---* return The pressed scale9 renderer capInsets.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Button:getCapInsetsPressedRenderer() end
---* Load textures for button.<br>
---* param normal    normal state texture name.<br>
---* param selected    selected state texture name.<br>
---* param disabled    disabled state texture name.<br>
---* param texType    @see `TextureResType`
---@param normal string@ #string normal
---@param selected string@ #string selected
---@param disabled string@ #string disabled
---@param texType int@ #int texType
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:loadTextures(normal,selected,disabled,texType) end
---* Query whether button is using scale9 renderer or not.<br>
---* return whether button use scale9 renderer or not.
---@return boolean@ bool#bool ret (return value: bool)
function Button:isScale9Enabled() end
---* Load normal state texture for button.<br>
---* param normal    normal state texture.<br>
---* param texType    @see `TextureResType`
---@param normal string@ #string normal
---@param texType int@ #int texType
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:loadTextureNormal(normal,texType) end
---* Sets capInsets for button, only the pressed state scale9 renderer will be affected.<br>
---* param capInsets    capInsets in Rect
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setCapInsetsPressedRenderer(capInsets) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Button:getPressedFile() end
---*  returns the current Label being used 
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function Button:getTitleLabel() end
---* Query the font size of button title<br>
---* return font size in float.
---@return float@ float#float ret (return value: float)
function Button:getTitleFontSize() end
---* brief Return the nine-patch sprite of normal state<br>
---* return the nine-patch sprite of normal state<br>
---* since v3.9
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
function Button:getRendererNormal() end
---* Query the font name of button's title<br>
---* return font name in std::string
---@return string@ string#string ret (return value: string)
function Button:getTitleFontName() end
---* Query the button title color.<br>
---* return Color3B of button title.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function Button:getTitleColor() end
---* Enable zooming action when button is pressed.<br>
---* param enabled Set to true will enable zoom effect, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setPressedActionEnabled(enabled) end
---*  @brief When user pressed the button, the button will zoom to a scale.<br>
---* The final scale of the button  equals (button original scale + _zoomScale)<br>
---* since v3.3
---@param scale float@ #float scale
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:setZoomScale(scale) end
---@param normalImage string@ #string normalImage
---@param selectedImage string@ #string selectedImage
---@param disableImage string@ #string disableImage
---@param texType int@ #int texType
---@return ccui.Button@ Button#Button ret (return value: ccui.Button)
---@overload fun(normalImage:string,selectedImage:string,disableImage:string,texType:int):ccui.Button
---@overload fun():ccui.Button
function Button:create(normalImage,selectedImage,disableImage,texType) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function Button:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Button:getVirtualRenderer() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Button:init() end
---* 
---@return string@ string#string ret (return value: string)
function Button:getDescription() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Button:getVirtualRendererSize() end
---* 
---@param ignore boolean@ #bool ignore
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:ignoreContentAdaptWithSize(ignore) end
---* Default constructor.
---@return ccui.Button@ Button#Button self (return value: ccui.Button)
function Button:Button() end


---@class cc.CallFunc :  ActionInstant
local CallFunc={ }
---@class CallFunc : cc.CallFunc
cc.CallFunc=CallFunc


---*  Executes the callback.
---@return cc.CallFunc@ CallFunc#CallFunc self (return value: cc.CallFunc)
function CallFunc:execute() end
---*  Get the selector target.<br>
---* return The selector target.
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function CallFunc:getTargetCallback() end
---*  Set the selector target.<br>
---* param sel The selector target.
---@param sel cc.Ref@ #cc.Ref sel
---@return cc.CallFunc@ CallFunc#CallFunc self (return value: cc.CallFunc)
function CallFunc:setTargetCallback(sel) end
---* 
---@return cc.CallFunc@ CallFunc#CallFunc ret (return value: cc.CallFunc)
function CallFunc:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.CallFunc@ CallFunc#CallFunc self (return value: cc.CallFunc)
function CallFunc:update(time) end
---* 
---@return cc.CallFunc@ CallFunc#CallFunc ret (return value: cc.CallFunc)
function CallFunc:reverse() end
---* 
---@return cc.CallFunc@ CallFunc#CallFunc self (return value: cc.CallFunc)
function CallFunc:CallFunc() end


---@class cc.Camera :  Node
local Camera={ }
---@class Camera : cc.Camera
cc.Camera=Camera


---* Restore the FBO, RenderTargets and viewport.
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:restore() end
---* get depth, camera with larger depth is drawn on top of camera with smaller depth, the depth of camera with CameraFlag::DEFAULT is 0, user defined camera is -1 by default
---@return char@ char#char ret (return value: char)
function Camera:getDepth() end
---* get view projection matrix
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Camera:getViewProjectionMatrix() end
---* 
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:applyViewport() end
---* set the background brush. See CameraBackgroundBrush for more information.<br>
---* param clearBrush Brush used to clear the background
---@param clearBrush cc.CameraBackgroundBrush@ #cc.CameraBackgroundBrush clearBrush
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setBackgroundBrush(clearBrush) end
---* Make Camera looks at target<br>
---* param target The target camera is point at<br>
---* param up The up vector, usually it's Y axis
---@param target vec3_table@ #vec3_table target
---@param up vec3_table@ #vec3_table up
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:lookAt(target,up) end
---* Apply the FBO, RenderTargets and viewport.
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:apply() end
---* Get clear brush
---@return cc.CameraBackgroundBrush@ CameraBackgroundBrush#CameraBackgroundBrush ret (return value: cc.CameraBackgroundBrush)
function Camera:getBackgroundBrush() end
---* Gets the camera's projection matrix.<br>
---* return The camera projection matrix.
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Camera:getProjectionMatrix() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Camera:isBrushValid() end
---* Get object depth towards camera
---@param transform mat4_table@ #mat4_table transform
---@return float@ float#float ret (return value: float)
function Camera:getDepthInView(transform) end
---* 
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:restoreViewport() end
---* Before rendering scene with this camera, the background need to be cleared. It clears the depth buffer with max depth by default. Use setBackgroundBrush to modify the default behavior
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:clearBackground() end
---* set additional matrix for the projection matrix, it multiplies mat to projection matrix when called, used by WP8
---@param mat mat4_table@ #mat4_table mat
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setAdditionalProjection(mat) end
---* Set Viewport for camera.
---@param vp ccexp.Viewport@ #cc.experimental::Viewport vp
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setViewport(vp) end
---*  init camera 
---@return boolean@ bool#bool ret (return value: bool)
function Camera:initDefault() end
---* get & set Camera flag
---@return int@ int#int ret (return value: int)
function Camera:getCameraFlag() end
---* Gets the type of camera.<br>
---* return The camera type.
---@return int@ int#int ret (return value: int)
function Camera:getType() end
---* 
---@param zoomX float@ #float zoomX
---@param zoomY float@ #float zoomY
---@param nearPlane float@ #float nearPlane
---@param farPlane float@ #float farPlane
---@return boolean@ bool#bool ret (return value: bool)
function Camera:initOrthographic(zoomX,zoomY,nearPlane,farPlane) end
---* get rendered order
---@return int@ int#int ret (return value: int)
function Camera:getRenderOrder() end
---* Is this aabb visible in frustum
---@param aabb cc.AABB@ #cc.AABB aabb
---@return boolean@ bool#bool ret (return value: bool)
function Camera:isVisibleInFrustum(aabb) end
---* set depth, camera with larger depth is drawn on top of camera with smaller depth, the depth of camera with CameraFlag::DEFAULT is 0, user defined camera is -1 by default
---@param depth char@ #char depth
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setDepth(depth) end
---* Set the scene,this method shall not be invoke manually
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setScene(scene) end
---* 
---@param src vec3_table@ #vec3_table src
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Camera:projectGL(src) end
---* 
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:restoreFrameBufferObject() end
---* Gets the camera's view matrix.<br>
---* return The camera view matrix.
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Camera:getViewMatrix() end
---* Get the frustum's near plane.
---@return float@ float#float ret (return value: float)
function Camera:getNearPlane() end
---* 
---@param src vec3_table@ #vec3_table src
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Camera:project(src) end
---* 
---@param flag int@ #int flag
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setCameraFlag(flag) end
---* Get the frustum's far plane.
---@return float@ float#float ret (return value: float)
function Camera:getFarPlane() end
---* 
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:applyFrameBufferObject() end
---* Set FBO, which will attach several render target for the rendered result.
---@param fbo ccexp.FrameBuffer@ #cc.experimental::FrameBuffer fbo
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setFrameBufferObject(fbo) end
---* Whether or not the viewprojection matrix was updated since the last frame.<br>
---* return True if the viewprojection matrix was updated since the last frame.
---@return boolean@ bool#bool ret (return value: bool)
function Camera:isViewProjectionUpdated() end
---* 
---@param fieldOfView float@ #float fieldOfView
---@param aspectRatio float@ #float aspectRatio
---@param nearPlane float@ #float nearPlane
---@param farPlane float@ #float farPlane
---@return boolean@ bool#bool ret (return value: bool)
function Camera:initPerspective(fieldOfView,aspectRatio,nearPlane,farPlane) end
---* Creates an orthographic camera.<br>
---* param zoomX The zoom factor along the X-axis of the orthographic projection (the width of the ortho projection).<br>
---* param zoomY The zoom factor along the Y-axis of the orthographic projection (the height of the ortho projection).<br>
---* param nearPlane The near plane distance.<br>
---* param farPlane The far plane distance.
---@param zoomX float@ #float zoomX
---@param zoomY float@ #float zoomY
---@param nearPlane float@ #float nearPlane
---@param farPlane float@ #float farPlane
---@return cc.Camera@ Camera#Camera ret (return value: cc.Camera)
function Camera:createOrthographic(zoomX,zoomY,nearPlane,farPlane) end
---* Get the visiting camera , the visiting camera shall be set on Scene::render
---@return cc.Camera@ Camera#Camera ret (return value: cc.Camera)
function Camera:getVisitingCamera() end
---*  create default camera, the camera type depends on Director::getProjection, the depth of the default camera is 0 
---@return cc.Camera@ Camera#Camera ret (return value: cc.Camera)
function Camera:create() end
---* Creates a perspective camera.<br>
---* param fieldOfView The field of view for the perspective camera (normally in the range of 40-60 degrees).<br>
---* param aspectRatio The aspect ratio of the camera (normally the width of the viewport divided by the height of the viewport).<br>
---* param nearPlane The near plane distance.<br>
---* param farPlane The far plane distance.
---@param fieldOfView float@ #float fieldOfView
---@param aspectRatio float@ #float aspectRatio
---@param nearPlane float@ #float nearPlane
---@param farPlane float@ #float farPlane
---@return cc.Camera@ Camera#Camera ret (return value: cc.Camera)
function Camera:createPerspective(fieldOfView,aspectRatio,nearPlane,farPlane) end
---* 
---@return ccexp.Viewport@ experimental::Viewport#experimental::Viewport ret (return value: cc.experimental::Viewport)
function Camera:getDefaultViewport() end
---* 
---@param vp ccexp.Viewport@ #cc.experimental::Viewport vp
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:setDefaultViewport(vp) end
---* Get the default camera of the current running scene.
---@return cc.Camera@ Camera#Camera ret (return value: cc.Camera)
function Camera:getDefaultCamera() end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:visit(renderer,parentTransform,parentFlags) end
---* 
---@return cc.Camera@ Camera#Camera self (return value: cc.Camera)
function Camera:Camera() end


---@class cc.CameraBackgroundBrush :  Ref
local CameraBackgroundBrush={ }
---@class CameraBackgroundBrush : cc.CameraBackgroundBrush
cc.CameraBackgroundBrush=CameraBackgroundBrush


---* get brush type<br>
---* return BrushType
---@return int@ int#int ret (return value: int)
function CameraBackgroundBrush:getBrushType() end
---* draw the background
---@param a cc.Camer@ #cc.Camera 
---@return cc.CameraBackgroundBrush@ CameraBackgroundBrush#CameraBackgroundBrush self (return value: cc.CameraBackgroundBrush)
function CameraBackgroundBrush:drawBackground(a) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CameraBackgroundBrush:init() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CameraBackgroundBrush:isValid() end
---*  Creates a Skybox brush with 6 textures.<br>
---* param positive_x texture for the right side of the texture cube face.<br>
---* param negative_x texture for the up side of the texture cube face.<br>
---* param positive_y texture for the top side of the texture cube face<br>
---* param negative_y texture for the bottom side of the texture cube face<br>
---* param positive_z texture for the forward side of the texture cube face.<br>
---* param negative_z texture for the rear side of the texture cube face.<br>
---* return  A new brush inited with given parameters.
---@param positive_x string@ #string positive_x
---@param negative_x string@ #string negative_x
---@param positive_y string@ #string positive_y
---@param negative_y string@ #string negative_y
---@param positive_z string@ #string positive_z
---@param negative_z string@ #string negative_z
---@return cc.CameraBackgroundSkyBoxBrush@ CameraBackgroundSkyBoxBrush#CameraBackgroundSkyBoxBrush ret (return value: cc.CameraBackgroundSkyBoxBrush)
function CameraBackgroundBrush:createSkyboxBrush(positive_x,negative_x,positive_y,negative_y,positive_z,negative_z) end
---* Creates a color brush<br>
---* param color Color of brush<br>
---* param depth Depth used to clear depth buffer<br>
---* return Created brush
---@param color color4f_table@ #color4f_table color
---@param depth float@ #float depth
---@return cc.CameraBackgroundColorBrush@ CameraBackgroundColorBrush#CameraBackgroundColorBrush ret (return value: cc.CameraBackgroundColorBrush)
function CameraBackgroundBrush:createColorBrush(color,depth) end
---* Creates a none brush, it does nothing when clear the background<br>
---* return Created brush.
---@return cc.CameraBackgroundBrush@ CameraBackgroundBrush#CameraBackgroundBrush ret (return value: cc.CameraBackgroundBrush)
function CameraBackgroundBrush:createNoneBrush() end
---* Creates a depth brush, which clears depth buffer with a given depth.<br>
---* param depth Depth used to clear depth buffer<br>
---* return Created brush
---@return cc.CameraBackgroundDepthBrush@ CameraBackgroundDepthBrush#CameraBackgroundDepthBrush ret (return value: cc.CameraBackgroundDepthBrush)
function CameraBackgroundBrush:createDepthBrush() end
---* 
---@return cc.CameraBackgroundBrush@ CameraBackgroundBrush#CameraBackgroundBrush self (return value: cc.CameraBackgroundBrush)
function CameraBackgroundBrush:CameraBackgroundBrush() end


---@class cc.CameraBackgroundColorBrush :  CameraBackgroundDepthBrush
local CameraBackgroundColorBrush={ }
---@class CameraBackgroundColorBrush : cc.CameraBackgroundColorBrush
cc.CameraBackgroundColorBrush=CameraBackgroundColorBrush


---* Set clear color<br>
---* param color Color used to clear the color buffer
---@param color color4f_table@ #color4f_table color
---@return cc.CameraBackgroundColorBrush@ CameraBackgroundColorBrush#CameraBackgroundColorBrush self (return value: cc.CameraBackgroundColorBrush)
function CameraBackgroundColorBrush:setColor(color) end
---* Create a color brush<br>
---* param color Color used to clear the color buffer<br>
---* param depth Depth used to clear the depth buffer<br>
---* return Created brush
---@param color color4f_table@ #color4f_table color
---@param depth float@ #float depth
---@return cc.CameraBackgroundColorBrush@ CameraBackgroundColorBrush#CameraBackgroundColorBrush ret (return value: cc.CameraBackgroundColorBrush)
function CameraBackgroundColorBrush:create(color,depth) end
---* Get brush type. Should be BrushType::COLOR<br>
---* return brush type
---@return int@ int#int ret (return value: int)
function CameraBackgroundColorBrush:getBrushType() end
---* Draw background
---@param camera cc.Camera@ #cc.Camera camera
---@return cc.CameraBackgroundColorBrush@ CameraBackgroundColorBrush#CameraBackgroundColorBrush self (return value: cc.CameraBackgroundColorBrush)
function CameraBackgroundColorBrush:drawBackground(camera) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CameraBackgroundColorBrush:init() end
---* 
---@return cc.CameraBackgroundColorBrush@ CameraBackgroundColorBrush#CameraBackgroundColorBrush self (return value: cc.CameraBackgroundColorBrush)
function CameraBackgroundColorBrush:CameraBackgroundColorBrush() end


---@class cc.CameraBackgroundDepthBrush :  CameraBackgroundBrush
local CameraBackgroundDepthBrush={ }
---@class CameraBackgroundDepthBrush : cc.CameraBackgroundDepthBrush
cc.CameraBackgroundDepthBrush=CameraBackgroundDepthBrush


---* Set depth<br>
---* param depth Depth used to clear depth buffer
---@param depth float@ #float depth
---@return cc.CameraBackgroundDepthBrush@ CameraBackgroundDepthBrush#CameraBackgroundDepthBrush self (return value: cc.CameraBackgroundDepthBrush)
function CameraBackgroundDepthBrush:setDepth(depth) end
---* Create a depth brush<br>
---* param depth Depth used to clear the depth buffer<br>
---* return Created brush
---@param depth float@ #float depth
---@return cc.CameraBackgroundDepthBrush@ CameraBackgroundDepthBrush#CameraBackgroundDepthBrush ret (return value: cc.CameraBackgroundDepthBrush)
function CameraBackgroundDepthBrush:create(depth) end
---* Get brush type. Should be BrushType::DEPTH<br>
---* return brush type
---@return int@ int#int ret (return value: int)
function CameraBackgroundDepthBrush:getBrushType() end
---* Draw background
---@param camera cc.Camera@ #cc.Camera camera
---@return cc.CameraBackgroundDepthBrush@ CameraBackgroundDepthBrush#CameraBackgroundDepthBrush self (return value: cc.CameraBackgroundDepthBrush)
function CameraBackgroundDepthBrush:drawBackground(camera) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CameraBackgroundDepthBrush:init() end
---* 
---@return cc.CameraBackgroundDepthBrush@ CameraBackgroundDepthBrush#CameraBackgroundDepthBrush self (return value: cc.CameraBackgroundDepthBrush)
function CameraBackgroundDepthBrush:CameraBackgroundDepthBrush() end


---@class cc.CameraBackgroundSkyBoxBrush :  CameraBackgroundBrush
local CameraBackgroundSkyBoxBrush={ }
---@class CameraBackgroundSkyBoxBrush : cc.CameraBackgroundSkyBoxBrush
cc.CameraBackgroundSkyBoxBrush=CameraBackgroundSkyBoxBrush


---* 
---@param valid boolean@ #bool valid
---@return cc.CameraBackgroundSkyBoxBrush@ CameraBackgroundSkyBoxBrush#CameraBackgroundSkyBoxBrush self (return value: cc.CameraBackgroundSkyBoxBrush)
function CameraBackgroundSkyBoxBrush:setTextureValid(valid) end
---* Set skybox texture <br>
---* param texture Skybox texture
---@param texture cc.TextureCube@ #cc.TextureCube texture
---@return cc.CameraBackgroundSkyBoxBrush@ CameraBackgroundSkyBoxBrush#CameraBackgroundSkyBoxBrush self (return value: cc.CameraBackgroundSkyBoxBrush)
function CameraBackgroundSkyBoxBrush:setTexture(texture) end
---* 
---@param actived boolean@ #bool actived
---@return cc.CameraBackgroundSkyBoxBrush@ CameraBackgroundSkyBoxBrush#CameraBackgroundSkyBoxBrush self (return value: cc.CameraBackgroundSkyBoxBrush)
function CameraBackgroundSkyBoxBrush:setActived(actived) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CameraBackgroundSkyBoxBrush:isActived() end
---@param positive_x string@ #string positive_x
---@param negative_x string@ #string negative_x
---@param positive_y string@ #string positive_y
---@param negative_y string@ #string negative_y
---@param positive_z string@ #string positive_z
---@param negative_z string@ #string negative_z
---@return cc.CameraBackgroundSkyBoxBrush@ CameraBackgroundSkyBoxBrush#CameraBackgroundSkyBoxBrush ret (return value: cc.CameraBackgroundSkyBoxBrush)
---@overload fun():cc.CameraBackgroundSkyBoxBrush
---@overload fun(positive_x:string,negative_x:string,positive_y:string,negative_y:string,positive_z:string,negative_z:string):cc.CameraBackgroundSkyBoxBrush
function CameraBackgroundSkyBoxBrush:create(positive_x,negative_x,positive_y,negative_y,positive_z,negative_z) end
---* Get brush type. Should be BrushType::SKYBOX<br>
---* return brush type
---@return int@ int#int ret (return value: int)
function CameraBackgroundSkyBoxBrush:getBrushType() end
---* Draw background
---@param camera cc.Camera@ #cc.Camera camera
---@return cc.CameraBackgroundSkyBoxBrush@ CameraBackgroundSkyBoxBrush#CameraBackgroundSkyBoxBrush self (return value: cc.CameraBackgroundSkyBoxBrush)
function CameraBackgroundSkyBoxBrush:drawBackground(camera) end
---* init Skybox.
---@return boolean@ bool#bool ret (return value: bool)
function CameraBackgroundSkyBoxBrush:init() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CameraBackgroundSkyBoxBrush:isValid() end
---* 
---@return cc.CameraBackgroundSkyBoxBrush@ CameraBackgroundSkyBoxBrush#CameraBackgroundSkyBoxBrush self (return value: cc.CameraBackgroundSkyBoxBrush)
function CameraBackgroundSkyBoxBrush:CameraBackgroundSkyBoxBrush() end


---@class cc.CardinalSplineBy :  CardinalSplineTo
local CardinalSplineBy={ }
---@class CardinalSplineBy : cc.CardinalSplineBy
cc.CardinalSplineBy=CardinalSplineBy


---* 
---@param target cc.Node@ #cc.Node target
---@return cc.CardinalSplineBy@ CardinalSplineBy#CardinalSplineBy self (return value: cc.CardinalSplineBy)
function CardinalSplineBy:startWithTarget(target) end
---* 
---@return cc.CardinalSplineBy@ CardinalSplineBy#CardinalSplineBy ret (return value: cc.CardinalSplineBy)
function CardinalSplineBy:clone() end
---* 
---@param newPos vec2_table@ #vec2_table newPos
---@return cc.CardinalSplineBy@ CardinalSplineBy#CardinalSplineBy self (return value: cc.CardinalSplineBy)
function CardinalSplineBy:updatePosition(newPos) end
---* 
---@return cc.CardinalSplineBy@ CardinalSplineBy#CardinalSplineBy ret (return value: cc.CardinalSplineBy)
function CardinalSplineBy:reverse() end
---* 
---@return cc.CardinalSplineBy@ CardinalSplineBy#CardinalSplineBy self (return value: cc.CardinalSplineBy)
function CardinalSplineBy:CardinalSplineBy() end


---@class cc.CardinalSplineTo :  ActionInterval
local CardinalSplineTo={ }
---@class CardinalSplineTo : cc.CardinalSplineTo
cc.CardinalSplineTo=CardinalSplineTo


---*  Return a PointArray.<br>
---* return A PointArray.
---@return point_table@ point_table#point_table ret (return value: point_table)
function CardinalSplineTo:getPoints() end
---*  It will update the target position and change the _previousPosition to newPos<br>
---* param newPos The new position.
---@param newPos vec2_table@ #vec2_table newPos
---@return cc.CardinalSplineTo@ CardinalSplineTo#CardinalSplineTo self (return value: cc.CardinalSplineTo)
function CardinalSplineTo:updatePosition(newPos) end
---* Initializes the action with a duration and an array of points.<br>
---* param duration In seconds.<br>
---* param points An PointArray.<br>
---* param tension Goodness of fit.
---@param duration float@ #float duration
---@param points point_table@ #point_table points
---@param tension float@ #float tension
---@return boolean@ bool#bool ret (return value: bool)
function CardinalSplineTo:initWithDuration(duration,points,tension) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.CardinalSplineTo@ CardinalSplineTo#CardinalSplineTo self (return value: cc.CardinalSplineTo)
function CardinalSplineTo:startWithTarget(target) end
---* 
---@return cc.CardinalSplineTo@ CardinalSplineTo#CardinalSplineTo ret (return value: cc.CardinalSplineTo)
function CardinalSplineTo:clone() end
---* 
---@return cc.CardinalSplineTo@ CardinalSplineTo#CardinalSplineTo ret (return value: cc.CardinalSplineTo)
function CardinalSplineTo:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.CardinalSplineTo@ CardinalSplineTo#CardinalSplineTo self (return value: cc.CardinalSplineTo)
function CardinalSplineTo:update(time) end
---* js ctor<br>
---* lua NA
---@return cc.CardinalSplineTo@ CardinalSplineTo#CardinalSplineTo self (return value: cc.CardinalSplineTo)
function CardinalSplineTo:CardinalSplineTo() end


---@class cc.CatmullRomBy :  CardinalSplineBy
local CatmullRomBy={ }
---@class CatmullRomBy : cc.CatmullRomBy
cc.CatmullRomBy=CatmullRomBy


---*  Initializes the action with a duration and an array of points.<br>
---* param dt In seconds.<br>
---* param points An PointArray.
---@param dt float@ #float dt
---@param points point_table@ #point_table points
---@return boolean@ bool#bool ret (return value: bool)
function CatmullRomBy:initWithDuration(dt,points) end
---* 
---@return cc.CatmullRomBy@ CatmullRomBy#CatmullRomBy ret (return value: cc.CatmullRomBy)
function CatmullRomBy:clone() end
---* 
---@return cc.CatmullRomBy@ CatmullRomBy#CatmullRomBy ret (return value: cc.CatmullRomBy)
function CatmullRomBy:reverse() end


---@class cc.CatmullRomTo :  CardinalSplineTo
local CatmullRomTo={ }
---@class CatmullRomTo : cc.CatmullRomTo
cc.CatmullRomTo=CatmullRomTo


---* Initializes the action with a duration and an array of points.<br>
---* param dt In seconds.<br>
---* param points An PointArray.
---@param dt float@ #float dt
---@param points point_table@ #point_table points
---@return boolean@ bool#bool ret (return value: bool)
function CatmullRomTo:initWithDuration(dt,points) end
---* 
---@return cc.CatmullRomTo@ CatmullRomTo#CatmullRomTo ret (return value: cc.CatmullRomTo)
function CatmullRomTo:clone() end
---* 
---@return cc.CatmullRomTo@ CatmullRomTo#CatmullRomTo ret (return value: cc.CatmullRomTo)
function CatmullRomTo:reverse() end


---@class cc.CCBAnimationManager :  Ref
local CCBAnimationManager={ }
---@class CCBAnimationManager : cc.CCBAnimationManager
cc.CCBAnimationManager=CCBAnimationManager


---* 
---@param fromNode cc.Node@ #cc.Node fromNode
---@param toNode cc.Node@ #cc.Node toNode
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:moveAnimationsFromNode(fromNode,toNode) end
---* 
---@param autoPlaySequenceId int@ #int autoPlaySequenceId
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:setAutoPlaySequenceId(autoPlaySequenceId) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBAnimationManager:getDocumentCallbackNames() end
---* 
---@param channel cc.CCBSequenceProperty@ #cc.CCBSequenceProperty channel
---@return cc.Sequence@ Sequence#Sequence ret (return value: cc.Sequence)
function CCBAnimationManager:actionForSoundChannel(channel) end
---* 
---@param value cc.Value@ #cc.Value value
---@param pNode cc.Node@ #cc.Node pNode
---@param propName string@ #string propName
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:setBaseValue(value,pNode,propName) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBAnimationManager:getDocumentOutletNodes() end
---* 
---@return string@ string#string ret (return value: string)
function CCBAnimationManager:getLastCompletedSequenceName() end
---* 
---@param pRootNode cc.Node@ #cc.Node pRootNode
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:setRootNode(pRootNode) end
---* 
---@param pName char@ #char pName
---@param fTweenDuration float@ #float fTweenDuration
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:runAnimationsForSequenceNamedTweenDuration(pName,fTweenDuration) end
---* 
---@param name string@ #string name
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:addDocumentOutletName(name) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBAnimationManager:getSequences() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function CCBAnimationManager:getRootContainerSize() end
---* 
---@param name string@ #string name
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:setDocumentControllerName(name) end
---* 
---@param obj cc.Ref@ #cc.Ref obj
---@param pNode cc.Node@ #cc.Node pNode
---@param propName string@ #string propName
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:setObject(obj,pNode,propName) end
---* 
---@param pNode cc.Node@ #cc.Node pNode
---@return size_table@ size_table#size_table ret (return value: size_table)
function CCBAnimationManager:getContainerSize(pNode) end
---* 
---@param channel cc.CCBSequenceProperty@ #cc.CCBSequenceProperty channel
---@return cc.Sequence@ Sequence#Sequence ret (return value: cc.Sequence)
function CCBAnimationManager:actionForCallbackChannel(channel) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBAnimationManager:getDocumentOutletNames() end
---* 
---@param eventType int@ #int eventType
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:addDocumentCallbackControlEvents(eventType) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CCBAnimationManager:init() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBAnimationManager:getKeyframeCallbacks() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBAnimationManager:getDocumentCallbackControlEvents() end
---* 
---@param rootContainerSize size_table@ #size_table rootContainerSize
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:setRootContainerSize(rootContainerSize) end
---* 
---@param nSeqId int@ #int nSeqId
---@param fTweenDuraiton float@ #float fTweenDuraiton
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:runAnimationsForSequenceIdTweenDuration(nSeqId,fTweenDuraiton) end
---* 
---@return char@ char#char ret (return value: char)
function CCBAnimationManager:getRunningSequenceName() end
---* 
---@return int@ int#int ret (return value: int)
function CCBAnimationManager:getAutoPlaySequenceId() end
---* 
---@param name string@ #string name
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:addDocumentCallbackName(name) end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function CCBAnimationManager:getRootNode() end
---* 
---@param node cc.Node@ #cc.Node node
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:addDocumentOutletNode(node) end
---* 
---@param pSequenceName char@ #char pSequenceName
---@return float@ float#float ret (return value: float)
function CCBAnimationManager:getSequenceDuration(pSequenceName) end
---* 
---@param node cc.Node@ #cc.Node node
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:addDocumentCallbackNode(node) end
---* 
---@param pName char@ #char pName
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:runAnimationsForSequenceNamed(pName) end
---* 
---@param pSequenceName char@ #char pSequenceName
---@return int@ int#int ret (return value: int)
function CCBAnimationManager:getSequenceId(pSequenceName) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBAnimationManager:getDocumentCallbackNodes() end
---* 
---@param seq array_table@ #array_table seq
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:setSequences(seq) end
---* 
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:debug() end
---* 
---@return string@ string#string ret (return value: string)
function CCBAnimationManager:getDocumentControllerName() end
---* js ctor
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager self (return value: cc.CCBAnimationManager)
function CCBAnimationManager:CCBAnimationManager() end


---@class cc.CCBReader :  Ref
local CCBReader={ }
---@class CCBReader : cc.CCBReader
cc.CCBReader=CCBReader


---* 
---@param name string@ #string name
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
function CCBReader:addOwnerOutletName(name) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBReader:getOwnerCallbackNames() end
---* 
---@param eventType int@ #int eventType
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
function CCBReader:addDocumentCallbackControlEvents(eventType) end
---* 
---@param ccbRootPath char@ #char ccbRootPath
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
function CCBReader:setCCBRootPath(ccbRootPath) end
---* 
---@param node cc.Node@ #cc.Node node
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
function CCBReader:addOwnerOutletNode(node) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBReader:getOwnerCallbackNodes() end
---* 
---@param seq cc.CCBSequence@ #cc.CCBSequence seq
---@return boolean@ bool#bool ret (return value: bool)
function CCBReader:readSoundKeyframesForSeq(seq) end
---* 
---@return string@ string#string ret (return value: string)
function CCBReader:getCCBRootPath() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBReader:getOwnerCallbackControlEvents() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBReader:getOwnerOutletNodes() end
---* 
---@return string@ string#string ret (return value: string)
function CCBReader:readUTF8() end
---* 
---@param type int@ #int type
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
function CCBReader:addOwnerCallbackControlEvents(type) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBReader:getOwnerOutletNames() end
---* js setActionManager<br>
---* lua setActionManager
---@param pAnimationManager cc.CCBAnimationManager@ #cc.CCBAnimationManager pAnimationManager
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
function CCBReader:setAnimationManager(pAnimationManager) end
---* 
---@param seq cc.CCBSequence@ #cc.CCBSequence seq
---@return boolean@ bool#bool ret (return value: bool)
function CCBReader:readCallbackKeyframesForSeq(seq) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBReader:getAnimationManagersForNodes() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function CCBReader:getNodesWithAnimationManagers() end
---* js getActionManager<br>
---* lua getActionManager
---@return cc.CCBAnimationManager@ CCBAnimationManager#CCBAnimationManager ret (return value: cc.CCBAnimationManager)
function CCBReader:getAnimationManager() end
---* 
---@param scale float@ #float scale
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
function CCBReader:setResolutionScale(scale) end
---@param pNodeLoaderLibrary cc.NodeLoaderLibrary@ #cc.NodeLoaderLibrary pNodeLoaderLibrary
---@param pCCBMemberVariableAssigner cc.CCBMemberVariableAssigner@ #cc.CCBMemberVariableAssigner pCCBMemberVariableAssigner
---@param pCCBSelectorResolver cc.CCBSelectorResolver@ #cc.CCBSelectorResolver pCCBSelectorResolver
---@param pNodeLoaderListener cc.NodeLoaderListener@ #cc.NodeLoaderListener pNodeLoaderListener
---@return cc.CCBReader@ CCBReader#CCBReader self (return value: cc.CCBReader)
---@overload fun(unkown0:cc.CCBReader):cc.CCBReader
---@overload fun(pNodeLoaderLibrary:cc.NodeLoaderLibrary,pCCBMemberVariableAssigner:cc.CCBMemberVariableAssigner,pCCBSelectorResolver:cc.CCBSelectorResolver,pNodeLoaderListener:cc.NodeLoaderListener):cc.CCBReader
---@overload fun():cc.CCBReader
function CCBReader:CCBReader(pNodeLoaderLibrary,pCCBMemberVariableAssigner,pCCBSelectorResolver,pNodeLoaderListener) end


---@class ccui.CheckBox :  AbstractCheckButton
local CheckBox={ }
---@class CheckBox : ccui.CheckBox
ccui.CheckBox=CheckBox


---* Add a callback function which would be called when checkbox is selected or unselected.<br>
---* param callback A std::function with type @see `ccCheckBoxCallback`
---@param callback function@ #function callback
---@return ccui.CheckBox@ CheckBox#CheckBox self (return value: ccui.CheckBox)
function CheckBox:addEventListener(callback) end
---@param backGround string@ #string backGround
---@param backGroundSelected string@ #string backGroundSelected
---@param cross string@ #string cross
---@param backGroundDisabled string@ #string backGroundDisabled
---@param frontCrossDisabled string@ #string frontCrossDisabled
---@param texType int@ #int texType
---@return ccui.CheckBox@ CheckBox#CheckBox ret (return value: ccui.CheckBox)
---@overload fun(backGround:string,backGroundSelected:string,cross:string,backGroundDisabled:string,frontCrossDisabled:string,texType:int):ccui.CheckBox
---@overload fun():ccui.CheckBox
---@overload fun(backGround:string,backGroundSelected:string,unkown2:int):ccui.CheckBox
function CheckBox:create(backGround,backGroundSelected,cross,backGroundDisabled,frontCrossDisabled,texType) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function CheckBox:createInstance() end
---* 
---@return string@ string#string ret (return value: string)
function CheckBox:getDescription() end
---* Default constructor.<br>
---* lua new
---@return ccui.CheckBox@ CheckBox#CheckBox self (return value: ccui.CheckBox)
function CheckBox:CheckBox() end


---@class cc.ClippingNode :  Node
local ClippingNode={ }
---@class ClippingNode : cc.ClippingNode
cc.ClippingNode=ClippingNode


---*  If stencil has no children it will not be drawn.<br>
---* If you have custom stencil-based node with stencil drawing mechanics other then children-based,<br>
---* then this method should return true every time you wish stencil to be visited.<br>
---* By default returns true if has any children attached.<br>
---* return If you have custom stencil-based node with stencil drawing mechanics other then children-based,<br>
---* then this method should return true every time you wish stencil to be visited.<br>
---* By default returns true if has any children attached.<br>
---* js NA
---@return boolean@ bool#bool ret (return value: bool)
function ClippingNode:hasContent() end
---*  Set the ClippingNode whether or not invert.<br>
---* param inverted A bool Type,to set the ClippingNode whether or not invert.
---@param inverted boolean@ #bool inverted
---@return cc.ClippingNode@ ClippingNode#ClippingNode self (return value: cc.ClippingNode)
function ClippingNode:setInverted(inverted) end
---*  Set the Node to use as a stencil to do the clipping.<br>
---* param stencil The Node to use as a stencil to do the clipping.
---@param stencil cc.Node@ #cc.Node stencil
---@return cc.ClippingNode@ ClippingNode#ClippingNode self (return value: cc.ClippingNode)
function ClippingNode:setStencil(stencil) end
---*  The alpha threshold.<br>
---* The content is drawn only where the stencil have pixel with alpha greater than the alphaThreshold.<br>
---* Should be a float between 0 and 1.<br>
---* This default to 1 (so alpha test is disabled).<br>
---* return The alpha threshold value,Should be a float between 0 and 1.
---@return float@ float#float ret (return value: float)
function ClippingNode:getAlphaThreshold() end
---*  Initializes a clipping node with an other node as its stencil.<br>
---* The stencil node will be retained, and its parent will be set to this clipping node.
---@param stencil cc.Node@ #cc.Node stencil
---@return boolean@ bool#bool ret (return value: bool)
function ClippingNode:init(stencil) end
---*  The Node to use as a stencil to do the clipping.<br>
---* The stencil node will be retained.<br>
---* This default to nil.<br>
---* return The stencil node.
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ClippingNode:getStencil() end
---*  Set the alpha threshold. <br>
---* param alphaThreshold The alpha threshold.
---@param alphaThreshold float@ #float alphaThreshold
---@return cc.ClippingNode@ ClippingNode#ClippingNode self (return value: cc.ClippingNode)
function ClippingNode:setAlphaThreshold(alphaThreshold) end
---*  Inverted. If this is set to true,<br>
---* the stencil is inverted, so the content is drawn where the stencil is NOT drawn.<br>
---* This default to false.<br>
---* return If the clippingNode is Inverted, it will be return true.
---@return boolean@ bool#bool ret (return value: bool)
function ClippingNode:isInverted() end
---@param stencil cc.Node@ #cc.Node stencil
---@return cc.ClippingNode@ ClippingNode#ClippingNode ret (return value: cc.ClippingNode)
---@overload fun(stencil:cc.Node):cc.ClippingNode
---@overload fun():cc.ClippingNode
function ClippingNode:create(stencil) end
---* 
---@param mask unsigned short@ #unsigned short mask
---@param applyChildren boolean@ #bool applyChildren
---@return cc.ClippingNode@ ClippingNode#ClippingNode self (return value: cc.ClippingNode)
function ClippingNode:setCameraMask(mask,applyChildren) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.ClippingNode@ ClippingNode#ClippingNode self (return value: cc.ClippingNode)
function ClippingNode:visit(renderer,parentTransform,parentFlags) end
---*  Initializes a clipping node without a stencil.
---@return boolean@ bool#bool ret (return value: bool)
function ClippingNode:init() end


---@class cc.ClippingRectangleNode :  Node
local ClippingRectangleNode={ }
---@class ClippingRectangleNode : cc.ClippingRectangleNode
cc.ClippingRectangleNode=ClippingRectangleNode


---* brief Get whether the clipping is enabled or not.<br>
---* return Whether the clipping is enabled or not. Default is true.
---@return boolean@ bool#bool ret (return value: bool)
function ClippingRectangleNode:isClippingEnabled() end
---* brief Enable/Disable the clipping.<br>
---* param enabled Pass true to enable clipping. Pass false to disable clipping.
---@param enabled boolean@ #bool enabled
---@return cc.ClippingRectangleNode@ ClippingRectangleNode#ClippingRectangleNode self (return value: cc.ClippingRectangleNode)
function ClippingRectangleNode:setClippingEnabled(enabled) end
---* brief Get the clipping rectangle.<br>
---* return The clipping rectangle.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function ClippingRectangleNode:getClippingRegion() end
---* brief Set the clipping rectangle.<br>
---* param clippingRegion Specify the clipping rectangle.
---@param clippingRegion rect_table@ #rect_table clippingRegion
---@return cc.ClippingRectangleNode@ ClippingRectangleNode#ClippingRectangleNode self (return value: cc.ClippingRectangleNode)
function ClippingRectangleNode:setClippingRegion(clippingRegion) end
---@param clippingRegion rect_table@ #rect_table clippingRegion
---@return cc.ClippingRectangleNode@ ClippingRectangleNode#ClippingRectangleNode ret (return value: cc.ClippingRectangleNode)
---@overload fun():cc.ClippingRectangleNode
---@overload fun(clippingRegion:rect_table):cc.ClippingRectangleNode
function ClippingRectangleNode:create(clippingRegion) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.ClippingRectangleNode@ ClippingRectangleNode#ClippingRectangleNode self (return value: cc.ClippingRectangleNode)
function ClippingRectangleNode:visit(renderer,parentTransform,parentFlags) end


---@class ccs.ColorFrame :  Frame
local ColorFrame={ }
---@class ColorFrame : ccs.ColorFrame
ccs.ColorFrame=ColorFrame


---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function ColorFrame:getColor() end
---* 
---@param color color3b_table@ #color3b_table color
---@return ccs.ColorFrame@ ColorFrame#ColorFrame self (return value: ccs.ColorFrame)
function ColorFrame:setColor(color) end
---* 
---@return ccs.ColorFrame@ ColorFrame#ColorFrame ret (return value: ccs.ColorFrame)
function ColorFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function ColorFrame:clone() end
---* 
---@return ccs.ColorFrame@ ColorFrame#ColorFrame self (return value: ccs.ColorFrame)
function ColorFrame:ColorFrame() end


---@class ccs.ComAttribute :  Component
local ComAttribute={ }
---@class ComAttribute : ccs.ComAttribute
ccs.ComAttribute=ComAttribute


---* 
---@param key string@ #string key
---@param def float@ #float def
---@return float@ float#float ret (return value: float)
function ComAttribute:getFloat(key,def) end
---* 
---@param key string@ #string key
---@param def string@ #string def
---@return string@ string#string ret (return value: string)
function ComAttribute:getString(key,def) end
---* 
---@param key string@ #string key
---@param value float@ #float value
---@return ccs.ComAttribute@ ComAttribute#ComAttribute self (return value: ccs.ComAttribute)
function ComAttribute:setFloat(key,value) end
---* 
---@param key string@ #string key
---@param value string@ #string value
---@return ccs.ComAttribute@ ComAttribute#ComAttribute self (return value: ccs.ComAttribute)
function ComAttribute:setString(key,value) end
---* 
---@param key string@ #string key
---@param def boolean@ #bool def
---@return boolean@ bool#bool ret (return value: bool)
function ComAttribute:getBool(key,def) end
---* 
---@param key string@ #string key
---@param value int@ #int value
---@return ccs.ComAttribute@ ComAttribute#ComAttribute self (return value: ccs.ComAttribute)
function ComAttribute:setInt(key,value) end
---* 
---@param jsonFile string@ #string jsonFile
---@return boolean@ bool#bool ret (return value: bool)
function ComAttribute:parse(jsonFile) end
---* 
---@param key string@ #string key
---@param def int@ #int def
---@return int@ int#int ret (return value: int)
function ComAttribute:getInt(key,def) end
---* 
---@param key string@ #string key
---@param value boolean@ #bool value
---@return ccs.ComAttribute@ ComAttribute#ComAttribute self (return value: ccs.ComAttribute)
function ComAttribute:setBool(key,value) end
---* 
---@return ccs.ComAttribute@ ComAttribute#ComAttribute ret (return value: ccs.ComAttribute)
function ComAttribute:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ComAttribute:createInstance() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ComAttribute:init() end
---* 
---@param r void@ #void r
---@return boolean@ bool#bool ret (return value: bool)
function ComAttribute:serialize(r) end


---@class ccs.ComAudio :  Component@PlayableProtocol
local ComAudio={ }
---@class ComAudio : ccs.ComAudio
ccs.ComAudio=ComAudio


---* 
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:stopAllEffects() end
---* 
---@return float@ float#float ret (return value: float)
function ComAudio:getEffectsVolume() end
---* 
---@param nSoundId unsigned_int@ #unsigned int nSoundId
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:stopEffect(nSoundId) end
---* 
---@return float@ float#float ret (return value: float)
function ComAudio:getBackgroundMusicVolume() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ComAudio:willPlayBackgroundMusic() end
---* 
---@param volume float@ #float volume
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:setBackgroundMusicVolume(volume) end
---* / @{/ @name implement Playable Protocol
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:start() end
---@param bReleaseData boolean@ #bool bReleaseData
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
---@overload fun():ccs.ComAudio
---@overload fun(bReleaseData:boolean):ccs.ComAudio
function ComAudio:stopBackgroundMusic(bReleaseData) end
---* 
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:pauseBackgroundMusic() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ComAudio:isBackgroundMusicPlaying() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ComAudio:isLoop() end
---* 
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:resumeAllEffects() end
---* 
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:pauseAllEffects() end
---* 
---@param pszFilePath char@ #char pszFilePath
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:preloadBackgroundMusic(pszFilePath) end
---@param pszFilePath char@ #char pszFilePath
---@param bLoop boolean@ #bool bLoop
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
---@overload fun(pszFilePath:char):ccs.ComAudio
---@overload fun(pszFilePath:char,bLoop:boolean):ccs.ComAudio
---@overload fun():ccs.ComAudio
function ComAudio:playBackgroundMusic(pszFilePath,bLoop) end
---* 
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:stop() end
---* lua endToLua
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:endToLua() end
---@param pszFilePath char@ #char pszFilePath
---@param bLoop boolean@ #bool bLoop
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
---@overload fun(pszFilePath:char):unsigned_int
---@overload fun(pszFilePath:char,bLoop:boolean):unsigned_int
---@overload fun():unsigned_int
function ComAudio:playEffect(pszFilePath,bLoop) end
---* 
---@param pszFilePath char@ #char pszFilePath
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:preloadEffect(pszFilePath) end
---* 
---@param bLoop boolean@ #bool bLoop
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:setLoop(bLoop) end
---* 
---@param pszFilePath char@ #char pszFilePath
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:unloadEffect(pszFilePath) end
---* 
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:rewindBackgroundMusic() end
---* 
---@param nSoundId unsigned_int@ #unsigned int nSoundId
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:pauseEffect(nSoundId) end
---* 
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:resumeBackgroundMusic() end
---* 
---@param pszFilePath char@ #char pszFilePath
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:setFile(pszFilePath) end
---* 
---@param volume float@ #float volume
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:setEffectsVolume(volume) end
---* 
---@return char@ char#char ret (return value: char)
function ComAudio:getFile() end
---* 
---@param nSoundId unsigned_int@ #unsigned int nSoundId
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:resumeEffect(nSoundId) end
---* 
---@return ccs.ComAudio@ ComAudio#ComAudio ret (return value: ccs.ComAudio)
function ComAudio:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ComAudio:createInstance() end
---* js NA<br>
---* lua NA
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:onRemove() end
---* 
---@param r void@ #void r
---@return boolean@ bool#bool ret (return value: bool)
function ComAudio:serialize(r) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ComAudio:init() end
---* js NA<br>
---* lua NA
---@return ccs.ComAudio@ ComAudio#ComAudio self (return value: ccs.ComAudio)
function ComAudio:onAdd() end


---@class ccs.ComController :  Component@InputDelegate
local ComController={ }
---@class ComController : ccs.ComController
ccs.ComController=ComController


---* 
---@return ccs.ComController@ ComController#ComController ret (return value: ccs.ComController)
function ComController:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ComController:createInstance() end
---* js NA<br>
---* lua NA
---@return ccs.ComController@ ComController#ComController self (return value: ccs.ComController)
function ComController:onRemove() end
---* 
---@param delta float@ #float delta
---@return ccs.ComController@ ComController#ComController self (return value: ccs.ComController)
function ComController:update(delta) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ComController:init() end
---* js NA<br>
---* lua NA
---@return ccs.ComController@ ComController#ComController self (return value: ccs.ComController)
function ComController:onAdd() end
---* js ctor
---@return ccs.ComController@ ComController#ComController self (return value: ccs.ComController)
function ComController:ComController() end


---@class ccs.ComExtensionData :  Component
local ComExtensionData={ }
---@class ComExtensionData : ccs.ComExtensionData
ccs.ComExtensionData=ComExtensionData


---* 
---@param actionTag int@ #int actionTag
---@return ccs.ComExtensionData@ ComExtensionData#ComExtensionData self (return value: ccs.ComExtensionData)
function ComExtensionData:setActionTag(actionTag) end
---* 
---@return string@ string#string ret (return value: string)
function ComExtensionData:getCustomProperty() end
---* 
---@return int@ int#int ret (return value: int)
function ComExtensionData:getActionTag() end
---* 
---@param customProperty string@ #string customProperty
---@return ccs.ComExtensionData@ ComExtensionData#ComExtensionData self (return value: ccs.ComExtensionData)
function ComExtensionData:setCustomProperty(customProperty) end
---* 
---@return ccs.ComExtensionData@ ComExtensionData#ComExtensionData ret (return value: ccs.ComExtensionData)
function ComExtensionData:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ComExtensionData:createInstance() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ComExtensionData:init() end
---* js NA<br>
---* lua NA
---@return ccs.ComExtensionData@ ComExtensionData#ComExtensionData self (return value: ccs.ComExtensionData)
function ComExtensionData:onRemove() end
---* js NA<br>
---* lua NA
---@return ccs.ComExtensionData@ ComExtensionData#ComExtensionData self (return value: ccs.ComExtensionData)
function ComExtensionData:onAdd() end
---* 
---@return ccs.ComExtensionData@ ComExtensionData#ComExtensionData self (return value: ccs.ComExtensionData)
function ComExtensionData:ComExtensionData() end


---@class cc.Component :  Ref
local Component={ }
---@class Component : cc.Component
cc.Component=Component


---* 
---@param enabled boolean@ #bool enabled
---@return cc.Component@ Component#Component self (return value: cc.Component)
function Component:setEnabled(enabled) end
---* 
---@return cc.Component@ Component#Component self (return value: cc.Component)
function Component:onRemove() end
---* 
---@param name string@ #string name
---@return cc.Component@ Component#Component self (return value: cc.Component)
function Component:setName(name) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Component:isEnabled() end
---* 
---@param delta float@ #float delta
---@return cc.Component@ Component#Component self (return value: cc.Component)
function Component:update(delta) end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Component:getOwner() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Component:init() end
---* 
---@param owner cc.Node@ #cc.Node owner
---@return cc.Component@ Component#Component self (return value: cc.Component)
function Component:setOwner(owner) end
---* 
---@return string@ string#string ret (return value: string)
function Component:getName() end
---* 
---@return cc.Component@ Component#Component self (return value: cc.Component)
function Component:onAdd() end
---* 
---@return cc.Component@ Component#Component ret (return value: cc.Component)
function Component:create() end


---@class cc.ComponentLua :  Component
local ComponentLua={ }
---@class ComponentLua : cc.ComponentLua
cc.ComponentLua=ComponentLua


---* This function is used to be invoked from lua side to get the corresponding script object of this component.
---@return void@ void#void ret (return value: void)
function ComponentLua:getScriptObject() end
---* 
---@param dt float@ #float dt
---@return cc.ComponentLua@ ComponentLua#ComponentLua self (return value: cc.ComponentLua)
function ComponentLua:update(dt) end
---* 
---@param scriptFileName string@ #string scriptFileName
---@return cc.ComponentLua@ ComponentLua#ComponentLua ret (return value: cc.ComponentLua)
function ComponentLua:create(scriptFileName) end
---* 
---@param scriptFileName string@ #string scriptFileName
---@return cc.ComponentLua@ ComponentLua#ComponentLua self (return value: cc.ComponentLua)
function ComponentLua:ComponentLua(scriptFileName) end


---@class ccs.ComRender :  Component
local ComRender={ }
---@class ComRender : ccs.ComRender
ccs.ComRender=ComRender


---* 
---@param node cc.Node@ #cc.Node node
---@return ccs.ComRender@ ComRender#ComRender self (return value: ccs.ComRender)
function ComRender:setNode(node) end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ComRender:getNode() end
---@param node cc.Node@ #cc.Node node
---@param comName char@ #char comName
---@return ccs.ComRender@ ComRender#ComRender ret (return value: ccs.ComRender)
---@overload fun(node:cc.Node,comName:char):ccs.ComRender
---@overload fun():ccs.ComRender
function ComRender:create(node,comName) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ComRender:createInstance() end
---* 
---@param r void@ #void r
---@return boolean@ bool#bool ret (return value: bool)
function ComRender:serialize(r) end
---* js NA<br>
---* lua NA
---@return ccs.ComRender@ ComRender#ComRender self (return value: ccs.ComRender)
function ComRender:onRemove() end
---* js NA<br>
---* lua NA
---@return ccs.ComRender@ ComRender#ComRender self (return value: ccs.ComRender)
function ComRender:onAdd() end


---@class cc.Console :  Ref
local Console={ }
---@class Console : cc.Console
cc.Console=Console


---*  starts listening to specified TCP port 
---@param port int@ #int port
---@return boolean@ bool#bool ret (return value: bool)
function Console:listenOnTCP(port) end
---*  log something in the console 
---@param buf char@ #char buf
---@return cc.Console@ Console#Console self (return value: cc.Console)
function Console:log(buf) end
---*  delete custom command 
---@param cmdName string@ #string cmdName
---@return cc.Console@ Console#Console self (return value: cc.Console)
function Console:delCommand(cmdName) end
---*  stops the Console. 'stop' will be called at destruction time as well 
---@return cc.Console@ Console#Console self (return value: cc.Console)
function Console:stop() end
---*  starts listening to specified file descriptor 
---@param fd int@ #int fd
---@return boolean@ bool#bool ret (return value: bool)
function Console:listenOnFileDescriptor(fd) end
---* 
---@param var char@ #char var
---@return cc.Console@ Console#Console self (return value: cc.Console)
function Console:setCommandSeparator(var) end
---* set bind address<br>
---* address : 127.0.0.1
---@param address string@ #string address
---@return cc.Console@ Console#Console self (return value: cc.Console)
function Console:setBindAddress(address) end
---*  Checks whether the server for console is bound with ipv6 address 
---@return boolean@ bool#bool ret (return value: bool)
function Console:isIpv6Server() end


---@class ccs.ContourData :  Ref
local ContourData={ }
---@class ContourData : ccs.ContourData
ccs.ContourData=ContourData


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ContourData:init() end
---* 
---@param vertex vec2_table@ #vec2_table vertex
---@return ccs.ContourData@ ContourData#ContourData self (return value: ccs.ContourData)
function ContourData:addVertex(vertex) end
---* 
---@return ccs.ContourData@ ContourData#ContourData ret (return value: ccs.ContourData)
function ContourData:create() end
---* js ctor
---@return ccs.ContourData@ ContourData#ContourData self (return value: ccs.ContourData)
function ContourData:ContourData() end


---@class cc.Control :  Layer
local Control={ }
---@class Control : cc.Control
cc.Control=Control


---*  Tells whether the control is enabled. 
---@param bEnabled boolean@ #bool bEnabled
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:setEnabled(bEnabled) end
---* 
---@return int@ int#int ret (return value: int)
function Control:getState() end
---* Sends action messages for the given control events.<br>
---* param controlEvents A bitmask whose set flags specify the control events for<br>
---* which action messages are sent. See "CCControlEvent" for bitmask constants.
---@param controlEvents int@ #int controlEvents
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:sendActionsForControlEvents(controlEvents) end
---*  A Boolean value that determines the control selected state. 
---@param bSelected boolean@ #bool bSelected
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:setSelected(bSelected) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Control:isEnabled() end
---* Updates the control layout using its current internal state.
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:needsLayout() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Control:hasVisibleParents() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Control:isSelected() end
---* Returns a boolean value that indicates whether a touch is inside the bounds<br>
---* of the receiver. The given touch must be relative to the world.<br>
---* param touch A Touch object that represents a touch.<br>
---* return Whether a touch is inside the receiver's rect.
---@param touch cc.Touch@ #cc.Touch touch
---@return boolean@ bool#bool ret (return value: bool)
function Control:isTouchInside(touch) end
---*  A Boolean value that determines whether the control is highlighted. 
---@param bHighlighted boolean@ #bool bHighlighted
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:setHighlighted(bHighlighted) end
---* Returns a point corresponding to the touch location converted into the<br>
---* control space coordinates.<br>
---* param touch A Touch object that represents a touch.
---@param touch cc.Touch@ #cc.Touch touch
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Control:getTouchLocation(touch) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Control:isHighlighted() end
---*  Creates a Control object 
---@return cc.Control@ Control#Control ret (return value: cc.Control)
function Control:create() end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:onTouchMoved(touch,event) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Control:isOpacityModifyRGB() end
---* 
---@param bOpacityModifyRGB boolean@ #bool bOpacityModifyRGB
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:setOpacityModifyRGB(bOpacityModifyRGB) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:onTouchCancelled(touch,event) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Control:init() end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:onTouchEnded(touch,event) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return boolean@ bool#bool ret (return value: bool)
function Control:onTouchBegan(touch,event) end
---* js ctor
---@return cc.Control@ Control#Control self (return value: cc.Control)
function Control:Control() end


---@class cc.ControlButton :  Control
local ControlButton={ }
---@class ControlButton : cc.ControlButton
cc.ControlButton=ControlButton


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:isPushed() end
---* Sets the title label to use for the specified state.<br>
---* If a property is not specified for a state, the default is to use<br>
---* the ButtonStateNormal value.<br>
---* param label The title label to use for the specified state.<br>
---* param state The state that uses the specified title. The values are described<br>
---* in "CCControlState".
---@param label cc.Node@ #cc.Node label
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setTitleLabelForState(label,state) end
---* 
---@param adjustBackgroundImage boolean@ #bool adjustBackgroundImage
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setAdjustBackgroundImage(adjustBackgroundImage) end
---* Sets the title string to use for the specified state.<br>
---* If a property is not specified for a state, the default is to use<br>
---* the ButtonStateNormal value.<br>
---* param title The title string to use for the specified state.<br>
---* param state The state that uses the specified title. The values are described<br>
---* in "CCControlState".
---@param title string@ #string title
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setTitleForState(title,state) end
---* 
---@param var vec2_table@ #vec2_table var
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setLabelAnchorPoint(var) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ControlButton:getLabelAnchorPoint() end
---* 
---@param sprite ccui.Scale9Sprite@ #ccui.Scale9Sprite sprite
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:initWithBackgroundSprite(sprite) end
---* 
---@param state int@ #int state
---@return float@ float#float ret (return value: float)
function ControlButton:getTitleTTFSizeForState(state) end
---* 
---@param fntFile string@ #string fntFile
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setTitleTTFForState(fntFile,state) end
---* 
---@param size float@ #float size
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setTitleTTFSizeForState(size,state) end
---* 
---@param var cc.Node@ #cc.Node var
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setTitleLabel(var) end
---* 
---@param var size_table@ #size_table var
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setPreferredSize(var) end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function ControlButton:getCurrentTitleColor() end
---* 
---@param var boolean@ #bool var
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setZoomOnTouchDown(var) end
---* 
---@param var ccui.Scale9Sprite@ #ccui.Scale9Sprite var
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setBackgroundSprite(var) end
---* Returns the background sprite used for a state.<br>
---* param state The state that uses the background sprite. Possible values are<br>
---* described in "CCControlState".
---@param state int@ #int state
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
function ControlButton:getBackgroundSpriteForState(state) end
---* 
---@return int@ int#int ret (return value: int)
function ControlButton:getHorizontalOrigin() end
---* 
---@param title string@ #string title
---@param fontName string@ #string fontName
---@param fontSize float@ #float fontSize
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:initWithTitleAndFontNameAndFontSize(title,fontName,fontSize) end
---* Sets the font of the label, changes the label to a BMFont if necessary.<br>
---* param fntFile The name of the font to change to<br>
---* param state The state that uses the specified fntFile. The values are described<br>
---* in "CCControlState".
---@param fntFile string@ #string fntFile
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setTitleBMFontForState(fntFile,state) end
---* 
---@return float@ float#float ret (return value: float)
function ControlButton:getScaleRatio() end
---* 
---@param state int@ #int state
---@return string@ string#string ret (return value: string)
function ControlButton:getTitleTTFForState(state) end
---* 
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
function ControlButton:getBackgroundSprite() end
---* Returns the title color used for a state.<br>
---* param state The state that uses the specified color. The values are described<br>
---* in "CCControlState".<br>
---* return The color of the title for the specified state.
---@param state int@ #int state
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function ControlButton:getTitleColorForState(state) end
---* Sets the color of the title to use for the specified state.<br>
---* param color The color of the title to use for the specified state.<br>
---* param state The state that uses the specified color. The values are described<br>
---* in "CCControlState".
---@param color color3b_table@ #color3b_table color
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setTitleColorForState(color,state) end
---*  Adjust the background image. YES by default. If the property is set to NO, the<br>
---* background will use the preferred size of the background image. 
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:doesAdjustBackgroundImage() end
---* Sets the background spriteFrame to use for the specified button state.<br>
---* param spriteFrame The background spriteFrame to use for the specified state.<br>
---* param state The state that uses the specified image. The values are described<br>
---* in "CCControlState".
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setBackgroundSpriteFrameForState(spriteFrame,state) end
---* Sets the background sprite to use for the specified button state.<br>
---* param sprite The background sprite to use for the specified state.<br>
---* param state The state that uses the specified image. The values are described<br>
---* in "CCControlState".
---@param sprite ccui.Scale9Sprite@ #ccui.Scale9Sprite sprite
---@param state int@ #int state
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setBackgroundSpriteForState(sprite,state) end
---* 
---@param var float@ #float var
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setScaleRatio(var) end
---* 
---@param state int@ #int state
---@return string@ string#string ret (return value: string)
function ControlButton:getTitleBMFontForState(state) end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ControlButton:getTitleLabel() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function ControlButton:getPreferredSize() end
---* 
---@return int@ int#int ret (return value: int)
function ControlButton:getVerticalMargin() end
---* Returns the title label used for a state.<br>
---* param state The state that uses the title label. Possible values are described<br>
---* in "CCControlState".
---@param state int@ #int state
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ControlButton:getTitleLabelForState(state) end
---* 
---@param marginH int@ #int marginH
---@param marginV int@ #int marginV
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setMargins(marginH,marginV) end
---@return string@ string#string ret (return value: string)
---@overload fun():string
---@overload fun():string
function ControlButton:getCurrentTitle() end
---* 
---@param label cc.Node@ #cc.Node label
---@param backgroundSprite ccui.Scale9Sprite@ #ccui.Scale9Sprite backgroundSprite
---@param adjustBackGroundSize boolean@ #bool adjustBackGroundSize
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:initWithLabelAndBackgroundSprite(label,backgroundSprite,adjustBackGroundSize) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:getZoomOnTouchDown() end
---* Returns the title used for a state.<br>
---* param state The state that uses the title. Possible values are described in<br>
---* "CCControlState".<br>
---* return The title for the specified state.
---@param state int@ #int state
---@return string@ string#string ret (return value: string)
function ControlButton:getTitleForState(state) end
---@param label cc.Node@ #cc.Node label
---@param backgroundSprite ccui.Scale9Sprite@ #ccui.Scale9Sprite backgroundSprite
---@param adjustBackGroundSize boolean@ #bool adjustBackGroundSize
---@return cc.ControlButton@ ControlButton#ControlButton ret (return value: cc.ControlButton)
---@overload fun(unkown0:ccui.Scale9Sprite):cc.ControlButton
---@overload fun():cc.ControlButton
---@overload fun(label:cc.Node,backgroundSprite:ccui.Scale9Sprite):cc.ControlButton
---@overload fun(unkown0:string,unkown1:string,unkown2:float):cc.ControlButton
---@overload fun(label:cc.Node,backgroundSprite:ccui.Scale9Sprite,adjustBackGroundSize:boolean):cc.ControlButton
function ControlButton:create(label,backgroundSprite,adjustBackGroundSize) end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setEnabled(enabled) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:onTouchEnded(touch,event) end
---* 
---@param e color3b_tabl@ #color3b_table 
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setColor(e) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:onTouchMoved(touch,event) end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setSelected(enabled) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:onTouchCancelled(touch,event) end
---* 
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:needsLayout() end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param event cc.Event@ #cc.Event event
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:onTouchBegan(touch,event) end
---* 
---@param parentOpacity unsigned_char@ #unsigned char parentOpacity
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:updateDisplayedOpacity(parentOpacity) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ControlButton:init() end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setHighlighted(enabled) end
---* 
---@param parentColor color3b_table@ #color3b_table parentColor
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:updateDisplayedColor(parentColor) end
---* 
---@param var unsigned_char@ #unsigned char var
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:setOpacity(var) end
---* js ctor
---@return cc.ControlButton@ ControlButton#ControlButton self (return value: cc.ControlButton)
function ControlButton:ControlButton() end


---@class cc.ControlColourPicker :  Control
local ControlColourPicker={ }
---@class ControlColourPicker : cc.ControlColourPicker
cc.ControlColourPicker=ControlColourPicker


---* 
---@param sender cc.Ref@ #cc.Ref sender
---@param controlEvent int@ #int controlEvent
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:hueSliderValueChanged(sender,controlEvent) end
---* 
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker ret (return value: cc.ControlHuePicker)
function ControlColourPicker:getHuePicker() end
---* 
---@return cc.ControlSaturationBrightnessPicker@ ControlSaturationBrightnessPicker#ControlSaturationBrightnessPicker ret (return value: cc.ControlSaturationBrightnessPicker)
function ControlColourPicker:getcolourPicker() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:setBackground(var) end
---* 
---@param var cc.ControlSaturationBrightnessPicker@ #cc.ControlSaturationBrightnessPicker var
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:setcolourPicker(var) end
---* 
---@param sender cc.Ref@ #cc.Ref sender
---@param controlEvent int@ #int controlEvent
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:colourSliderValueChanged(sender,controlEvent) end
---* 
---@param var cc.ControlHuePicker@ #cc.ControlHuePicker var
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:setHuePicker(var) end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlColourPicker:getBackground() end
---* 
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker ret (return value: cc.ControlColourPicker)
function ControlColourPicker:create() end
---* 
---@param bEnabled boolean@ #bool bEnabled
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:setEnabled(bEnabled) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ControlColourPicker:init() end
---* 
---@param colorValue color3b_table@ #color3b_table colorValue
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:setColor(colorValue) end
---* js ctor<br>
---* lua new
---@return cc.ControlColourPicker@ ControlColourPicker#ControlColourPicker self (return value: cc.ControlColourPicker)
function ControlColourPicker:ControlColourPicker() end


---@class cc.ControlHuePicker :  Control
local ControlHuePicker={ }
---@class ControlHuePicker : cc.ControlHuePicker
cc.ControlHuePicker=ControlHuePicker


---* 
---@param target cc.Node@ #cc.Node target
---@param pos vec2_table@ #vec2_table pos
---@return boolean@ bool#bool ret (return value: bool)
function ControlHuePicker:initWithTargetAndPos(target,pos) end
---* 
---@param val float@ #float val
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker self (return value: cc.ControlHuePicker)
function ControlHuePicker:setHue(val) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ControlHuePicker:getStartPos() end
---* 
---@return float@ float#float ret (return value: float)
function ControlHuePicker:getHue() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlHuePicker:getSlider() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker self (return value: cc.ControlHuePicker)
function ControlHuePicker:setBackground(var) end
---* 
---@param val float@ #float val
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker self (return value: cc.ControlHuePicker)
function ControlHuePicker:setHuePercentage(val) end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlHuePicker:getBackground() end
---* 
---@return float@ float#float ret (return value: float)
function ControlHuePicker:getHuePercentage() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker self (return value: cc.ControlHuePicker)
function ControlHuePicker:setSlider(var) end
---* 
---@param target cc.Node@ #cc.Node target
---@param pos vec2_table@ #vec2_table pos
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker ret (return value: cc.ControlHuePicker)
function ControlHuePicker:create(target,pos) end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker self (return value: cc.ControlHuePicker)
function ControlHuePicker:setEnabled(enabled) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker self (return value: cc.ControlHuePicker)
function ControlHuePicker:onTouchMoved(pTouch,pEvent) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return boolean@ bool#bool ret (return value: bool)
function ControlHuePicker:onTouchBegan(touch,pEvent) end
---* js ctor
---@return cc.ControlHuePicker@ ControlHuePicker#ControlHuePicker self (return value: cc.ControlHuePicker)
function ControlHuePicker:ControlHuePicker() end


---@class cc.Controller 
local Controller={ }
---@class Controller : cc.Controller
cc.Controller=Controller


---* Activate receives key event from external key. e.g. back,menu.<br>
---* Controller receives only standard key which contained within enum Key by default.<br>
---* warning The API only work on the android platform for support diversified game controller.<br>
---* param externalKeyCode   External key code.<br>
---* param receive   True if external key event on this controller should be receive, false otherwise.
---@param externalKeyCode int@ #int externalKeyCode
---@param receive boolean@ #bool receive
---@return cc.Controller@ Controller#Controller self (return value: cc.Controller)
function Controller:receiveExternalKeyEvent(externalKeyCode,receive) end
---* Gets the name of this Controller object.
---@return string@ string#string ret (return value: string)
function Controller:getDeviceName() end
---* Indicates whether the Controller is connected.
---@return boolean@ bool#bool ret (return value: bool)
function Controller:isConnected() end
---* Gets the Controller id.
---@return int@ int#int ret (return value: int)
function Controller:getDeviceId() end
---* Changes the tag that is used to identify the controller easily.<br>
---* param tag   A integer that identifies the controller.
---@param tag int@ #int tag
---@return cc.Controller@ Controller#Controller self (return value: cc.Controller)
function Controller:setTag(tag) end
---* Returns a tag that is used to identify the controller easily.<br>
---* return An integer that identifies the controller.
---@return int@ int#int ret (return value: int)
function Controller:getTag() end
---* Start discovering new controllers.<br>
---* warning The API has an empty implementation on Android.
---@return cc.Controller@ Controller#Controller self (return value: cc.Controller)
function Controller:startDiscoveryController() end
---* Stop the discovery process.<br>
---* warning The API has an empty implementation on Android.
---@return cc.Controller@ Controller#Controller self (return value: cc.Controller)
function Controller:stopDiscoveryController() end
---* Gets a Controller object with device ID.<br>
---* param deviceId   A unique identifier to find the controller.<br>
---* return A Controller object.
---@param deviceId int@ #int deviceId
---@return cc.Controller@ Controller#Controller ret (return value: cc.Controller)
function Controller:getControllerByDeviceId(deviceId) end
---* Gets a Controller object with tag.<br>
---* param tag   An identifier to find the controller.<br>
---* return A Controller object.
---@param tag int@ #int tag
---@return cc.Controller@ Controller#Controller ret (return value: cc.Controller)
function Controller:getControllerByTag(tag) end


---@class cc.ControlPotentiometer :  Control
local ControlPotentiometer={ }
---@class ControlPotentiometer : cc.ControlPotentiometer
cc.ControlPotentiometer=ControlPotentiometer


---* 
---@param var vec2_table@ #vec2_table var
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:setPreviousLocation(var) end
---* 
---@param value float@ #float value
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:setValue(value) end
---* 
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer ret (return value: cc.ProgressTimer)
function ControlPotentiometer:getProgressTimer() end
---* 
---@return float@ float#float ret (return value: float)
function ControlPotentiometer:getMaximumValue() end
---*  Returns the angle in degree between line1 and line2. 
---@param beginLineA vec2_table@ #vec2_table beginLineA
---@param endLineA vec2_table@ #vec2_table endLineA
---@param beginLineB vec2_table@ #vec2_table beginLineB
---@param endLineB vec2_table@ #vec2_table endLineB
---@return float@ float#float ret (return value: float)
function ControlPotentiometer:angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(beginLineA,endLineA,beginLineB,endLineB) end
---*  Factorize the event dispatch into these methods. 
---@param location vec2_table@ #vec2_table location
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:potentiometerBegan(location) end
---* 
---@param maximumValue float@ #float maximumValue
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:setMaximumValue(maximumValue) end
---* 
---@return float@ float#float ret (return value: float)
function ControlPotentiometer:getMinimumValue() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:setThumbSprite(var) end
---* 
---@return float@ float#float ret (return value: float)
function ControlPotentiometer:getValue() end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ControlPotentiometer:getPreviousLocation() end
---*  Returns the distance between the point1 and point2. 
---@param point1 vec2_table@ #vec2_table point1
---@param point2 vec2_table@ #vec2_table point2
---@return float@ float#float ret (return value: float)
function ControlPotentiometer:distanceBetweenPointAndPoint(point1,point2) end
---* 
---@param location vec2_table@ #vec2_table location
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:potentiometerEnded(location) end
---* 
---@param var cc.ProgressTimer@ #cc.ProgressTimer var
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:setProgressTimer(var) end
---* 
---@param minimumValue float@ #float minimumValue
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:setMinimumValue(minimumValue) end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlPotentiometer:getThumbSprite() end
---* Initializes a potentiometer with a track sprite and a progress bar.<br>
---* param trackSprite   Sprite, that is used as a background.<br>
---* param progressTimer ProgressTimer, that is used as a progress bar.
---@param trackSprite cc.Sprite@ #cc.Sprite trackSprite
---@param progressTimer cc.ProgressTimer@ #cc.ProgressTimer progressTimer
---@param thumbSprite cc.Sprite@ #cc.Sprite thumbSprite
---@return boolean@ bool#bool ret (return value: bool)
function ControlPotentiometer:initWithTrackSprite_ProgressTimer_ThumbSprite(trackSprite,progressTimer,thumbSprite) end
---* 
---@param location vec2_table@ #vec2_table location
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:potentiometerMoved(location) end
---* Creates potentiometer with a track filename and a progress filename.
---@param backgroundFile char@ #char backgroundFile
---@param progressFile char@ #char progressFile
---@param thumbFile char@ #char thumbFile
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer ret (return value: cc.ControlPotentiometer)
function ControlPotentiometer:create(backgroundFile,progressFile,thumbFile) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@return boolean@ bool#bool ret (return value: bool)
function ControlPotentiometer:isTouchInside(touch) end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:setEnabled(enabled) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:onTouchMoved(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:onTouchEnded(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return boolean@ bool#bool ret (return value: bool)
function ControlPotentiometer:onTouchBegan(pTouch,pEvent) end
---* js ctor<br>
---* lua new
---@return cc.ControlPotentiometer@ ControlPotentiometer#ControlPotentiometer self (return value: cc.ControlPotentiometer)
function ControlPotentiometer:ControlPotentiometer() end


---@class cc.ControlSaturationBrightnessPicker :  Control
local ControlSaturationBrightnessPicker={ }
---@class ControlSaturationBrightnessPicker : cc.ControlSaturationBrightnessPicker
cc.ControlSaturationBrightnessPicker=ControlSaturationBrightnessPicker


---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSaturationBrightnessPicker:getShadow() end
---* 
---@param target cc.Node@ #cc.Node target
---@param pos vec2_table@ #vec2_table pos
---@return boolean@ bool#bool ret (return value: bool)
function ControlSaturationBrightnessPicker:initWithTargetAndPos(target,pos) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ControlSaturationBrightnessPicker:getStartPos() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSaturationBrightnessPicker:getOverlay() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSaturationBrightnessPicker:getSlider() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSaturationBrightnessPicker:getBackground() end
---* 
---@return float@ float#float ret (return value: float)
function ControlSaturationBrightnessPicker:getSaturation() end
---* 
---@return float@ float#float ret (return value: float)
function ControlSaturationBrightnessPicker:getBrightness() end
---* 
---@param target cc.Node@ #cc.Node target
---@param pos vec2_table@ #vec2_table pos
---@return cc.ControlSaturationBrightnessPicker@ ControlSaturationBrightnessPicker#ControlSaturationBrightnessPicker ret (return value: cc.ControlSaturationBrightnessPicker)
function ControlSaturationBrightnessPicker:create(target,pos) end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlSaturationBrightnessPicker@ ControlSaturationBrightnessPicker#ControlSaturationBrightnessPicker self (return value: cc.ControlSaturationBrightnessPicker)
function ControlSaturationBrightnessPicker:setEnabled(enabled) end
---* js ctor
---@return cc.ControlSaturationBrightnessPicker@ ControlSaturationBrightnessPicker#ControlSaturationBrightnessPicker self (return value: cc.ControlSaturationBrightnessPicker)
function ControlSaturationBrightnessPicker:ControlSaturationBrightnessPicker() end


---@class cc.ControlSlider :  Control
local ControlSlider={ }
---@class ControlSlider : cc.ControlSlider
cc.ControlSlider=ControlSlider


---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setBackgroundSprite(var) end
---* 
---@return float@ float#float ret (return value: float)
function ControlSlider:getMaximumAllowedValue() end
---@param backgroundSprite cc.Sprite@ #cc.Sprite backgroundSprite
---@param progressSprite cc.Sprite@ #cc.Sprite progressSprite
---@param thumbSprite cc.Sprite@ #cc.Sprite thumbSprite
---@param selectedThumbSprite cc.Sprite@ #cc.Sprite selectedThumbSprite
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(backgroundSprite:cc.Sprite,progressSprite:cc.Sprite,thumbSprite:cc.Sprite,selectedThumbSprite:cc.Sprite):boolean
---@overload fun(backgroundSprite:cc.Sprite,progressSprite:cc.Sprite,thumbSprite:cc.Sprite):boolean
function ControlSlider:initWithSprites(backgroundSprite,progressSprite,thumbSprite,selectedThumbSprite) end
---* 
---@return float@ float#float ret (return value: float)
function ControlSlider:getMinimumAllowedValue() end
---* 
---@return float@ float#float ret (return value: float)
function ControlSlider:getMaximumValue() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSlider:getSelectedThumbSprite() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setProgressSprite(var) end
---* 
---@param val float@ #float val
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setMaximumValue(val) end
---* 
---@return float@ float#float ret (return value: float)
function ControlSlider:getMinimumValue() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setThumbSprite(var) end
---* 
---@return float@ float#float ret (return value: float)
function ControlSlider:getValue() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSlider:getBackgroundSprite() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSlider:getThumbSprite() end
---* 
---@param val float@ #float val
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setValue(val) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ControlSlider:locationFromTouch(touch) end
---* 
---@param val float@ #float val
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setMinimumValue(val) end
---* 
---@param var float@ #float var
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setMinimumAllowedValue(var) end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlSlider:getProgressSprite() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setSelectedThumbSprite(var) end
---* 
---@param var float@ #float var
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setMaximumAllowedValue(var) end
---@param backgroundSprite cc.Sprite@ #cc.Sprite backgroundSprite
---@param pogressSprite cc.Sprite@ #cc.Sprite pogressSprite
---@param thumbSprite cc.Sprite@ #cc.Sprite thumbSprite
---@param selectedThumbSprite cc.Sprite@ #cc.Sprite selectedThumbSprite
---@return cc.ControlSlider@ ControlSlider#ControlSlider ret (return value: cc.ControlSlider)
---@overload fun(backgroundSprite:cc.Sprite,pogressSprite:cc.Sprite,thumbSprite:cc.Sprite):cc.ControlSlider
---@overload fun(unkown0:char,unkown1:char,unkown2:char):cc.ControlSlider
---@overload fun(unkown0:char,unkown1:char,unkown2:char,unkown3:char):cc.ControlSlider
---@overload fun(backgroundSprite:cc.Sprite,pogressSprite:cc.Sprite,thumbSprite:cc.Sprite,selectedThumbSprite:cc.Sprite):cc.ControlSlider
function ControlSlider:create(backgroundSprite,pogressSprite,thumbSprite,selectedThumbSprite) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@return boolean@ bool#bool ret (return value: bool)
function ControlSlider:isTouchInside(touch) end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:setEnabled(enabled) end
---* 
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:needsLayout() end
---* js ctor<br>
---* lua new
---@return cc.ControlSlider@ ControlSlider#ControlSlider self (return value: cc.ControlSlider)
function ControlSlider:ControlSlider() end


---@class cc.ControlStepper :  Control
local ControlStepper={ }
---@class ControlStepper : cc.ControlStepper
cc.ControlStepper=ControlStepper


---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlStepper:getMinusSprite() end
---* 
---@param value double@ #double value
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setValue(value) end
---* 
---@param stepValue double@ #double stepValue
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setStepValue(stepValue) end
---* 
---@param minusSprite cc.Sprite@ #cc.Sprite minusSprite
---@param plusSprite cc.Sprite@ #cc.Sprite plusSprite
---@return boolean@ bool#bool ret (return value: bool)
function ControlStepper:initWithMinusSpriteAndPlusSprite(minusSprite,plusSprite) end
---*  Set the numeric value of the stepper. If send is true, the Control::EventType::VALUE_CHANGED is sent. 
---@param value double@ #double value
---@param send boolean@ #bool send
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setValueWithSendingEvent(value,send) end
---* 
---@param maximumValue double@ #double maximumValue
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setMaximumValue(maximumValue) end
---* 
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function ControlStepper:getMinusLabel() end
---* 
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function ControlStepper:getPlusLabel() end
---* 
---@param wraps boolean@ #bool wraps
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setWraps(wraps) end
---* 
---@param var cc.Label@ #cc.Label var
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setMinusLabel(var) end
---*  Start the autorepeat increment/decrement. 
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:startAutorepeat() end
---*  Update the layout of the stepper with the given touch location. 
---@param location vec2_table@ #vec2_table location
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:updateLayoutUsingTouchLocation(location) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ControlStepper:isContinuous() end
---*  Stop the autorepeat. 
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:stopAutorepeat() end
---* 
---@param minimumValue double@ #double minimumValue
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setMinimumValue(minimumValue) end
---* 
---@param var cc.Label@ #cc.Label var
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setPlusLabel(var) end
---* 
---@return double@ double#double ret (return value: double)
function ControlStepper:getValue() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ControlStepper:getPlusSprite() end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setPlusSprite(var) end
---* 
---@param var cc.Sprite@ #cc.Sprite var
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:setMinusSprite(var) end
---* 
---@param minusSprite cc.Sprite@ #cc.Sprite minusSprite
---@param plusSprite cc.Sprite@ #cc.Sprite plusSprite
---@return cc.ControlStepper@ ControlStepper#ControlStepper ret (return value: cc.ControlStepper)
function ControlStepper:create(minusSprite,plusSprite) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:onTouchMoved(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:onTouchEnded(pTouch,pEvent) end
---* 
---@param dt float@ #float dt
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:update(dt) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return boolean@ bool#bool ret (return value: bool)
function ControlStepper:onTouchBegan(pTouch,pEvent) end
---* js ctor<br>
---* lua new
---@return cc.ControlStepper@ ControlStepper#ControlStepper self (return value: cc.ControlStepper)
function ControlStepper:ControlStepper() end


---@class cc.ControlSwitch :  Control
local ControlSwitch={ }
---@class ControlSwitch : cc.ControlSwitch
cc.ControlSwitch=ControlSwitch


---@param isOn boolean@ #bool isOn
---@param animated boolean@ #bool animated
---@return cc.ControlSwitch@ ControlSwitch#ControlSwitch self (return value: cc.ControlSwitch)
---@overload fun(isOn:boolean):cc.ControlSwitch
---@overload fun(isOn:boolean,animated:boolean):cc.ControlSwitch
function ControlSwitch:setOn(isOn,animated) end
---* 
---@param touch cc.Touch@ #cc.Touch touch
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ControlSwitch:locationFromTouch(touch) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ControlSwitch:isOn() end
---@param maskSprite cc.Sprite@ #cc.Sprite maskSprite
---@param onSprite cc.Sprite@ #cc.Sprite onSprite
---@param offSprite cc.Sprite@ #cc.Sprite offSprite
---@param thumbSprite cc.Sprite@ #cc.Sprite thumbSprite
---@param onLabel cc.Label@ #cc.Label onLabel
---@param offLabel cc.Label@ #cc.Label offLabel
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(maskSprite:cc.Sprite,onSprite:cc.Sprite,offSprite:cc.Sprite,thumbSprite:cc.Sprite,onLabel:cc.Label,offLabel:cc.Label):boolean
---@overload fun(maskSprite:cc.Sprite,onSprite:cc.Sprite,offSprite:cc.Sprite,thumbSprite:cc.Sprite):boolean
function ControlSwitch:initWithMaskSprite(maskSprite,onSprite,offSprite,thumbSprite,onLabel,offLabel) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ControlSwitch:hasMoved() end
---@param maskSprite cc.Sprite@ #cc.Sprite maskSprite
---@param onSprite cc.Sprite@ #cc.Sprite onSprite
---@param offSprite cc.Sprite@ #cc.Sprite offSprite
---@param thumbSprite cc.Sprite@ #cc.Sprite thumbSprite
---@param onLabel cc.Label@ #cc.Label onLabel
---@param offLabel cc.Label@ #cc.Label offLabel
---@return cc.ControlSwitch@ ControlSwitch#ControlSwitch ret (return value: cc.ControlSwitch)
---@overload fun(maskSprite:cc.Sprite,onSprite:cc.Sprite,offSprite:cc.Sprite,thumbSprite:cc.Sprite):cc.ControlSwitch
---@overload fun(maskSprite:cc.Sprite,onSprite:cc.Sprite,offSprite:cc.Sprite,thumbSprite:cc.Sprite,onLabel:cc.Label,offLabel:cc.Label):cc.ControlSwitch
function ControlSwitch:create(maskSprite,onSprite,offSprite,thumbSprite,onLabel,offLabel) end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.ControlSwitch@ ControlSwitch#ControlSwitch self (return value: cc.ControlSwitch)
function ControlSwitch:setEnabled(enabled) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlSwitch@ ControlSwitch#ControlSwitch self (return value: cc.ControlSwitch)
function ControlSwitch:onTouchMoved(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlSwitch@ ControlSwitch#ControlSwitch self (return value: cc.ControlSwitch)
function ControlSwitch:onTouchEnded(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.ControlSwitch@ ControlSwitch#ControlSwitch self (return value: cc.ControlSwitch)
function ControlSwitch:onTouchCancelled(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return boolean@ bool#bool ret (return value: bool)
function ControlSwitch:onTouchBegan(pTouch,pEvent) end
---* js ctor<br>
---* lua new
---@return cc.ControlSwitch@ ControlSwitch#ControlSwitch self (return value: cc.ControlSwitch)
function ControlSwitch:ControlSwitch() end


---@class cc.CSLoader 
local CSLoader={ }
---@class CSLoader : cc.CSLoader
cc.CSLoader=CSLoader


---* 
---@param filename string@ #string filename
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function CSLoader:createNodeFromJson(filename) end
---* 
---@param filename string@ #string filename
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function CSLoader:createNodeWithFlatBuffersFile(filename) end
---* 
---@param fileName string@ #string fileName
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function CSLoader:loadNodeWithFile(fileName) end
---* 
---@param callbackName string@ #string callbackName
---@param callbackType string@ #string callbackType
---@param sender ccui.Widget@ #ccui.Widget sender
---@param handler cc.Node@ #cc.Node handler
---@return boolean@ bool#bool ret (return value: bool)
function CSLoader:bindCallback(callbackName,callbackType,sender,handler) end
---* 
---@param jsonPath string@ #string jsonPath
---@return cc.CSLoader@ CSLoader#CSLoader self (return value: cc.CSLoader)
function CSLoader:setJsonPath(jsonPath) end
---* 
---@return cc.CSLoader@ CSLoader#CSLoader self (return value: cc.CSLoader)
function CSLoader:init() end
---* 
---@param content string@ #string content
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function CSLoader:loadNodeWithContent(content) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function CSLoader:isRecordJsonPath() end
---* 
---@return string@ string#string ret (return value: string)
function CSLoader:getJsonPath() end
---* 
---@param record boolean@ #bool record
---@return cc.CSLoader@ CSLoader#CSLoader self (return value: cc.CSLoader)
function CSLoader:setRecordJsonPath(record) end
---* 
---@param filename string@ #string filename
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function CSLoader:createNodeWithFlatBuffersForSimulator(filename) end
---* 
---@return cc.CSLoader@ CSLoader#CSLoader self (return value: cc.CSLoader)
function CSLoader:destroyInstance() end
---@param filename string@ #string filename
---@param callback function@ #function callback
---@return cc.Node@ Node#Node ret (return value: cc.Node)
---@overload fun(filename:string,callback:function):cc.Node
---@overload fun(filename:string):cc.Node
function CSLoader:createNodeWithVisibleSize(filename,callback) end
---* 
---@return cc.CSLoader@ CSLoader#CSLoader ret (return value: cc.CSLoader)
function CSLoader:getInstance() end
---* 
---@return cc.CSLoader@ CSLoader#CSLoader self (return value: cc.CSLoader)
function CSLoader:CSLoader() end


---@class cc.DelayTime :  ActionInterval
local DelayTime={ }
---@class DelayTime : cc.DelayTime
cc.DelayTime=DelayTime


---* Creates the action.<br>
---* param d Duration time, in seconds.<br>
---* return An autoreleased DelayTime object.
---@param d float@ #float d
---@return cc.DelayTime@ DelayTime#DelayTime ret (return value: cc.DelayTime)
function DelayTime:create(d) end
---* 
---@return cc.DelayTime@ DelayTime#DelayTime ret (return value: cc.DelayTime)
function DelayTime:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.DelayTime@ DelayTime#DelayTime self (return value: cc.DelayTime)
function DelayTime:update(time) end
---* 
---@return cc.DelayTime@ DelayTime#DelayTime ret (return value: cc.DelayTime)
function DelayTime:reverse() end
---* 
---@return cc.DelayTime@ DelayTime#DelayTime self (return value: cc.DelayTime)
function DelayTime:DelayTime() end


---@class cc.Device 
local Device={ }
---@class Device : cc.Device
cc.Device=Device


---* To enable or disable accelerometer.
---@param isEnabled boolean@ #bool isEnabled
---@return cc.Device@ Device#Device self (return value: cc.Device)
function Device:setAccelerometerEnabled(isEnabled) end
---* Sets the interval of accelerometer.
---@param interval float@ #float interval
---@return cc.Device@ Device#Device self (return value: cc.Device)
function Device:setAccelerometerInterval(interval) end
---* Controls whether the screen should remain on.<br>
---* param keepScreenOn One flag indicating that the screen should remain on.
---@param keepScreenOn boolean@ #bool keepScreenOn
---@return cc.Device@ Device#Device self (return value: cc.Device)
function Device:setKeepScreenOn(keepScreenOn) end
---* Vibrate for the specified amount of time.<br>
---* If vibrate is not supported, then invoking this method has no effect.<br>
---* Some platforms limit to a maximum duration of 5 seconds.<br>
---* Duration is ignored on iOS due to API limitations.<br>
---* param duration The duration in seconds.
---@param duration float@ #float duration
---@return cc.Device@ Device#Device self (return value: cc.Device)
function Device:vibrate(duration) end
---* Gets the DPI of device<br>
---* return The DPI of device.
---@return int@ int#int ret (return value: int)
function Device:getDPI() end


---@class cc.DirectionLight :  BaseLight
local DirectionLight={ }
---@class DirectionLight : cc.DirectionLight
cc.DirectionLight=DirectionLight


---* Returns the Direction in parent.
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function DirectionLight:getDirection() end
---* Returns direction in world.
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function DirectionLight:getDirectionInWorld() end
---* Sets the Direction in parent.<br>
---* param dir The Direction in parent.
---@param dir vec3_table@ #vec3_table dir
---@return cc.DirectionLight@ DirectionLight#DirectionLight self (return value: cc.DirectionLight)
function DirectionLight:setDirection(dir) end
---* Creates a direction light.<br>
---* param direction The light's direction<br>
---* param color The light's color.<br>
---* return The new direction light.
---@param direction vec3_table@ #vec3_table direction
---@param color color3b_table@ #color3b_table color
---@return cc.DirectionLight@ DirectionLight#DirectionLight ret (return value: cc.DirectionLight)
function DirectionLight:create(direction,color) end
---* 
---@return int@ int#int ret (return value: int)
function DirectionLight:getLightType() end
---* 
---@return cc.DirectionLight@ DirectionLight#DirectionLight self (return value: cc.DirectionLight)
function DirectionLight:DirectionLight() end


---@class cc.Director 
local Director={ }
---@class Director : cc.Director
cc.Director=Director


---*  Pauses the running scene.<br>
---* The running scene will be _drawed_ but all scheduled timers will be paused.<br>
---* While paused, the draw rate will be 4 FPS to reduce CPU consumption.
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:pause() end
---* Clones a projection matrix and put it to the top of projection matrix stack.<br>
---* param index The index of projection matrix stack.<br>
---* js NA
---@param index unsigned_int@ #unsigned int index
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:pushProjectionMatrix(index) end
---*  Pops the top matrix of the projection matrix stack.<br>
---* param index The index of projection matrix stack.<br>
---* js NA
---@param index unsigned_int@ #unsigned int index
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:popProjectionMatrix(index) end
---*  Sets the EventDispatcher associated with this director.<br>
---* since v3.0<br>
---* js NA
---@param dispatcher cc.EventDispatcher@ #cc.EventDispatcher dispatcher
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setEventDispatcher(dispatcher) end
---*  Adds an identity matrix to the top of projection matrix stack.<br>
---* param index The index of projection matrix stack.<br>
---* js NA
---@param index unsigned_int@ #unsigned int index
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:loadProjectionIdentityMatrix(index) end
---*  The size in pixels of the surface. It could be different than the screen size.<br>
---* High-res devices might have a higher surface size than the screen size.<br>
---* Only available when compiled using SDK >= 4.0.<br>
---* since v0.99.4
---@param scaleFactor float@ #float scaleFactor
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setContentScaleFactor(scaleFactor) end
---* 
---@return float@ float#float ret (return value: float)
function Director:getDeltaTime() end
---* Gets content scale factor.<br>
---* see Director::setContentScaleFactor()
---@return float@ float#float ret (return value: float)
function Director:getContentScaleFactor() end
---*  Returns the size of the OpenGL view in pixels. 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Director:getWinSizeInPixels() end
---* Returns safe area rectangle of the OpenGL view in points.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Director:getSafeAreaRect() end
---*  Sets the OpenGL default values.<br>
---* It will enable alpha blending, disable depth test.<br>
---* js NA
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setGLDefaultValues() end
---*  Sets the ActionManager associated with this director.<br>
---* since v2.0
---@param actionManager cc.ActionManager@ #cc.ActionManager actionManager
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setActionManager(actionManager) end
---*  Enables/disables OpenGL alpha blending. 
---@param on boolean@ #bool on
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setAlphaBlending(on) end
---* Pops out all scenes from the stack until the root scene in the queue.<br>
---* This scene will replace the running one.<br>
---* Internally it will call `popToSceneStackLevel(1)`.
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:popToRootScene() end
---* Adds a matrix to the top of specified type of matrix stack.<br>
---* param type Matrix type.<br>
---* param mat The matrix that to be added.<br>
---* js NA
---@param type int@ #int type
---@param mat mat4_table@ #mat4_table mat
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:loadMatrix(type,mat) end
---*  This object will be visited after the main scene is visited.<br>
---* This object MUST implement the "visit" function.<br>
---* Useful to hook a notification object, like Notifications (http:github.com/manucorporat/CCNotifications)<br>
---* since v0.99.5
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Director:getNotificationNode() end
---*  Returns the size of the OpenGL view in points. 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Director:getWinSize() end
---* 
---@return cc.TextureCache@ TextureCache#TextureCache ret (return value: cc.TextureCache)
function Director:getTextureCache() end
---*  Whether or not the replaced scene will receive the cleanup message.<br>
---* If the new scene is pushed, then the old scene won't receive the "cleanup" message.<br>
---* If the new scene replaces the old one, the it will receive the "cleanup" message.<br>
---* since v0.99.0
---@return boolean@ bool#bool ret (return value: bool)
function Director:isSendCleanupToScene() end
---*  Returns visible origin coordinate of the OpenGL view in points. 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Director:getVisibleOrigin() end
---@param dt float@ #float dt
---@return cc.Director@ Director#Director self (return value: cc.Director)
---@overload fun(dt:float):cc.Director
---@overload fun():cc.Director
function Director:mainLoop(dt) end
---*  Enables/disables OpenGL depth test. 
---@param on boolean@ #bool on
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setDepthTest(on) end
---* Gets Frame Rate.<br>
---* js NA
---@return float@ float#float ret (return value: float)
function Director:getFrameRate() end
---*  Get seconds per frame. 
---@return float@ float#float ret (return value: float)
function Director:getSecondsPerFrame() end
---* Clear all types of matrix stack, and add identity matrix to these matrix stacks.<br>
---* js NA
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:resetMatrixStack() end
---* Converts an OpenGL coordinate to a screen coordinate.<br>
---* Useful to convert node points to window points for calls such as glScissor.
---@param point vec2_table@ #vec2_table point
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Director:convertToUI(point) end
---* Clones a specified type matrix and put it to the top of specified type of matrix stack.<br>
---* js NA
---@param type int@ #int type
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:pushMatrix(type) end
---*  Sets the default values based on the Configuration info. 
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setDefaultValues() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Director:init() end
---*  Sets the Scheduler associated with this director.<br>
---* since v2.0
---@param scheduler cc.Scheduler@ #cc.Scheduler scheduler
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setScheduler(scheduler) end
---* Multiplies a matrix to the top of projection matrix stack.<br>
---* param mat The matrix that to be multiplied.<br>
---* param index The index of projection matrix stack.<br>
---* js NA
---@param mat mat4_table@ #mat4_table mat
---@param index unsigned_int@ #unsigned int index
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:multiplyProjectionMatrix(mat,index) end
---* Gets the top matrix of specified type of matrix stack.<br>
---* js NA
---@param type int@ #int type
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Director:getMatrix(type) end
---* returns whether or not the Director is in a valid state
---@return boolean@ bool#bool ret (return value: bool)
function Director:isValid() end
---*  The main loop is triggered again.<br>
---* Call this function only if [stopAnimation] was called earlier.<br>
---* warning Don't call this function to start the main loop. To run the main loop call runWithScene.
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:startAnimation() end
---* Get the GLView.<br>
---* lua NA
---@return cc.GLView@ GLView#GLView ret (return value: cc.GLView)
function Director:getOpenGLView() end
---*  Gets current running Scene. Director can only run one Scene at a time. 
---@return cc.Scene@ Scene#Scene ret (return value: cc.Scene)
function Director:getRunningScene() end
---*  Sets the glViewport.
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setViewport() end
---*  Stops the animation. Nothing will be drawn. The main loop won't be triggered anymore.<br>
---* If you don't want to pause your animation call [pause] instead.
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:stopAnimation() end
---*  Pops out all scenes from the stack until it reaches `level`.<br>
---* If level is 0, it will end the director.<br>
---* If level is 1, it will pop all scenes until it reaches to root scene.<br>
---* If level is <= than the current stack level, it won't do anything.
---@param level int@ #int level
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:popToSceneStackLevel(level) end
---*  Resumes the paused scene.<br>
---* The scheduled timers will be activated again.<br>
---* The "delta time" will be 0 (as if the game wasn't paused).
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:resume() end
---*  Whether or not `_nextDeltaTimeZero` is set to 0. 
---@return boolean@ bool#bool ret (return value: bool)
function Director:isNextDeltaTimeZero() end
---*  Sets clear values for the color buffers,<br>
---* value range of each element is [0.0, 1.0].<br>
---* js NA
---@param clearColor color4f_table@ #color4f_table clearColor
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setClearColor(clearColor) end
---*  Ends the execution, releases the running scene.<br>
---* lua endToLua
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:endToLua() end
---* Sets the GLView. <br>
---* lua NA
---@param openGLView cc.GLView@ #cc.GLView openGLView
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setOpenGLView(openGLView) end
---* Converts a screen coordinate to an OpenGL coordinate.<br>
---* Useful to convert (multi) touch coordinates to the current layout (portrait or landscape).
---@param point vec2_table@ #vec2_table point
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Director:convertToGL(point) end
---*  Removes all cocos2d cached data.<br>
---* It will purge the TextureCache, SpriteFrameCache, LabelBMFont cache<br>
---* since v0.99.3
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:purgeCachedData() end
---*  How many frames were called since the director started 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Director:getTotalFrames() end
---* Enters the Director's main loop with the given Scene.<br>
---* Call it to run only your FIRST scene.<br>
---* Don't call it if there is already a running scene.<br>
---* It will call pushScene: and then it will call startAnimation<br>
---* js NA
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:runWithScene(scene) end
---* Sets the notification node.<br>
---* see Director::getNotificationNode()
---@param node cc.Node@ #cc.Node node
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setNotificationNode(node) end
---*  Draw the scene.<br>
---* This method is called every frame. Don't call it manually.
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:drawScene() end
---* 
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:restart() end
---* Pops out a scene from the stack.<br>
---* This scene will replace the running one.<br>
---* The running scene will be deleted. If there are no more scenes in the stack the execution is terminated.<br>
---* ONLY call it if there is a running scene.
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:popScene() end
---*  Adds an identity matrix to the top of specified type of matrix stack.<br>
---* js NA
---@param type int@ #int type
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:loadIdentityMatrix(type) end
---*  Whether or not displaying the FPS on the bottom-left corner of the screen. 
---@return boolean@ bool#bool ret (return value: bool)
function Director:isDisplayStats() end
---*  Sets OpenGL projection. 
---@param projection int@ #int projection
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setProjection(projection) end
---*  Returns the Console associated with this director.<br>
---* since v3.0<br>
---* js NA
---@return cc.Console@ Console#Console ret (return value: cc.Console)
function Director:getConsole() end
---* Multiplies a matrix to the top of specified type of matrix stack.<br>
---* param type Matrix type.<br>
---* param mat The matrix that to be multiplied.<br>
---* js NA
---@param type int@ #int type
---@param mat mat4_table@ #mat4_table mat
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:multiplyMatrix(type,mat) end
---* Gets the distance between camera and near clipping frame.<br>
---* It is correct for default camera that near clipping frame is same as the screen.
---@return float@ float#float ret (return value: float)
function Director:getZEye() end
---* Sets the delta time between current frame and next frame is 0.<br>
---* This value will be used in Schedule, and will affect all functions that are using frame delta time, such as Actions.<br>
---* This value will take effect only one time.
---@param nextDeltaTimeZero boolean@ #bool nextDeltaTimeZero
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setNextDeltaTimeZero(nextDeltaTimeZero) end
---*  Pops the top matrix of the specified type of matrix stack.<br>
---* js NA
---@param type int@ #int type
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:popMatrix(type) end
---* Returns visible size of the OpenGL view in points.<br>
---* The value is equal to `Director::getWinSize()` if don't invoke `GLView::setDesignResolutionSize()`.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Director:getVisibleSize() end
---* Adds a matrix to the top of projection matrix stack.<br>
---* param mat The matrix that to be added.<br>
---* param index The index of projection matrix stack.<br>
---* js NA
---@param mat mat4_table@ #mat4_table mat
---@param index unsigned_int@ #unsigned int index
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:loadProjectionMatrix(mat,index) end
---* Init the projection matrix stack.<br>
---* param stackCount The size of projection matrix stack.<br>
---* js NA
---@param stackCount unsigned_int@ #unsigned int stackCount
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:initProjectionMatrixStack(stackCount) end
---*  Gets the Scheduler associated with this director.<br>
---* since v2.0
---@return cc.Scheduler@ Scheduler#Scheduler ret (return value: cc.Scheduler)
function Director:getScheduler() end
---* Suspends the execution of the running scene, pushing it on the stack of suspended scenes.<br>
---* The new scene will be executed.<br>
---* Try to avoid big stacks of pushed scenes to reduce memory allocation. <br>
---* ONLY call it if there is a running scene.
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:pushScene(scene) end
---*  Gets the FPS value. 
---@return float@ float#float ret (return value: float)
function Director:getAnimationInterval() end
---*  Gets clear values for the color buffers.<br>
---* js NA
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function Director:getClearColor() end
---*  Whether or not the Director is paused. 
---@return boolean@ bool#bool ret (return value: bool)
function Director:isPaused() end
---*  Display the FPS on the bottom-left corner of the screen. 
---@param displayStats boolean@ #bool displayStats
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setDisplayStats(displayStats) end
---*  Gets the EventDispatcher associated with this director.<br>
---* since v3.0<br>
---* js NA
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher ret (return value: cc.EventDispatcher)
function Director:getEventDispatcher() end
---*  Replaces the running scene with a new one. The running scene is terminated.<br>
---* ONLY call it if there is a running scene.<br>
---* js NA
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:replaceScene(scene) end
---*  Sets the FPS value. FPS = 1/interval. 
---@param interval float@ #float interval
---@return cc.Director@ Director#Director self (return value: cc.Director)
function Director:setAnimationInterval(interval) end
---*  Gets the ActionManager associated with this director.<br>
---* since v2.0
---@return cc.ActionManager@ ActionManager#ActionManager ret (return value: cc.ActionManager)
function Director:getActionManager() end
---* Returns a shared instance of the director. <br>
---* js _getInstance
---@return cc.Director@ Director#Director ret (return value: cc.Director)
function Director:getInstance() end


---@class ccs.DisplayData :  Ref
local DisplayData={ }
---@class DisplayData : ccs.DisplayData
ccs.DisplayData=DisplayData


---* 
---@param displayData ccs.DisplayData@ #ccs.DisplayData displayData
---@return ccs.DisplayData@ DisplayData#DisplayData self (return value: ccs.DisplayData)
function DisplayData:copy(displayData) end
---* 
---@param displayName string@ #string displayName
---@return string@ string#string ret (return value: string)
function DisplayData:changeDisplayToTexture(displayName) end
---* 
---@return ccs.DisplayData@ DisplayData#DisplayData ret (return value: ccs.DisplayData)
function DisplayData:create() end
---* js ctor
---@return ccs.DisplayData@ DisplayData#DisplayData self (return value: ccs.DisplayData)
function DisplayData:DisplayData() end


---@class ccs.DisplayManager :  Ref
local DisplayManager={ }
---@class DisplayManager : ccs.DisplayManager
ccs.DisplayManager=DisplayManager


---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function DisplayManager:getDisplayRenderNode() end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function DisplayManager:getAnchorPointInPoints() end
---* 
---@return int@ int#int ret (return value: int)
function DisplayManager:getDisplayRenderNodeType() end
---* 
---@param index int@ #int index
---@return ccs.DisplayManager@ DisplayManager#DisplayManager self (return value: ccs.DisplayManager)
function DisplayManager:removeDisplay(index) end
---* 
---@param force boolean@ #bool force
---@return ccs.DisplayManager@ DisplayManager#DisplayManager self (return value: ccs.DisplayManager)
function DisplayManager:setForceChangeDisplay(force) end
---* 
---@param bone ccs.Bone@ #ccs.Bone bone
---@return boolean@ bool#bool ret (return value: bool)
function DisplayManager:init(bone) end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function DisplayManager:getContentSize() end
---* 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function DisplayManager:getBoundingBox() end
---@param displayData ccs.DisplayData@ #ccs.DisplayData displayData
---@param index int@ #int index
---@return ccs.DisplayManager@ DisplayManager#DisplayManager self (return value: ccs.DisplayManager)
---@overload fun(unkown0:cc.Node,index:int):ccs.DisplayManager
---@overload fun(displayData:ccs.DisplayData,index:int):ccs.DisplayManager
function DisplayManager:addDisplay(displayData,index) end
---@param x float@ #float x
---@param y float@ #float y
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(x:float,y:float):boolean
---@overload fun(unkown0:vec2_table):boolean
function DisplayManager:containPoint(x,y) end
---* Change display by index. You can just use this method to change display in the display list.<br>
---* The display list is just used for this bone, and it is the displays you may use in every frame.<br>
---* Note : if index is the same with prev index, the method will not effect<br>
---* param index The index of the display you want to change<br>
---* param force If true, then force change display to specified display, or current display will set to  display index edit in the flash every key frame.
---@param index int@ #int index
---@param force boolean@ #bool force
---@return ccs.DisplayManager@ DisplayManager#DisplayManager self (return value: ccs.DisplayManager)
function DisplayManager:changeDisplayWithIndex(index,force) end
---* 
---@param name string@ #string name
---@param force boolean@ #bool force
---@return ccs.DisplayManager@ DisplayManager#DisplayManager self (return value: ccs.DisplayManager)
function DisplayManager:changeDisplayWithName(name,force) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function DisplayManager:isForceChangeDisplay() end
---* 
---@return int@ int#int ret (return value: int)
function DisplayManager:getCurrentDisplayIndex() end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function DisplayManager:getAnchorPoint() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function DisplayManager:getDecorativeDisplayList() end
---* Determines if the display is visible<br>
---* see setVisible(bool)<br>
---* return true if the node is visible, false if the node is hidden.
---@return boolean@ bool#bool ret (return value: bool)
function DisplayManager:isVisible() end
---* Sets whether the display is visible<br>
---* The default value is true, a node is default to visible<br>
---* param visible   true if the node is visible, false if the node is hidden.
---@param visible boolean@ #bool visible
---@return ccs.DisplayManager@ DisplayManager#DisplayManager self (return value: ccs.DisplayManager)
function DisplayManager:setVisible(visible) end
---* 
---@param bone ccs.Bone@ #ccs.Bone bone
---@return ccs.DisplayManager@ DisplayManager#DisplayManager ret (return value: ccs.DisplayManager)
function DisplayManager:create(bone) end
---* 
---@return ccs.DisplayManager@ DisplayManager#DisplayManager self (return value: ccs.DisplayManager)
function DisplayManager:DisplayManager() end


---@class cc.DrawNode :  Node
local DrawNode={ }
---@class DrawNode : cc.DrawNode
cc.DrawNode=DrawNode


---*  Draw an line from origin to destination with color. <br>
---* param origin The line origin.<br>
---* param destination The line destination.<br>
---* param color The line color.<br>
---* js NA
---@param origin vec2_table@ #vec2_table origin
---@param destination vec2_table@ #vec2_table destination
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawLine(origin,destination,color) end
---* When isolated is set, the position of the node is no longer affected by parent nodes.<br>
---* Which means it will be drawn just like a root node.
---@param isolated boolean@ #bool isolated
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:setIsolated(isolated) end
---@param p1 vec2_table@ #vec2_table p1
---@param p2 vec2_table@ #vec2_table p2
---@param p3 vec2_table@ #vec2_table p3
---@param p4 vec2_table@ #vec2_table p4
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
---@overload fun(p1:vec2_table,p2:vec2_table,p3:vec2_table,p4:vec2_table,color:color4f_table):cc.DrawNode
---@overload fun(p1:vec2_table,p2:vec2_table,unkown2:color4f_table):cc.DrawNode
function DrawNode:drawRect(p1,p2,p3,p4,color) end
---@param center vec2_table@ #vec2_table center
---@param radius float@ #float radius
---@param angle float@ #float angle
---@param segments unsigned_int@ #unsigned int segments
---@param scaleX float@ #float scaleX
---@param scaleY float@ #float scaleY
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
---@overload fun(center:vec2_table,radius:float,angle:float,segments:unsigned_int,unkown4:color4f_table):cc.DrawNode
---@overload fun(center:vec2_table,radius:float,angle:float,segments:unsigned_int,scaleX:float,scaleY:float,color:color4f_table):cc.DrawNode
function DrawNode:drawSolidCircle(center,radius,angle,segments,scaleX,scaleY,color) end
---* 
---@param lineWidth float@ #float lineWidth
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:setLineWidth(lineWidth) end
---* js NA
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:onDrawGLPoint(transform,flags) end
---*  draw a dot at a position, with a given radius and color. <br>
---* param pos The dot center.<br>
---* param radius The dot radius.<br>
---* param color The dot color.
---@param pos vec2_table@ #vec2_table pos
---@param radius float@ #float radius
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawDot(pos,radius,color) end
---*  draw a segment with a radius and color. <br>
---* param from The segment origin.<br>
---* param to The segment destination.<br>
---* param radius The segment radius.<br>
---* param color The segment color.
---@param from vec2_table@ #vec2_table from
---@param to vec2_table@ #vec2_table to
---@param radius float@ #float radius
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawSegment(from,to,radius,color) end
---*  Get the color mixed mode.<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function DrawNode:getBlendFunc() end
---* js NA
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:onDraw(transform,flags) end
---@param center vec2_table@ #vec2_table center
---@param radius float@ #float radius
---@param angle float@ #float angle
---@param segments unsigned_int@ #unsigned int segments
---@param drawLineToCenter boolean@ #bool drawLineToCenter
---@param scaleX float@ #float scaleX
---@param scaleY float@ #float scaleY
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
---@overload fun(center:vec2_table,radius:float,angle:float,segments:unsigned_int,drawLineToCenter:boolean,unkown5:color4f_table):cc.DrawNode
---@overload fun(center:vec2_table,radius:float,angle:float,segments:unsigned_int,drawLineToCenter:boolean,scaleX:float,scaleY:float,color:color4f_table):cc.DrawNode
function DrawNode:drawCircle(center,radius,angle,segments,drawLineToCenter,scaleX,scaleY,color) end
---*  Draws a quad bezier path.<br>
---* param origin The origin of the bezier path.<br>
---* param control The control of the bezier path.<br>
---* param destination The destination of the bezier path.<br>
---* param segments The number of segments.<br>
---* param color Set the quad bezier color.
---@param origin vec2_table@ #vec2_table origin
---@param control vec2_table@ #vec2_table control
---@param destination vec2_table@ #vec2_table destination
---@param segments unsigned_int@ #unsigned int segments
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawQuadBezier(origin,control,destination,segments,color) end
---* js NA
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:onDrawGLLine(transform,flags) end
---*  draw a triangle with color. <br>
---* param p1 The triangle vertex point.<br>
---* param p2 The triangle vertex point.<br>
---* param p3 The triangle vertex point.<br>
---* param color The triangle color.<br>
---* js NA
---@param p1 vec2_table@ #vec2_table p1
---@param p2 vec2_table@ #vec2_table p2
---@param p3 vec2_table@ #vec2_table p3
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawTriangle(p1,p2,p3,color) end
---*  Set the color mixed mode.<br>
---* code<br>
---* When this function bound into js or lua,the parameter will be changed<br>
---* In js: var setBlendFunc(var src, var dst)<br>
---* endcode<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:setBlendFunc(blendFunc) end
---*  Clear the geometry in the node's buffer. 
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:clear() end
---*  Draws a solid rectangle given the origin and destination point measured in points.<br>
---* The origin and the destination can not have the same x and y coordinate.<br>
---* param origin The rectangle origin.<br>
---* param destination The rectangle destination.<br>
---* param color The rectangle color.<br>
---* js NA
---@param origin vec2_table@ #vec2_table origin
---@param destination vec2_table@ #vec2_table destination
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawSolidRect(origin,destination,color) end
---* 
---@return float@ float#float ret (return value: float)
function DrawNode:getLineWidth() end
---*  Draw a point.<br>
---* param point A Vec2 used to point.<br>
---* param pointSize The point size.<br>
---* param color The point color.<br>
---* js NA
---@param point vec2_table@ #vec2_table point
---@param pointSize float@ #float pointSize
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawPoint(point,pointSize,color) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function DrawNode:isIsolated() end
---*  Draw a cubic bezier curve with color and number of segments<br>
---* param origin The origin of the bezier path.<br>
---* param control1 The first control of the bezier path.<br>
---* param control2 The second control of the bezier path.<br>
---* param destination The destination of the bezier path.<br>
---* param segments The number of segments.<br>
---* param color Set the cubic bezier color.
---@param origin vec2_table@ #vec2_table origin
---@param control1 vec2_table@ #vec2_table control1
---@param control2 vec2_table@ #vec2_table control2
---@param destination vec2_table@ #vec2_table destination
---@param segments unsigned_int@ #unsigned int segments
---@param color color4f_table@ #color4f_table color
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:drawCubicBezier(origin,control1,control2,destination,segments,color) end
---*  creates and initialize a DrawNode node.<br>
---* return Return an autorelease object.
---@return cc.DrawNode@ DrawNode#DrawNode ret (return value: cc.DrawNode)
function DrawNode:create() end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:draw(renderer,transform,flags) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:visit(renderer,parentTransform,parentFlags) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function DrawNode:init() end
---* 
---@return cc.DrawNode@ DrawNode#DrawNode self (return value: cc.DrawNode)
function DrawNode:DrawNode() end


---@class cc.EaseBackIn :  ActionEase
local EaseBackIn={ }
---@class EaseBackIn : cc.EaseBackIn
cc.EaseBackIn=EaseBackIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseBackIn@ EaseBackIn#EaseBackIn ret (return value: cc.EaseBackIn)
function EaseBackIn:create(action) end
---* 
---@return cc.EaseBackIn@ EaseBackIn#EaseBackIn ret (return value: cc.EaseBackIn)
function EaseBackIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseBackIn@ EaseBackIn#EaseBackIn self (return value: cc.EaseBackIn)
function EaseBackIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseBackIn:reverse() end
---* 
---@return cc.EaseBackIn@ EaseBackIn#EaseBackIn self (return value: cc.EaseBackIn)
function EaseBackIn:EaseBackIn() end


---@class cc.EaseBackInOut :  ActionEase
local EaseBackInOut={ }
---@class EaseBackInOut : cc.EaseBackInOut
cc.EaseBackInOut=EaseBackInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseBackInOut@ EaseBackInOut#EaseBackInOut ret (return value: cc.EaseBackInOut)
function EaseBackInOut:create(action) end
---* 
---@return cc.EaseBackInOut@ EaseBackInOut#EaseBackInOut ret (return value: cc.EaseBackInOut)
function EaseBackInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseBackInOut@ EaseBackInOut#EaseBackInOut self (return value: cc.EaseBackInOut)
function EaseBackInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseBackInOut:reverse() end
---* 
---@return cc.EaseBackInOut@ EaseBackInOut#EaseBackInOut self (return value: cc.EaseBackInOut)
function EaseBackInOut:EaseBackInOut() end


---@class cc.EaseBackOut :  ActionEase
local EaseBackOut={ }
---@class EaseBackOut : cc.EaseBackOut
cc.EaseBackOut=EaseBackOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseBackOut@ EaseBackOut#EaseBackOut ret (return value: cc.EaseBackOut)
function EaseBackOut:create(action) end
---* 
---@return cc.EaseBackOut@ EaseBackOut#EaseBackOut ret (return value: cc.EaseBackOut)
function EaseBackOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseBackOut@ EaseBackOut#EaseBackOut self (return value: cc.EaseBackOut)
function EaseBackOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseBackOut:reverse() end
---* 
---@return cc.EaseBackOut@ EaseBackOut#EaseBackOut self (return value: cc.EaseBackOut)
function EaseBackOut:EaseBackOut() end


---@class cc.EaseBezierAction :  ActionEase
local EaseBezierAction={ }
---@class EaseBezierAction : cc.EaseBezierAction
cc.EaseBezierAction=EaseBezierAction


---* brief Set the bezier parameters.
---@param p0 float@ #float p0
---@param p1 float@ #float p1
---@param p2 float@ #float p2
---@param p3 float@ #float p3
---@return cc.EaseBezierAction@ EaseBezierAction#EaseBezierAction self (return value: cc.EaseBezierAction)
function EaseBezierAction:setBezierParamer(p0,p1,p2,p3) end
---* brief Create the action with the inner action.<br>
---* param action The pointer of the inner action.<br>
---* return A pointer of EaseBezierAction action. If creation failed, return nil.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseBezierAction@ EaseBezierAction#EaseBezierAction ret (return value: cc.EaseBezierAction)
function EaseBezierAction:create(action) end
---* 
---@return cc.EaseBezierAction@ EaseBezierAction#EaseBezierAction ret (return value: cc.EaseBezierAction)
function EaseBezierAction:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseBezierAction@ EaseBezierAction#EaseBezierAction self (return value: cc.EaseBezierAction)
function EaseBezierAction:update(time) end
---* 
---@return cc.EaseBezierAction@ EaseBezierAction#EaseBezierAction ret (return value: cc.EaseBezierAction)
function EaseBezierAction:reverse() end
---* 
---@return cc.EaseBezierAction@ EaseBezierAction#EaseBezierAction self (return value: cc.EaseBezierAction)
function EaseBezierAction:EaseBezierAction() end


---@class cc.EaseBounce :  ActionEase
local EaseBounce={ }
---@class EaseBounce : cc.EaseBounce
cc.EaseBounce=EaseBounce





---@class cc.EaseBounceIn :  ActionEase
local EaseBounceIn={ }
---@class EaseBounceIn : cc.EaseBounceIn
cc.EaseBounceIn=EaseBounceIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseBounceIn@ EaseBounceIn#EaseBounceIn ret (return value: cc.EaseBounceIn)
function EaseBounceIn:create(action) end
---* 
---@return cc.EaseBounceIn@ EaseBounceIn#EaseBounceIn ret (return value: cc.EaseBounceIn)
function EaseBounceIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseBounceIn@ EaseBounceIn#EaseBounceIn self (return value: cc.EaseBounceIn)
function EaseBounceIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseBounceIn:reverse() end
---* 
---@return cc.EaseBounceIn@ EaseBounceIn#EaseBounceIn self (return value: cc.EaseBounceIn)
function EaseBounceIn:EaseBounceIn() end


---@class cc.EaseBounceInOut :  ActionEase
local EaseBounceInOut={ }
---@class EaseBounceInOut : cc.EaseBounceInOut
cc.EaseBounceInOut=EaseBounceInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseBounceInOut@ EaseBounceInOut#EaseBounceInOut ret (return value: cc.EaseBounceInOut)
function EaseBounceInOut:create(action) end
---* 
---@return cc.EaseBounceInOut@ EaseBounceInOut#EaseBounceInOut ret (return value: cc.EaseBounceInOut)
function EaseBounceInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseBounceInOut@ EaseBounceInOut#EaseBounceInOut self (return value: cc.EaseBounceInOut)
function EaseBounceInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseBounceInOut:reverse() end
---* 
---@return cc.EaseBounceInOut@ EaseBounceInOut#EaseBounceInOut self (return value: cc.EaseBounceInOut)
function EaseBounceInOut:EaseBounceInOut() end


---@class cc.EaseBounceOut :  ActionEase
local EaseBounceOut={ }
---@class EaseBounceOut : cc.EaseBounceOut
cc.EaseBounceOut=EaseBounceOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseBounceOut@ EaseBounceOut#EaseBounceOut ret (return value: cc.EaseBounceOut)
function EaseBounceOut:create(action) end
---* 
---@return cc.EaseBounceOut@ EaseBounceOut#EaseBounceOut ret (return value: cc.EaseBounceOut)
function EaseBounceOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseBounceOut@ EaseBounceOut#EaseBounceOut self (return value: cc.EaseBounceOut)
function EaseBounceOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseBounceOut:reverse() end
---* 
---@return cc.EaseBounceOut@ EaseBounceOut#EaseBounceOut self (return value: cc.EaseBounceOut)
function EaseBounceOut:EaseBounceOut() end


---@class cc.EaseCircleActionIn :  ActionEase
local EaseCircleActionIn={ }
---@class EaseCircleActionIn : cc.EaseCircleActionIn
cc.EaseCircleActionIn=EaseCircleActionIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseCircleActionIn@ EaseCircleActionIn#EaseCircleActionIn ret (return value: cc.EaseCircleActionIn)
function EaseCircleActionIn:create(action) end
---* 
---@return cc.EaseCircleActionIn@ EaseCircleActionIn#EaseCircleActionIn ret (return value: cc.EaseCircleActionIn)
function EaseCircleActionIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseCircleActionIn@ EaseCircleActionIn#EaseCircleActionIn self (return value: cc.EaseCircleActionIn)
function EaseCircleActionIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseCircleActionIn:reverse() end
---* 
---@return cc.EaseCircleActionIn@ EaseCircleActionIn#EaseCircleActionIn self (return value: cc.EaseCircleActionIn)
function EaseCircleActionIn:EaseCircleActionIn() end


---@class cc.EaseCircleActionInOut :  ActionEase
local EaseCircleActionInOut={ }
---@class EaseCircleActionInOut : cc.EaseCircleActionInOut
cc.EaseCircleActionInOut=EaseCircleActionInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseCircleActionInOut@ EaseCircleActionInOut#EaseCircleActionInOut ret (return value: cc.EaseCircleActionInOut)
function EaseCircleActionInOut:create(action) end
---* 
---@return cc.EaseCircleActionInOut@ EaseCircleActionInOut#EaseCircleActionInOut ret (return value: cc.EaseCircleActionInOut)
function EaseCircleActionInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseCircleActionInOut@ EaseCircleActionInOut#EaseCircleActionInOut self (return value: cc.EaseCircleActionInOut)
function EaseCircleActionInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseCircleActionInOut:reverse() end
---* 
---@return cc.EaseCircleActionInOut@ EaseCircleActionInOut#EaseCircleActionInOut self (return value: cc.EaseCircleActionInOut)
function EaseCircleActionInOut:EaseCircleActionInOut() end


---@class cc.EaseCircleActionOut :  ActionEase
local EaseCircleActionOut={ }
---@class EaseCircleActionOut : cc.EaseCircleActionOut
cc.EaseCircleActionOut=EaseCircleActionOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseCircleActionOut@ EaseCircleActionOut#EaseCircleActionOut ret (return value: cc.EaseCircleActionOut)
function EaseCircleActionOut:create(action) end
---* 
---@return cc.EaseCircleActionOut@ EaseCircleActionOut#EaseCircleActionOut ret (return value: cc.EaseCircleActionOut)
function EaseCircleActionOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseCircleActionOut@ EaseCircleActionOut#EaseCircleActionOut self (return value: cc.EaseCircleActionOut)
function EaseCircleActionOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseCircleActionOut:reverse() end
---* 
---@return cc.EaseCircleActionOut@ EaseCircleActionOut#EaseCircleActionOut self (return value: cc.EaseCircleActionOut)
function EaseCircleActionOut:EaseCircleActionOut() end


---@class cc.EaseCubicActionIn :  ActionEase
local EaseCubicActionIn={ }
---@class EaseCubicActionIn : cc.EaseCubicActionIn
cc.EaseCubicActionIn=EaseCubicActionIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseCubicActionIn@ EaseCubicActionIn#EaseCubicActionIn ret (return value: cc.EaseCubicActionIn)
function EaseCubicActionIn:create(action) end
---* 
---@return cc.EaseCubicActionIn@ EaseCubicActionIn#EaseCubicActionIn ret (return value: cc.EaseCubicActionIn)
function EaseCubicActionIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseCubicActionIn@ EaseCubicActionIn#EaseCubicActionIn self (return value: cc.EaseCubicActionIn)
function EaseCubicActionIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseCubicActionIn:reverse() end
---* 
---@return cc.EaseCubicActionIn@ EaseCubicActionIn#EaseCubicActionIn self (return value: cc.EaseCubicActionIn)
function EaseCubicActionIn:EaseCubicActionIn() end


---@class cc.EaseCubicActionInOut :  ActionEase
local EaseCubicActionInOut={ }
---@class EaseCubicActionInOut : cc.EaseCubicActionInOut
cc.EaseCubicActionInOut=EaseCubicActionInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseCubicActionInOut@ EaseCubicActionInOut#EaseCubicActionInOut ret (return value: cc.EaseCubicActionInOut)
function EaseCubicActionInOut:create(action) end
---* 
---@return cc.EaseCubicActionInOut@ EaseCubicActionInOut#EaseCubicActionInOut ret (return value: cc.EaseCubicActionInOut)
function EaseCubicActionInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseCubicActionInOut@ EaseCubicActionInOut#EaseCubicActionInOut self (return value: cc.EaseCubicActionInOut)
function EaseCubicActionInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseCubicActionInOut:reverse() end
---* 
---@return cc.EaseCubicActionInOut@ EaseCubicActionInOut#EaseCubicActionInOut self (return value: cc.EaseCubicActionInOut)
function EaseCubicActionInOut:EaseCubicActionInOut() end


---@class cc.EaseCubicActionOut :  ActionEase
local EaseCubicActionOut={ }
---@class EaseCubicActionOut : cc.EaseCubicActionOut
cc.EaseCubicActionOut=EaseCubicActionOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseCubicActionOut@ EaseCubicActionOut#EaseCubicActionOut ret (return value: cc.EaseCubicActionOut)
function EaseCubicActionOut:create(action) end
---* 
---@return cc.EaseCubicActionOut@ EaseCubicActionOut#EaseCubicActionOut ret (return value: cc.EaseCubicActionOut)
function EaseCubicActionOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseCubicActionOut@ EaseCubicActionOut#EaseCubicActionOut self (return value: cc.EaseCubicActionOut)
function EaseCubicActionOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseCubicActionOut:reverse() end
---* 
---@return cc.EaseCubicActionOut@ EaseCubicActionOut#EaseCubicActionOut self (return value: cc.EaseCubicActionOut)
function EaseCubicActionOut:EaseCubicActionOut() end


---@class cc.EaseElastic :  ActionEase
local EaseElastic={ }
---@class EaseElastic : cc.EaseElastic
cc.EaseElastic=EaseElastic


---* brief Set period of the wave in radians.<br>
---* param fPeriod The value will be set.
---@param fPeriod float@ #float fPeriod
---@return cc.EaseElastic@ EaseElastic#EaseElastic self (return value: cc.EaseElastic)
function EaseElastic:setPeriod(fPeriod) end
---* brief Initializes the action with the inner action and the period in radians.<br>
---* param action The pointer of the inner action.<br>
---* param period Period of the wave in radians. Default is 0.3.<br>
---* return Return true when the initialization success, otherwise return false.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param period float@ #float period
---@return boolean@ bool#bool ret (return value: bool)
function EaseElastic:initWithAction(action,period) end
---* brief Get period of the wave in radians. Default value is 0.3.<br>
---* return Return the period of the wave in radians.
---@return float@ float#float ret (return value: float)
function EaseElastic:getPeriod() end


---@class cc.EaseElasticIn :  EaseElastic
local EaseElasticIn={ }
---@class EaseElasticIn : cc.EaseElasticIn
cc.EaseElasticIn=EaseElasticIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param rate float@ #float rate
---@return cc.EaseElasticIn@ EaseElasticIn#EaseElasticIn ret (return value: cc.EaseElasticIn)
function EaseElasticIn:create(action,rate) end
---* 
---@return cc.EaseElasticIn@ EaseElasticIn#EaseElasticIn ret (return value: cc.EaseElasticIn)
function EaseElasticIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseElasticIn@ EaseElasticIn#EaseElasticIn self (return value: cc.EaseElasticIn)
function EaseElasticIn:update(time) end
---* 
---@return cc.EaseElastic@ EaseElastic#EaseElastic ret (return value: cc.EaseElastic)
function EaseElasticIn:reverse() end
---* 
---@return cc.EaseElasticIn@ EaseElasticIn#EaseElasticIn self (return value: cc.EaseElasticIn)
function EaseElasticIn:EaseElasticIn() end


---@class cc.EaseElasticInOut :  EaseElastic
local EaseElasticInOut={ }
---@class EaseElasticInOut : cc.EaseElasticInOut
cc.EaseElasticInOut=EaseElasticInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param rate float@ #float rate
---@return cc.EaseElasticInOut@ EaseElasticInOut#EaseElasticInOut ret (return value: cc.EaseElasticInOut)
function EaseElasticInOut:create(action,rate) end
---* 
---@return cc.EaseElasticInOut@ EaseElasticInOut#EaseElasticInOut ret (return value: cc.EaseElasticInOut)
function EaseElasticInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseElasticInOut@ EaseElasticInOut#EaseElasticInOut self (return value: cc.EaseElasticInOut)
function EaseElasticInOut:update(time) end
---* 
---@return cc.EaseElastic@ EaseElastic#EaseElastic ret (return value: cc.EaseElastic)
function EaseElasticInOut:reverse() end
---* 
---@return cc.EaseElasticInOut@ EaseElasticInOut#EaseElasticInOut self (return value: cc.EaseElasticInOut)
function EaseElasticInOut:EaseElasticInOut() end


---@class cc.EaseElasticOut :  EaseElastic
local EaseElasticOut={ }
---@class EaseElasticOut : cc.EaseElasticOut
cc.EaseElasticOut=EaseElasticOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param rate float@ #float rate
---@return cc.EaseElasticOut@ EaseElasticOut#EaseElasticOut ret (return value: cc.EaseElasticOut)
function EaseElasticOut:create(action,rate) end
---* 
---@return cc.EaseElasticOut@ EaseElasticOut#EaseElasticOut ret (return value: cc.EaseElasticOut)
function EaseElasticOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseElasticOut@ EaseElasticOut#EaseElasticOut self (return value: cc.EaseElasticOut)
function EaseElasticOut:update(time) end
---* 
---@return cc.EaseElastic@ EaseElastic#EaseElastic ret (return value: cc.EaseElastic)
function EaseElasticOut:reverse() end
---* 
---@return cc.EaseElasticOut@ EaseElasticOut#EaseElasticOut self (return value: cc.EaseElasticOut)
function EaseElasticOut:EaseElasticOut() end


---@class cc.EaseExponentialIn :  ActionEase
local EaseExponentialIn={ }
---@class EaseExponentialIn : cc.EaseExponentialIn
cc.EaseExponentialIn=EaseExponentialIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseExponentialIn@ EaseExponentialIn#EaseExponentialIn ret (return value: cc.EaseExponentialIn)
function EaseExponentialIn:create(action) end
---* 
---@return cc.EaseExponentialIn@ EaseExponentialIn#EaseExponentialIn ret (return value: cc.EaseExponentialIn)
function EaseExponentialIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseExponentialIn@ EaseExponentialIn#EaseExponentialIn self (return value: cc.EaseExponentialIn)
function EaseExponentialIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseExponentialIn:reverse() end
---* 
---@return cc.EaseExponentialIn@ EaseExponentialIn#EaseExponentialIn self (return value: cc.EaseExponentialIn)
function EaseExponentialIn:EaseExponentialIn() end


---@class cc.EaseExponentialInOut :  ActionEase
local EaseExponentialInOut={ }
---@class EaseExponentialInOut : cc.EaseExponentialInOut
cc.EaseExponentialInOut=EaseExponentialInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseExponentialInOut@ EaseExponentialInOut#EaseExponentialInOut ret (return value: cc.EaseExponentialInOut)
function EaseExponentialInOut:create(action) end
---* 
---@return cc.EaseExponentialInOut@ EaseExponentialInOut#EaseExponentialInOut ret (return value: cc.EaseExponentialInOut)
function EaseExponentialInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseExponentialInOut@ EaseExponentialInOut#EaseExponentialInOut self (return value: cc.EaseExponentialInOut)
function EaseExponentialInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseExponentialInOut:reverse() end
---* 
---@return cc.EaseExponentialInOut@ EaseExponentialInOut#EaseExponentialInOut self (return value: cc.EaseExponentialInOut)
function EaseExponentialInOut:EaseExponentialInOut() end


---@class cc.EaseExponentialOut :  ActionEase
local EaseExponentialOut={ }
---@class EaseExponentialOut : cc.EaseExponentialOut
cc.EaseExponentialOut=EaseExponentialOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseExponentialOut@ EaseExponentialOut#EaseExponentialOut ret (return value: cc.EaseExponentialOut)
function EaseExponentialOut:create(action) end
---* 
---@return cc.EaseExponentialOut@ EaseExponentialOut#EaseExponentialOut ret (return value: cc.EaseExponentialOut)
function EaseExponentialOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseExponentialOut@ EaseExponentialOut#EaseExponentialOut self (return value: cc.EaseExponentialOut)
function EaseExponentialOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseExponentialOut:reverse() end
---* 
---@return cc.EaseExponentialOut@ EaseExponentialOut#EaseExponentialOut self (return value: cc.EaseExponentialOut)
function EaseExponentialOut:EaseExponentialOut() end


---@class cc.EaseIn :  EaseRateAction
local EaseIn={ }
---@class EaseIn : cc.EaseIn
cc.EaseIn=EaseIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param rate float@ #float rate
---@return cc.EaseIn@ EaseIn#EaseIn ret (return value: cc.EaseIn)
function EaseIn:create(action,rate) end
---* 
---@return cc.EaseIn@ EaseIn#EaseIn ret (return value: cc.EaseIn)
function EaseIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseIn@ EaseIn#EaseIn self (return value: cc.EaseIn)
function EaseIn:update(time) end
---* 
---@return cc.EaseRateAction@ EaseRateAction#EaseRateAction ret (return value: cc.EaseRateAction)
function EaseIn:reverse() end
---* 
---@return cc.EaseIn@ EaseIn#EaseIn self (return value: cc.EaseIn)
function EaseIn:EaseIn() end


---@class cc.EaseInOut :  EaseRateAction
local EaseInOut={ }
---@class EaseInOut : cc.EaseInOut
cc.EaseInOut=EaseInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param rate float@ #float rate
---@return cc.EaseInOut@ EaseInOut#EaseInOut ret (return value: cc.EaseInOut)
function EaseInOut:create(action,rate) end
---* 
---@return cc.EaseInOut@ EaseInOut#EaseInOut ret (return value: cc.EaseInOut)
function EaseInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseInOut@ EaseInOut#EaseInOut self (return value: cc.EaseInOut)
function EaseInOut:update(time) end
---* 
---@return cc.EaseRateAction@ EaseRateAction#EaseRateAction ret (return value: cc.EaseRateAction)
function EaseInOut:reverse() end
---* 
---@return cc.EaseInOut@ EaseInOut#EaseInOut self (return value: cc.EaseInOut)
function EaseInOut:EaseInOut() end


---@class cc.EaseOut :  EaseRateAction
local EaseOut={ }
---@class EaseOut : cc.EaseOut
cc.EaseOut=EaseOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param rate float@ #float rate
---@return cc.EaseOut@ EaseOut#EaseOut ret (return value: cc.EaseOut)
function EaseOut:create(action,rate) end
---* 
---@return cc.EaseOut@ EaseOut#EaseOut ret (return value: cc.EaseOut)
function EaseOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseOut@ EaseOut#EaseOut self (return value: cc.EaseOut)
function EaseOut:update(time) end
---* 
---@return cc.EaseRateAction@ EaseRateAction#EaseRateAction ret (return value: cc.EaseRateAction)
function EaseOut:reverse() end
---* 
---@return cc.EaseOut@ EaseOut#EaseOut self (return value: cc.EaseOut)
function EaseOut:EaseOut() end


---@class cc.EaseQuadraticActionIn :  ActionEase
local EaseQuadraticActionIn={ }
---@class EaseQuadraticActionIn : cc.EaseQuadraticActionIn
cc.EaseQuadraticActionIn=EaseQuadraticActionIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuadraticActionIn@ EaseQuadraticActionIn#EaseQuadraticActionIn ret (return value: cc.EaseQuadraticActionIn)
function EaseQuadraticActionIn:create(action) end
---* 
---@return cc.EaseQuadraticActionIn@ EaseQuadraticActionIn#EaseQuadraticActionIn ret (return value: cc.EaseQuadraticActionIn)
function EaseQuadraticActionIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuadraticActionIn@ EaseQuadraticActionIn#EaseQuadraticActionIn self (return value: cc.EaseQuadraticActionIn)
function EaseQuadraticActionIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuadraticActionIn:reverse() end
---* 
---@return cc.EaseQuadraticActionIn@ EaseQuadraticActionIn#EaseQuadraticActionIn self (return value: cc.EaseQuadraticActionIn)
function EaseQuadraticActionIn:EaseQuadraticActionIn() end


---@class cc.EaseQuadraticActionInOut :  ActionEase
local EaseQuadraticActionInOut={ }
---@class EaseQuadraticActionInOut : cc.EaseQuadraticActionInOut
cc.EaseQuadraticActionInOut=EaseQuadraticActionInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuadraticActionInOut@ EaseQuadraticActionInOut#EaseQuadraticActionInOut ret (return value: cc.EaseQuadraticActionInOut)
function EaseQuadraticActionInOut:create(action) end
---* 
---@return cc.EaseQuadraticActionInOut@ EaseQuadraticActionInOut#EaseQuadraticActionInOut ret (return value: cc.EaseQuadraticActionInOut)
function EaseQuadraticActionInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuadraticActionInOut@ EaseQuadraticActionInOut#EaseQuadraticActionInOut self (return value: cc.EaseQuadraticActionInOut)
function EaseQuadraticActionInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuadraticActionInOut:reverse() end
---* 
---@return cc.EaseQuadraticActionInOut@ EaseQuadraticActionInOut#EaseQuadraticActionInOut self (return value: cc.EaseQuadraticActionInOut)
function EaseQuadraticActionInOut:EaseQuadraticActionInOut() end


---@class cc.EaseQuadraticActionOut :  ActionEase
local EaseQuadraticActionOut={ }
---@class EaseQuadraticActionOut : cc.EaseQuadraticActionOut
cc.EaseQuadraticActionOut=EaseQuadraticActionOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuadraticActionOut@ EaseQuadraticActionOut#EaseQuadraticActionOut ret (return value: cc.EaseQuadraticActionOut)
function EaseQuadraticActionOut:create(action) end
---* 
---@return cc.EaseQuadraticActionOut@ EaseQuadraticActionOut#EaseQuadraticActionOut ret (return value: cc.EaseQuadraticActionOut)
function EaseQuadraticActionOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuadraticActionOut@ EaseQuadraticActionOut#EaseQuadraticActionOut self (return value: cc.EaseQuadraticActionOut)
function EaseQuadraticActionOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuadraticActionOut:reverse() end
---* 
---@return cc.EaseQuadraticActionOut@ EaseQuadraticActionOut#EaseQuadraticActionOut self (return value: cc.EaseQuadraticActionOut)
function EaseQuadraticActionOut:EaseQuadraticActionOut() end


---@class cc.EaseQuarticActionIn :  ActionEase
local EaseQuarticActionIn={ }
---@class EaseQuarticActionIn : cc.EaseQuarticActionIn
cc.EaseQuarticActionIn=EaseQuarticActionIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuarticActionIn@ EaseQuarticActionIn#EaseQuarticActionIn ret (return value: cc.EaseQuarticActionIn)
function EaseQuarticActionIn:create(action) end
---* 
---@return cc.EaseQuarticActionIn@ EaseQuarticActionIn#EaseQuarticActionIn ret (return value: cc.EaseQuarticActionIn)
function EaseQuarticActionIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuarticActionIn@ EaseQuarticActionIn#EaseQuarticActionIn self (return value: cc.EaseQuarticActionIn)
function EaseQuarticActionIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuarticActionIn:reverse() end
---* 
---@return cc.EaseQuarticActionIn@ EaseQuarticActionIn#EaseQuarticActionIn self (return value: cc.EaseQuarticActionIn)
function EaseQuarticActionIn:EaseQuarticActionIn() end


---@class cc.EaseQuarticActionInOut :  ActionEase
local EaseQuarticActionInOut={ }
---@class EaseQuarticActionInOut : cc.EaseQuarticActionInOut
cc.EaseQuarticActionInOut=EaseQuarticActionInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuarticActionInOut@ EaseQuarticActionInOut#EaseQuarticActionInOut ret (return value: cc.EaseQuarticActionInOut)
function EaseQuarticActionInOut:create(action) end
---* 
---@return cc.EaseQuarticActionInOut@ EaseQuarticActionInOut#EaseQuarticActionInOut ret (return value: cc.EaseQuarticActionInOut)
function EaseQuarticActionInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuarticActionInOut@ EaseQuarticActionInOut#EaseQuarticActionInOut self (return value: cc.EaseQuarticActionInOut)
function EaseQuarticActionInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuarticActionInOut:reverse() end
---* 
---@return cc.EaseQuarticActionInOut@ EaseQuarticActionInOut#EaseQuarticActionInOut self (return value: cc.EaseQuarticActionInOut)
function EaseQuarticActionInOut:EaseQuarticActionInOut() end


---@class cc.EaseQuarticActionOut :  ActionEase
local EaseQuarticActionOut={ }
---@class EaseQuarticActionOut : cc.EaseQuarticActionOut
cc.EaseQuarticActionOut=EaseQuarticActionOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuarticActionOut@ EaseQuarticActionOut#EaseQuarticActionOut ret (return value: cc.EaseQuarticActionOut)
function EaseQuarticActionOut:create(action) end
---* 
---@return cc.EaseQuarticActionOut@ EaseQuarticActionOut#EaseQuarticActionOut ret (return value: cc.EaseQuarticActionOut)
function EaseQuarticActionOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuarticActionOut@ EaseQuarticActionOut#EaseQuarticActionOut self (return value: cc.EaseQuarticActionOut)
function EaseQuarticActionOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuarticActionOut:reverse() end
---* 
---@return cc.EaseQuarticActionOut@ EaseQuarticActionOut#EaseQuarticActionOut self (return value: cc.EaseQuarticActionOut)
function EaseQuarticActionOut:EaseQuarticActionOut() end


---@class cc.EaseQuinticActionIn :  ActionEase
local EaseQuinticActionIn={ }
---@class EaseQuinticActionIn : cc.EaseQuinticActionIn
cc.EaseQuinticActionIn=EaseQuinticActionIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuinticActionIn@ EaseQuinticActionIn#EaseQuinticActionIn ret (return value: cc.EaseQuinticActionIn)
function EaseQuinticActionIn:create(action) end
---* 
---@return cc.EaseQuinticActionIn@ EaseQuinticActionIn#EaseQuinticActionIn ret (return value: cc.EaseQuinticActionIn)
function EaseQuinticActionIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuinticActionIn@ EaseQuinticActionIn#EaseQuinticActionIn self (return value: cc.EaseQuinticActionIn)
function EaseQuinticActionIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuinticActionIn:reverse() end
---* 
---@return cc.EaseQuinticActionIn@ EaseQuinticActionIn#EaseQuinticActionIn self (return value: cc.EaseQuinticActionIn)
function EaseQuinticActionIn:EaseQuinticActionIn() end


---@class cc.EaseQuinticActionInOut :  ActionEase
local EaseQuinticActionInOut={ }
---@class EaseQuinticActionInOut : cc.EaseQuinticActionInOut
cc.EaseQuinticActionInOut=EaseQuinticActionInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuinticActionInOut@ EaseQuinticActionInOut#EaseQuinticActionInOut ret (return value: cc.EaseQuinticActionInOut)
function EaseQuinticActionInOut:create(action) end
---* 
---@return cc.EaseQuinticActionInOut@ EaseQuinticActionInOut#EaseQuinticActionInOut ret (return value: cc.EaseQuinticActionInOut)
function EaseQuinticActionInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuinticActionInOut@ EaseQuinticActionInOut#EaseQuinticActionInOut self (return value: cc.EaseQuinticActionInOut)
function EaseQuinticActionInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuinticActionInOut:reverse() end
---* 
---@return cc.EaseQuinticActionInOut@ EaseQuinticActionInOut#EaseQuinticActionInOut self (return value: cc.EaseQuinticActionInOut)
function EaseQuinticActionInOut:EaseQuinticActionInOut() end


---@class cc.EaseQuinticActionOut :  ActionEase
local EaseQuinticActionOut={ }
---@class EaseQuinticActionOut : cc.EaseQuinticActionOut
cc.EaseQuinticActionOut=EaseQuinticActionOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseQuinticActionOut@ EaseQuinticActionOut#EaseQuinticActionOut ret (return value: cc.EaseQuinticActionOut)
function EaseQuinticActionOut:create(action) end
---* 
---@return cc.EaseQuinticActionOut@ EaseQuinticActionOut#EaseQuinticActionOut ret (return value: cc.EaseQuinticActionOut)
function EaseQuinticActionOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseQuinticActionOut@ EaseQuinticActionOut#EaseQuinticActionOut self (return value: cc.EaseQuinticActionOut)
function EaseQuinticActionOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseQuinticActionOut:reverse() end
---* 
---@return cc.EaseQuinticActionOut@ EaseQuinticActionOut#EaseQuinticActionOut self (return value: cc.EaseQuinticActionOut)
function EaseQuinticActionOut:EaseQuinticActionOut() end


---@class cc.EaseRateAction :  ActionEase
local EaseRateAction={ }
---@class EaseRateAction : cc.EaseRateAction
cc.EaseRateAction=EaseRateAction


---* brief Set the rate value for the ease rate action.<br>
---* param rate The value will be set.
---@param rate float@ #float rate
---@return cc.EaseRateAction@ EaseRateAction#EaseRateAction self (return value: cc.EaseRateAction)
function EaseRateAction:setRate(rate) end
---* brief Initializes the action with the inner action and the rate parameter.<br>
---* param pAction The pointer of the inner action.<br>
---* param fRate The value of the rate parameter.<br>
---* return Return true when the initialization success, otherwise return false.
---@param pAction cc.ActionInterval@ #cc.ActionInterval pAction
---@param fRate float@ #float fRate
---@return boolean@ bool#bool ret (return value: bool)
function EaseRateAction:initWithAction(pAction,fRate) end
---* brief Get the rate value of the ease rate action.<br>
---* return Return the rate value of the ease rate action.
---@return float@ float#float ret (return value: float)
function EaseRateAction:getRate() end
---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param rate float@ #float rate
---@return cc.EaseRateAction@ EaseRateAction#EaseRateAction ret (return value: cc.EaseRateAction)
function EaseRateAction:create(action,rate) end


---@class cc.EaseSineIn :  ActionEase
local EaseSineIn={ }
---@class EaseSineIn : cc.EaseSineIn
cc.EaseSineIn=EaseSineIn


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseSineIn@ EaseSineIn#EaseSineIn ret (return value: cc.EaseSineIn)
function EaseSineIn:create(action) end
---* 
---@return cc.EaseSineIn@ EaseSineIn#EaseSineIn ret (return value: cc.EaseSineIn)
function EaseSineIn:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseSineIn@ EaseSineIn#EaseSineIn self (return value: cc.EaseSineIn)
function EaseSineIn:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseSineIn:reverse() end
---* 
---@return cc.EaseSineIn@ EaseSineIn#EaseSineIn self (return value: cc.EaseSineIn)
function EaseSineIn:EaseSineIn() end


---@class cc.EaseSineInOut :  ActionEase
local EaseSineInOut={ }
---@class EaseSineInOut : cc.EaseSineInOut
cc.EaseSineInOut=EaseSineInOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseSineInOut@ EaseSineInOut#EaseSineInOut ret (return value: cc.EaseSineInOut)
function EaseSineInOut:create(action) end
---* 
---@return cc.EaseSineInOut@ EaseSineInOut#EaseSineInOut ret (return value: cc.EaseSineInOut)
function EaseSineInOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseSineInOut@ EaseSineInOut#EaseSineInOut self (return value: cc.EaseSineInOut)
function EaseSineInOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseSineInOut:reverse() end
---* 
---@return cc.EaseSineInOut@ EaseSineInOut#EaseSineInOut self (return value: cc.EaseSineInOut)
function EaseSineInOut:EaseSineInOut() end


---@class cc.EaseSineOut :  ActionEase
local EaseSineOut={ }
---@class EaseSineOut : cc.EaseSineOut
cc.EaseSineOut=EaseSineOut


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.EaseSineOut@ EaseSineOut#EaseSineOut ret (return value: cc.EaseSineOut)
function EaseSineOut:create(action) end
---* 
---@return cc.EaseSineOut@ EaseSineOut#EaseSineOut ret (return value: cc.EaseSineOut)
function EaseSineOut:clone() end
---* 
---@param time float@ #float time
---@return cc.EaseSineOut@ EaseSineOut#EaseSineOut self (return value: cc.EaseSineOut)
function EaseSineOut:update(time) end
---* 
---@return cc.ActionEase@ ActionEase#ActionEase ret (return value: cc.ActionEase)
function EaseSineOut:reverse() end
---* 
---@return cc.EaseSineOut@ EaseSineOut#EaseSineOut self (return value: cc.EaseSineOut)
function EaseSineOut:EaseSineOut() end


---@class ccui.EditBox :  Widget@IMEDelegate
local EditBox={ }
---@class EditBox : ccui.EditBox
ccui.EditBox=EditBox


---* Get the font size.<br>
---* return The font size.
---@return int@ int#int ret (return value: int)
function EditBox:getFontSize() end
---* js NA<br>
---* lua NA
---@param info cc.IMEKeyboardNotificationInfo@ #cc.IMEKeyboardNotificationInfo info
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:keyboardDidShow(info) end
---* Sets the maximum input length of the edit box.<br>
---* Setting this value enables multiline input mode by default.<br>
---* Available on Android, iOS and Windows Phone.<br>
---* param maxLength The maximum length.
---@param maxLength int@ #int maxLength
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setMaxLength(maxLength) end
---* 
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:openKeyboard() end
---* Set the font size.<br>
---* param fontSize The font size.
---@param fontSize int@ #int fontSize
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setFontSize(fontSize) end
---* Get the text entered in the edit box.<br>
---* return The text entered in the edit box.
---@return char@ char#char ret (return value: char)
function EditBox:getText() end
---* Get the input mode of the edit box.<br>
---* return One of the EditBox::InputMode constants.
---@return int@ int#int ret (return value: int)
function EditBox:getInputMode() end
---@param size size_table@ #size_table size
---@param normalSprite ccui.Scale9Sprite@ #ccui.Scale9Sprite normalSprite
---@param pressedSprite ccui.Scale9Sprite@ #ccui.Scale9Sprite pressedSprite
---@param disabledSprite ccui.Scale9Sprite@ #ccui.Scale9Sprite disabledSprite
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(size:size_table,normalSprite:ccui.Scale9Sprite):boolean
---@overload fun(size:size_table,unkown1:string,unkown2:int):boolean
---@overload fun(size:size_table,normalSprite:ccui.Scale9Sprite,pressedSprite:ccui.Scale9Sprite,disabledSprite:ccui.Scale9Sprite):boolean
function EditBox:initWithSizeAndBackgroundSprite(size,normalSprite,pressedSprite,disabledSprite) end
---* Get the placeholder's font name. only system font is allowed.<br>
---* return The font name.
---@return char@ char#char ret (return value: char)
function EditBox:getPlaceholderFontName() end
---* js NA<br>
---* lua NA
---@param info cc.IMEKeyboardNotificationInfo@ #cc.IMEKeyboardNotificationInfo info
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:keyboardDidHide(info) end
---* Set the placeholder's font name. only system font is allowed.<br>
---* param pFontName The font name.
---@param pFontName char@ #char pFontName
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setPlaceholderFontName(pFontName) end
---* Get the placeholder's font size.<br>
---* return The font size.
---@return int@ int#int ret (return value: int)
function EditBox:getPlaceholderFontSize() end
---* Return the capInsets of disabled state scale9sprite.<br>
---* return The disabled scale9 renderer capInsets.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function EditBox:getCapInsetsDisabledRenderer() end
---* Get a text in the edit box that acts as a placeholder when an<br>
---* edit box is empty.
---@return char@ char#char ret (return value: char)
function EditBox:getPlaceHolder() end
---* Set the font name. Only system font is allowed.<br>
---* param pFontName The font name.
---@param pFontName char@ #char pFontName
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setFontName(pFontName) end
---* Registers a script function that will be called for EditBox events.<br>
---* This handler will be removed automatically after onExit() called.<br>
---* code<br>
---* -- lua sample<br>
---* local function editboxEventHandler(eventType)<br>
---* if eventType == "began" then<br>
---* -- triggered when an edit box gains focus after keyboard is shown<br>
---* elseif eventType == "ended" then<br>
---* -- triggered when an edit box loses focus after keyboard is hidden.<br>
---* elseif eventType == "changed" then<br>
---* -- triggered when the edit box text was changed.<br>
---* elseif eventType == "return" then<br>
---* -- triggered when the return button was pressed or the outside area of keyboard was touched.<br>
---* end<br>
---* end<br>
---* local editbox = EditBox:create(Size(...), Scale9Sprite:create(...))<br>
---* editbox = registerScriptEditBoxHandler(editboxEventHandler)<br>
---* endcode<br>
---* param handler A number that indicates a lua function.<br>
---* js NA<br>
---* lua NA
---@param handler int@ #int handler
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:registerScriptEditBoxHandler(handler) end
---* Sets capInsets for edit box, only the disabled state scale9 renderer will be affected.<br>
---* param capInsets  capInsets in Rect.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setCapInsetsDisabledRenderer(capInsets) end
---* Set the placeholder's font size.<br>
---* param fontSize The font size.
---@param fontSize int@ #int fontSize
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setPlaceholderFontSize(fontSize) end
---* Load disabled state texture for edit box.<br>
---* param disabled    dark state texture.<br>
---* param texType    @see `TextureResType`
---@param disabled string@ #string disabled
---@param texType int@ #int texType
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:loadTextureDisabled(disabled,texType) end
---* Set the input mode of the edit box.<br>
---* param inputMode One of the EditBox::InputMode constants.
---@param inputMode int@ #int inputMode
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setInputMode(inputMode) end
---* Unregisters a script function that will be called for EditBox events.<br>
---* js NA<br>
---* lua NA
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:unregisterScriptEditBoxHandler() end
---* js NA<br>
---* lua NA
---@param info cc.IMEKeyboardNotificationInfo@ #cc.IMEKeyboardNotificationInfo info
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:keyboardWillShow(info) end
---@param color color3b_table@ #color3b_table color
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
---@overload fun(unkown0:color4b_table):ccui.EditBox
---@overload fun(color:color3b_table):ccui.EditBox
function EditBox:setPlaceholderFontColor(color) end
---* Get the return type that are to be applied to the edit box.<br>
---* return One of the EditBox::KeyboardReturnType constants.
---@return int@ int#int ret (return value: int)
function EditBox:getReturnType() end
---@param color color3b_table@ #color3b_table color
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
---@overload fun(unkown0:color4b_table):ccui.EditBox
---@overload fun(color:color3b_table):ccui.EditBox
function EditBox:setFontColor(color) end
---* Get the font name.<br>
---* return The font name.
---@return char@ char#char ret (return value: char)
function EditBox:getFontName() end
---* js NA<br>
---* lua NA
---@param info cc.IMEKeyboardNotificationInfo@ #cc.IMEKeyboardNotificationInfo info
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:keyboardWillHide(info) end
---* Sets capInsets for edit box, only the normal state scale9 renderer will be affected.<br>
---* param capInsets    capInsets in Rect.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setCapInsetsNormalRenderer(capInsets) end
---* Load pressed state texture for edit box.<br>
---* param pressed    pressed state texture.<br>
---* param texType    @see `TextureResType`
---@param pressed string@ #string pressed
---@param texType int@ #int texType
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:loadTexturePressed(pressed,texType) end
---* Get the font color of the widget's text.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function EditBox:getFontColor() end
---* Get the input flags that are to be applied to the edit box.<br>
---* return One of the EditBox::InputFlag constants.
---@return int@ int#int ret (return value: int)
function EditBox:getInputFlag() end
---* Init edit box with specified size. This method should be invoked right after constructor.<br>
---* param size The size of edit box.<br>
---* param normalImage  normal state texture name.<br>
---* param pressedImage  pressed state texture name.<br>
---* param disabledImage  disabled state texture name.<br>
---* return Whether initialization is successfully or not.
---@param size size_table@ #size_table size
---@param normalImage string@ #string normalImage
---@param pressedImage string@ #string pressedImage
---@param disabledImage string@ #string disabledImage
---@param texType int@ #int texType
---@return boolean@ bool#bool ret (return value: bool)
function EditBox:initWithSizeAndTexture(size,normalImage,pressedImage,disabledImage,texType) end
---* Get the text horizontal alignment.
---@return int@ int#int ret (return value: int)
function EditBox:getTextHorizontalAlignment() end
---* Return the capInsets of normal state scale9sprite.<br>
---* return The normal scale9 renderer capInsets.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function EditBox:getCapInsetsNormalRenderer() end
---* Return the capInsets of pressed state scale9sprite.<br>
---* return The pressed scale9 renderer capInsets.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function EditBox:getCapInsetsPressedRenderer() end
---* get a script Handler<br>
---* js NA<br>
---* lua NA
---@return int@ int#int ret (return value: int)
function EditBox:getScriptEditBoxHandler() end
---* Load textures for edit box.<br>
---* param normal    normal state texture name.<br>
---* param pressed    pressed state texture name.<br>
---* param disabled    disabled state texture name.<br>
---* param texType    @see `TextureResType`
---@param normal string@ #string normal
---@param pressed string@ #string pressed
---@param disabled string@ #string disabled
---@param texType int@ #int texType
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:loadTextures(normal,pressed,disabled,texType) end
---* Set a text in the edit box that acts as a placeholder when an<br>
---* edit box is empty.<br>
---* param pText The given text.
---@param pText char@ #char pText
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setPlaceHolder(pText) end
---* Set the input flags that are to be applied to the edit box.<br>
---* param inputFlag One of the EditBox::InputFlag constants.
---@param inputFlag int@ #int inputFlag
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setInputFlag(inputFlag) end
---* Set the return type that are to be applied to the edit box.<br>
---* param returnType One of the EditBox::KeyboardReturnType constants.
---@param returnType int@ #int returnType
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setReturnType(returnType) end
---* Load normal state texture for edit box.<br>
---* param normal    normal state texture.<br>
---* param texType    @see `TextureResType`
---@param normal string@ #string normal
---@param texType int@ #int texType
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:loadTextureNormal(normal,texType) end
---* Gets the maximum input length of the edit box.<br>
---* return Maximum input length.
---@return int@ int#int ret (return value: int)
function EditBox:getMaxLength() end
---* Sets capInsets for edit box, only the pressed state scale9 renderer will be affected.<br>
---* param capInsets    capInsets in Rect
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setCapInsetsPressedRenderer(capInsets) end
---* Set the text entered in the edit box.<br>
---* param pText The given text.
---@param pText char@ #char pText
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setText(pText) end
---* Set the placeholder's font. Only system font is allowed.<br>
---* param pFontName The font name.<br>
---* param fontSize The font size.
---@param pFontName char@ #char pFontName
---@param fontSize int@ #int fontSize
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setPlaceholderFont(pFontName,fontSize) end
---* Get the font color of the placeholder text when the edit box is empty.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function EditBox:getPlaceholderFontColor() end
---* Sets capInsets for edit box.<br>
---* param capInsets    capInset in Rect.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setCapInsets(capInsets) end
---* Set the font. Only system font is allowed.<br>
---* param pFontName The font name.<br>
---* param fontSize The font size.
---@param pFontName char@ #char pFontName
---@param fontSize int@ #int fontSize
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setFont(pFontName,fontSize) end
---* Set the text horizontal alignment.
---@param alignment int@ #int alignment
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setTextHorizontalAlignment(alignment) end
---@param size size_table@ #size_table size
---@param normalImage string@ #string normalImage
---@param pressedImage string@ #string pressedImage
---@param disabledImage string@ #string disabledImage
---@param texType int@ #int texType
---@return ccui.EditBox@ EditBox#EditBox ret (return value: ccui.EditBox)
---@overload fun(size:size_table,normalImage:string,unkown2:int):ccui.EditBox
---@overload fun(size:size_table,unkown1:ccui.Scale9Sprite,unkown2:ccui.Scale9Sprite,unkown3:ccui.Scale9Sprite):ccui.EditBox
---@overload fun(size:size_table,normalImage:string,pressedImage:string,disabledImage:string,texType:int):ccui.EditBox
function EditBox:create(size,normalImage,pressedImage,disabledImage,texType) end
---* 
---@param anchorPoint vec2_table@ #vec2_table anchorPoint
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setAnchorPoint(anchorPoint) end
---* js NA<br>
---* lua NA
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:draw(renderer,parentTransform,parentFlags) end
---* Returns the "class name" of widget.
---@return string@ string#string ret (return value: string)
function EditBox:getDescription() end
---* 
---@param pos vec2_table@ #vec2_table pos
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setPosition(pos) end
---* 
---@param visible boolean@ #bool visible
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setVisible(visible) end
---* 
---@param size size_table@ #size_table size
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:setContentSize(size) end
---* Constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.EditBox@ EditBox#EditBox self (return value: ccui.EditBox)
function EditBox:EditBox() end


---@class cc.Event :  Ref
local Event={ }
---@class Event : cc.Event
cc.Event=Event


---*  Checks whether the event has been stopped.<br>
---* return True if the event has been stopped.
---@return boolean@ bool#bool ret (return value: bool)
function Event:isStopped() end
---*  Gets the event type.<br>
---* return The event type.
---@return int@ int#int ret (return value: int)
function Event:getType() end
---*  Gets current target of the event.<br>
---* return The target with which the event associates.<br>
---* note It's only available when the event listener is associated with node.<br>
---* It returns 0 when the listener is associated with fixed priority.
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Event:getCurrentTarget() end
---*  Stops propagation for current event.
---@return cc.Event@ Event#Event self (return value: cc.Event)
function Event:stopPropagation() end
---*  Constructor 
---@param type int@ #int type
---@return cc.Event@ Event#Event self (return value: cc.Event)
function Event:Event(type) end


---@class cc.EventAcceleration :  Event
local EventAcceleration={ }
---@class EventAcceleration : cc.EventAcceleration
cc.EventAcceleration=EventAcceleration





---@class cc.EventAssetsManagerEx :  EventCustom
local EventAssetsManagerEx={ }
---@class EventAssetsManagerEx : cc.EventAssetsManagerEx
cc.EventAssetsManagerEx=EventAssetsManagerEx


---* 
---@return cc.AssetsManagerEx@ AssetsManagerEx#AssetsManagerEx ret (return value: cc.AssetsManagerEx)
function EventAssetsManagerEx:getAssetsManagerEx() end
---* 
---@return string@ string#string ret (return value: string)
function EventAssetsManagerEx:getAssetId() end
---* 
---@return int@ int#int ret (return value: int)
function EventAssetsManagerEx:getCURLECode() end
---* 
---@return string@ string#string ret (return value: string)
function EventAssetsManagerEx:getMessage() end
---* 
---@return int@ int#int ret (return value: int)
function EventAssetsManagerEx:getCURLMCode() end
---* 
---@return float@ float#float ret (return value: float)
function EventAssetsManagerEx:getPercentByFile() end
---* 
---@return int@ int#int ret (return value: int)
function EventAssetsManagerEx:getEventCode() end
---* 
---@return float@ float#float ret (return value: float)
function EventAssetsManagerEx:getPercent() end
---*  Constructor 
---@param eventName string@ #string eventName
---@param manager cc.AssetsManagerEx@ #cc.AssetsManagerEx manager
---@param code int@ #int code
---@param percent float@ #float percent
---@param percentByFile float@ #float percentByFile
---@param assetId string@ #string assetId
---@param message string@ #string message
---@param curle_code int@ #int curle_code
---@param curlm_code int@ #int curlm_code
---@return cc.EventAssetsManagerEx@ EventAssetsManagerEx#EventAssetsManagerEx self (return value: cc.EventAssetsManagerEx)
function EventAssetsManagerEx:EventAssetsManagerEx(eventName,manager,code,percent,percentByFile,assetId,message,curle_code,curlm_code) end


---@class cc.EventController :  Event
local EventController={ }
---@class EventController : cc.EventController
cc.EventController=EventController


---*  Gets the event type of the controller.<br>
---* return The event type of the controller.
---@return int@ int#int ret (return value: int)
function EventController:getControllerEventType() end
---*  Sets the connect status.<br>
---* param True if it's connected.
---@param isConnected boolean@ #bool isConnected
---@return cc.EventController@ EventController#EventController self (return value: cc.EventController)
function EventController:setConnectStatus(isConnected) end
---*  Gets the connect status.<br>
---* return True if it's connected.
---@return boolean@ bool#bool ret (return value: bool)
function EventController:isConnected() end
---* 
---@param keyCode int@ #int keyCode
---@return cc.EventController@ EventController#EventController self (return value: cc.EventController)
function EventController:setKeyCode(keyCode) end
---* 
---@return cc.Controller@ Controller#Controller ret (return value: cc.Controller)
function EventController:getController() end
---*  Gets the key code of the controller.<br>
---* return The key code of the controller.
---@return int@ int#int ret (return value: int)
function EventController:getKeyCode() end
---@param type int@ #int type
---@param controller cc.Controller@ #cc.Controller controller
---@param keyCode int@ #int keyCode
---@return cc.EventController@ EventController#EventController self (return value: cc.EventController)
---@overload fun(type:int,controller:cc.Controller,unkown2:boolean):cc.EventController
---@overload fun(type:int,controller:cc.Controller,keyCode:int):cc.EventController
function EventController:EventController(type,controller,keyCode) end


---@class cc.EventCustom :  Event
local EventCustom={ }
---@class EventCustom : cc.EventCustom
cc.EventCustom=EventCustom


---*  Gets event name.<br>
---* return The name of the event.
---@return string@ string#string ret (return value: string)
function EventCustom:getEventName() end
---*  Constructor.<br>
---* param eventName A given name of the custom event.<br>
---* js ctor
---@param eventName string@ #string eventName
---@return cc.EventCustom@ EventCustom#EventCustom self (return value: cc.EventCustom)
function EventCustom:EventCustom(eventName) end


---@class cc.EventDispatcher :  Ref
local EventDispatcher={ }
---@class EventDispatcher : cc.EventDispatcher
cc.EventDispatcher=EventDispatcher


---*  Pauses all listeners which are associated the specified target.<br>
---* param target A given target node.<br>
---* param recursive True if pause recursively, the default value is false.
---@param target cc.Node@ #cc.Node target
---@param recursive boolean@ #bool recursive
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:pauseEventListenersForTarget(target,recursive) end
---*  Adds a event listener for a specified event with the priority of scene graph.<br>
---* param listener The listener of a specified event.<br>
---* param node The priority of the listener is based on the draw order of this node.<br>
---* note  The priority of scene graph will be fixed value 0. So the order of listener item<br>
---* in the vector will be ' <0, scene graph (0 priority), >0'.
---@param listener cc.EventListener@ #cc.EventListener listener
---@param node cc.Node@ #cc.Node node
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:addEventListenerWithSceneGraphPriority(listener,node) end
---*  Whether to enable dispatching events.<br>
---* param isEnabled  True if enable dispatching events.
---@param isEnabled boolean@ #bool isEnabled
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:setEnabled(isEnabled) end
---*  Adds a event listener for a specified event with the fixed priority.<br>
---* param listener The listener of a specified event.<br>
---* param fixedPriority The fixed priority of the listener.<br>
---* note A lower priority will be called before the ones that have a higher value.<br>
---* 0 priority is forbidden for fixed priority since it's used for scene graph based priority.
---@param listener cc.EventListener@ #cc.EventListener listener
---@param fixedPriority int@ #int fixedPriority
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:addEventListenerWithFixedPriority(listener,fixedPriority) end
---*  Remove a listener.<br>
---* param listener The specified event listener which needs to be removed.
---@param listener cc.EventListener@ #cc.EventListener listener
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:removeEventListener(listener) end
---*  Dispatches a Custom Event with a event name an optional user data.<br>
---* param eventName The name of the event which needs to be dispatched.<br>
---* param optionalUserData The optional user data, it's a void*, the default value is nullptr.
---@param eventName string@ #string eventName
---@param optionalUserData void@ #void optionalUserData
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:dispatchCustomEvent(eventName,optionalUserData) end
---*  Resumes all listeners which are associated the specified target.<br>
---* param target A given target node.<br>
---* param recursive True if resume recursively, the default value is false.
---@param target cc.Node@ #cc.Node target
---@param recursive boolean@ #bool recursive
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:resumeEventListenersForTarget(target,recursive) end
---*  Removes all listeners which are associated with the specified target.<br>
---* param target A given target node.<br>
---* param recursive True if remove recursively, the default value is false.
---@param target cc.Node@ #cc.Node target
---@param recursive boolean@ #bool recursive
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:removeEventListenersForTarget(target,recursive) end
---*  Sets listener's priority with fixed value.<br>
---* param listener A given listener.<br>
---* param fixedPriority The fixed priority value.
---@param listener cc.EventListener@ #cc.EventListener listener
---@param fixedPriority int@ #int fixedPriority
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:setPriority(listener,fixedPriority) end
---*  Dispatches the event.<br>
---* Also removes all EventListeners marked for deletion from the<br>
---* event dispatcher list.<br>
---* param event The event needs to be dispatched.
---@param event cc.Event@ #cc.Event event
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:dispatchEvent(event) end
---*  Query whether the specified event listener id has been added.<br>
---* param listenerID The listenerID of the event listener id.<br>
---* return True if dispatching events is exist
---@param listenerID string@ #string listenerID
---@return boolean@ bool#bool ret (return value: bool)
function EventDispatcher:hasEventListener(listenerID) end
---*  Removes all listeners.
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:removeAllEventListeners() end
---*  Removes all custom listeners with the same event name.<br>
---* param customEventName A given event listener name which needs to be removed.
---@param customEventName string@ #string customEventName
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:removeCustomEventListeners(customEventName) end
---*  Checks whether dispatching events is enabled.<br>
---* return True if dispatching events is enabled.
---@return boolean@ bool#bool ret (return value: bool)
function EventDispatcher:isEnabled() end
---*  Removes all listeners with the same event listener type.<br>
---* param listenerType A given event listener type which needs to be removed.
---@param listenerType int@ #int listenerType
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:removeEventListenersForType(listenerType) end
---*  Constructor of EventDispatcher.
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher self (return value: cc.EventDispatcher)
function EventDispatcher:EventDispatcher() end


---@class cc.EventFocus :  Event
local EventFocus={ }
---@class EventFocus : cc.EventFocus
cc.EventFocus=EventFocus


---*  Constructor.<br>
---* param widgetLoseFocus The widget which lose focus.<br>
---* param widgetGetFocus The widget which get focus.<br>
---* js ctor
---@param widgetLoseFocus ccui.Widget@ #ccui.Widget widgetLoseFocus
---@param widgetGetFocus ccui.Widget@ #ccui.Widget widgetGetFocus
---@return cc.EventFocus@ EventFocus#EventFocus self (return value: cc.EventFocus)
function EventFocus:EventFocus(widgetLoseFocus,widgetGetFocus) end


---@class ccs.EventFrame :  Frame
local EventFrame={ }
---@class EventFrame : ccs.EventFrame
ccs.EventFrame=EventFrame


---* 
---@param event string@ #string event
---@return ccs.EventFrame@ EventFrame#EventFrame self (return value: ccs.EventFrame)
function EventFrame:setEvent(event) end
---* 
---@return ccs.EventFrame@ EventFrame#EventFrame self (return value: ccs.EventFrame)
function EventFrame:init() end
---* 
---@return string@ string#string ret (return value: string)
function EventFrame:getEvent() end
---* 
---@return ccs.EventFrame@ EventFrame#EventFrame ret (return value: ccs.EventFrame)
function EventFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function EventFrame:clone() end
---* 
---@param node cc.Node@ #cc.Node node
---@return ccs.EventFrame@ EventFrame#EventFrame self (return value: ccs.EventFrame)
function EventFrame:setNode(node) end
---* 
---@return ccs.EventFrame@ EventFrame#EventFrame self (return value: ccs.EventFrame)
function EventFrame:EventFrame() end


---@class cc.EventKeyboard :  Event
local EventKeyboard={ }
---@class EventKeyboard : cc.EventKeyboard
cc.EventKeyboard=EventKeyboard


---*  Constructor.<br>
---* param keyCode A given keycode.<br>
---* param isPressed True if the key is pressed.<br>
---* js ctor
---@param keyCode int@ #int keyCode
---@param isPressed boolean@ #bool isPressed
---@return cc.EventKeyboard@ EventKeyboard#EventKeyboard self (return value: cc.EventKeyboard)
function EventKeyboard:EventKeyboard(keyCode,isPressed) end


---@class cc.EventListener :  Ref
local EventListener={ }
---@class EventListener : cc.EventListener
cc.EventListener=EventListener


---*  Enables or disables the listener.<br>
---* note Only listeners with `enabled` state will be able to receive events.<br>
---* When an listener was initialized, it's enabled by default.<br>
---* An event listener can receive events when it is enabled and is not paused.<br>
---* paused state is always false when it is a fixed priority listener.<br>
---* param enabled True if enables the listener.
---@param enabled boolean@ #bool enabled
---@return cc.EventListener@ EventListener#EventListener self (return value: cc.EventListener)
function EventListener:setEnabled(enabled) end
---*  Checks whether the listener is enabled.<br>
---* return True if the listener is enabled.
---@return boolean@ bool#bool ret (return value: bool)
function EventListener:isEnabled() end
---*  Clones the listener, its subclasses have to override this method.
---@return cc.EventListener@ EventListener#EventListener ret (return value: cc.EventListener)
function EventListener:clone() end
---*  Checks whether the listener is available.<br>
---* return True if the listener is available.
---@return boolean@ bool#bool ret (return value: bool)
function EventListener:checkAvailable() end


---@class cc.EventListenerAcceleration :  EventListener
local EventListenerAcceleration={ }
---@class EventListenerAcceleration : cc.EventListenerAcceleration
cc.EventListenerAcceleration=EventListenerAcceleration


---* 
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerAcceleration:init(callback) end
---* / Overrides
---@return cc.EventListenerAcceleration@ EventListenerAcceleration#EventListenerAcceleration ret (return value: cc.EventListenerAcceleration)
function EventListenerAcceleration:clone() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerAcceleration:checkAvailable() end
---* 
---@return cc.EventListenerAcceleration@ EventListenerAcceleration#EventListenerAcceleration self (return value: cc.EventListenerAcceleration)
function EventListenerAcceleration:EventListenerAcceleration() end


---@class cc.EventListenerAssetsManagerEx :  EventListenerCustom
local EventListenerAssetsManagerEx={ }
---@class EventListenerAssetsManagerEx : cc.EventListenerAssetsManagerEx
cc.EventListenerAssetsManagerEx=EventListenerAssetsManagerEx


---*  Initializes event with type and callback function 
---@param AssetsManagerEx cc.AssetsManagerEx@ #cc.AssetsManagerEx AssetsManagerEx
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerAssetsManagerEx:init(AssetsManagerEx,callback) end
---* 
---@return cc.EventListenerAssetsManagerEx@ EventListenerAssetsManagerEx#EventListenerAssetsManagerEx ret (return value: cc.EventListenerAssetsManagerEx)
function EventListenerAssetsManagerEx:clone() end
---* / Overrides
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerAssetsManagerEx:checkAvailable() end
---*  Constructor 
---@return cc.EventListenerAssetsManagerEx@ EventListenerAssetsManagerEx#EventListenerAssetsManagerEx self (return value: cc.EventListenerAssetsManagerEx)
function EventListenerAssetsManagerEx:EventListenerAssetsManagerEx() end


---@class cc.EventListenerController :  EventListener
local EventListenerController={ }
---@class EventListenerController : cc.EventListenerController
cc.EventListenerController=EventListenerController


---*  Create a controller event listener.<br>
---* return An autoreleased EventListenerController object.
---@return cc.EventListenerController@ EventListenerController#EventListenerController ret (return value: cc.EventListenerController)
function EventListenerController:create() end
---* 
---@return cc.EventListenerController@ EventListenerController#EventListenerController ret (return value: cc.EventListenerController)
function EventListenerController:clone() end
---* / Overrides
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerController:checkAvailable() end


---@class cc.EventListenerCustom :  EventListener
local EventListenerCustom={ }
---@class EventListenerCustom : cc.EventListenerCustom
cc.EventListenerCustom=EventListenerCustom


---* 
---@return cc.EventListenerCustom@ EventListenerCustom#EventListenerCustom ret (return value: cc.EventListenerCustom)
function EventListenerCustom:clone() end
---* / Overrides
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerCustom:checkAvailable() end
---*  Constructor 
---@return cc.EventListenerCustom@ EventListenerCustom#EventListenerCustom self (return value: cc.EventListenerCustom)
function EventListenerCustom:EventListenerCustom() end


---@class cc.EventListenerFocus :  EventListener
local EventListenerFocus={ }
---@class EventListenerFocus : cc.EventListenerFocus
cc.EventListenerFocus=EventListenerFocus


---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerFocus:init() end
---* / Overrides
---@return cc.EventListenerFocus@ EventListenerFocus#EventListenerFocus ret (return value: cc.EventListenerFocus)
function EventListenerFocus:clone() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerFocus:checkAvailable() end
---* 
---@return cc.EventListenerFocus@ EventListenerFocus#EventListenerFocus self (return value: cc.EventListenerFocus)
function EventListenerFocus:EventListenerFocus() end


---@class cc.EventListenerKeyboard :  EventListener
local EventListenerKeyboard={ }
---@class EventListenerKeyboard : cc.EventListenerKeyboard
cc.EventListenerKeyboard=EventListenerKeyboard


---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerKeyboard:init() end
---* / Overrides
---@return cc.EventListenerKeyboard@ EventListenerKeyboard#EventListenerKeyboard ret (return value: cc.EventListenerKeyboard)
function EventListenerKeyboard:clone() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerKeyboard:checkAvailable() end
---* 
---@return cc.EventListenerKeyboard@ EventListenerKeyboard#EventListenerKeyboard self (return value: cc.EventListenerKeyboard)
function EventListenerKeyboard:EventListenerKeyboard() end


---@class cc.EventListenerMouse :  EventListener
local EventListenerMouse={ }
---@class EventListenerMouse : cc.EventListenerMouse
cc.EventListenerMouse=EventListenerMouse


---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerMouse:init() end
---* / Overrides
---@return cc.EventListenerMouse@ EventListenerMouse#EventListenerMouse ret (return value: cc.EventListenerMouse)
function EventListenerMouse:clone() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerMouse:checkAvailable() end
---* 
---@return cc.EventListenerMouse@ EventListenerMouse#EventListenerMouse self (return value: cc.EventListenerMouse)
function EventListenerMouse:EventListenerMouse() end


---@class cc.EventListenerPhysicsContact :  EventListenerCustom
local EventListenerPhysicsContact={ }
---@class EventListenerPhysicsContact : cc.EventListenerPhysicsContact
cc.EventListenerPhysicsContact=EventListenerPhysicsContact


---*  Create the listener. 
---@return cc.EventListenerPhysicsContact@ EventListenerPhysicsContact#EventListenerPhysicsContact ret (return value: cc.EventListenerPhysicsContact)
function EventListenerPhysicsContact:create() end
---*  Clone an object from this listener.
---@return cc.EventListenerPhysicsContact@ EventListenerPhysicsContact#EventListenerPhysicsContact ret (return value: cc.EventListenerPhysicsContact)
function EventListenerPhysicsContact:clone() end
---*  Check the listener is available.<br>
---* return True if there's one available callback function at least, false if there's no one.
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerPhysicsContact:checkAvailable() end


---@class cc.EventListenerPhysicsContactWithBodies :  EventListenerPhysicsContact
local EventListenerPhysicsContactWithBodies={ }
---@class EventListenerPhysicsContactWithBodies : cc.EventListenerPhysicsContactWithBodies
cc.EventListenerPhysicsContactWithBodies=EventListenerPhysicsContactWithBodies


---* 
---@param shapeA cc.PhysicsShape@ #cc.PhysicsShape shapeA
---@param shapeB cc.PhysicsShape@ #cc.PhysicsShape shapeB
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerPhysicsContactWithBodies:hitTest(shapeA,shapeB) end
---*  Create the listener. 
---@param bodyA cc.PhysicsBody@ #cc.PhysicsBody bodyA
---@param bodyB cc.PhysicsBody@ #cc.PhysicsBody bodyB
---@return cc.EventListenerPhysicsContactWithBodies@ EventListenerPhysicsContactWithBodies#EventListenerPhysicsContactWithBodies ret (return value: cc.EventListenerPhysicsContactWithBodies)
function EventListenerPhysicsContactWithBodies:create(bodyA,bodyB) end
---* 
---@return cc.EventListenerPhysicsContactWithBodies@ EventListenerPhysicsContactWithBodies#EventListenerPhysicsContactWithBodies ret (return value: cc.EventListenerPhysicsContactWithBodies)
function EventListenerPhysicsContactWithBodies:clone() end


---@class cc.EventListenerPhysicsContactWithGroup :  EventListenerPhysicsContact
local EventListenerPhysicsContactWithGroup={ }
---@class EventListenerPhysicsContactWithGroup : cc.EventListenerPhysicsContactWithGroup
cc.EventListenerPhysicsContactWithGroup=EventListenerPhysicsContactWithGroup


---* 
---@param shapeA cc.PhysicsShape@ #cc.PhysicsShape shapeA
---@param shapeB cc.PhysicsShape@ #cc.PhysicsShape shapeB
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerPhysicsContactWithGroup:hitTest(shapeA,shapeB) end
---*  Create the listener. 
---@param group int@ #int group
---@return cc.EventListenerPhysicsContactWithGroup@ EventListenerPhysicsContactWithGroup#EventListenerPhysicsContactWithGroup ret (return value: cc.EventListenerPhysicsContactWithGroup)
function EventListenerPhysicsContactWithGroup:create(group) end
---* 
---@return cc.EventListenerPhysicsContactWithGroup@ EventListenerPhysicsContactWithGroup#EventListenerPhysicsContactWithGroup ret (return value: cc.EventListenerPhysicsContactWithGroup)
function EventListenerPhysicsContactWithGroup:clone() end


---@class cc.EventListenerPhysicsContactWithShapes :  EventListenerPhysicsContact
local EventListenerPhysicsContactWithShapes={ }
---@class EventListenerPhysicsContactWithShapes : cc.EventListenerPhysicsContactWithShapes
cc.EventListenerPhysicsContactWithShapes=EventListenerPhysicsContactWithShapes


---* 
---@param shapeA cc.PhysicsShape@ #cc.PhysicsShape shapeA
---@param shapeB cc.PhysicsShape@ #cc.PhysicsShape shapeB
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerPhysicsContactWithShapes:hitTest(shapeA,shapeB) end
---*  Create the listener. 
---@param shapeA cc.PhysicsShape@ #cc.PhysicsShape shapeA
---@param shapeB cc.PhysicsShape@ #cc.PhysicsShape shapeB
---@return cc.EventListenerPhysicsContactWithShapes@ EventListenerPhysicsContactWithShapes#EventListenerPhysicsContactWithShapes ret (return value: cc.EventListenerPhysicsContactWithShapes)
function EventListenerPhysicsContactWithShapes:create(shapeA,shapeB) end
---* 
---@return cc.EventListenerPhysicsContactWithShapes@ EventListenerPhysicsContactWithShapes#EventListenerPhysicsContactWithShapes ret (return value: cc.EventListenerPhysicsContactWithShapes)
function EventListenerPhysicsContactWithShapes:clone() end


---@class cc.EventListenerTouchAllAtOnce :  EventListener
local EventListenerTouchAllAtOnce={ }
---@class EventListenerTouchAllAtOnce : cc.EventListenerTouchAllAtOnce
cc.EventListenerTouchAllAtOnce=EventListenerTouchAllAtOnce


---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerTouchAllAtOnce:init() end
---* / Overrides
---@return cc.EventListenerTouchAllAtOnce@ EventListenerTouchAllAtOnce#EventListenerTouchAllAtOnce ret (return value: cc.EventListenerTouchAllAtOnce)
function EventListenerTouchAllAtOnce:clone() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerTouchAllAtOnce:checkAvailable() end
---* 
---@return cc.EventListenerTouchAllAtOnce@ EventListenerTouchAllAtOnce#EventListenerTouchAllAtOnce self (return value: cc.EventListenerTouchAllAtOnce)
function EventListenerTouchAllAtOnce:EventListenerTouchAllAtOnce() end


---@class cc.EventListenerTouchOneByOne :  EventListener
local EventListenerTouchOneByOne={ }
---@class EventListenerTouchOneByOne : cc.EventListenerTouchOneByOne
cc.EventListenerTouchOneByOne=EventListenerTouchOneByOne


---*  Is swall touches or not.<br>
---* return True if needs to swall touches.
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerTouchOneByOne:isSwallowTouches() end
---*  Whether or not to swall touches.<br>
---* param needSwallow True if needs to swall touches.
---@param needSwallow boolean@ #bool needSwallow
---@return cc.EventListenerTouchOneByOne@ EventListenerTouchOneByOne#EventListenerTouchOneByOne self (return value: cc.EventListenerTouchOneByOne)
function EventListenerTouchOneByOne:setSwallowTouches(needSwallow) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerTouchOneByOne:init() end
---* / Overrides
---@return cc.EventListenerTouchOneByOne@ EventListenerTouchOneByOne#EventListenerTouchOneByOne ret (return value: cc.EventListenerTouchOneByOne)
function EventListenerTouchOneByOne:clone() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function EventListenerTouchOneByOne:checkAvailable() end
---* 
---@return cc.EventListenerTouchOneByOne@ EventListenerTouchOneByOne#EventListenerTouchOneByOne self (return value: cc.EventListenerTouchOneByOne)
function EventListenerTouchOneByOne:EventListenerTouchOneByOne() end


---@class cc.EventMouse :  Event
local EventMouse={ }
---@class EventMouse : cc.EventMouse
cc.EventMouse=EventMouse


---*  Returns the previous touch location in screen coordinates.<br>
---* return The previous touch location in screen coordinates.<br>
---* js NA
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function EventMouse:getPreviousLocationInView() end
---*  Returns the current touch location in OpenGL coordinates.<br>
---* return The current touch location in OpenGL coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function EventMouse:getLocation() end
---*  Get mouse button.<br>
---* return The mouse button.<br>
---* js getButton
---@return int@ int#int ret (return value: int)
function EventMouse:getMouseButton() end
---*  Returns the previous touch location in OpenGL coordinates.<br>
---* return The previous touch location in OpenGL coordinates.<br>
---* js NA
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function EventMouse:getPreviousLocation() end
---*  Returns the delta of 2 current touches locations in screen coordinates.<br>
---* return The delta of 2 current touches locations in screen coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function EventMouse:getDelta() end
---*  Set mouse scroll data.<br>
---* param scrollX The scroll data of x axis.<br>
---* param scrollY The scroll data of y axis.
---@param scrollX float@ #float scrollX
---@param scrollY float@ #float scrollY
---@return cc.EventMouse@ EventMouse#EventMouse self (return value: cc.EventMouse)
function EventMouse:setScrollData(scrollX,scrollY) end
---*  Returns the start touch location in screen coordinates.<br>
---* return The start touch location in screen coordinates.<br>
---* js NA
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function EventMouse:getStartLocationInView() end
---*  Returns the start touch location in OpenGL coordinates.<br>
---* return The start touch location in OpenGL coordinates.<br>
---* js NA
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function EventMouse:getStartLocation() end
---*  Set mouse button.<br>
---* param button a given mouse button.<br>
---* js setButton
---@param button int@ #int button
---@return cc.EventMouse@ EventMouse#EventMouse self (return value: cc.EventMouse)
function EventMouse:setMouseButton(button) end
---*  Returns the current touch location in screen coordinates.<br>
---* return The current touch location in screen coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function EventMouse:getLocationInView() end
---*  Get mouse scroll data of y axis.<br>
---* return The scroll data of y axis.
---@return float@ float#float ret (return value: float)
function EventMouse:getScrollY() end
---*  Get mouse scroll data of x axis.<br>
---* return The scroll data of x axis.
---@return float@ float#float ret (return value: float)
function EventMouse:getScrollX() end
---*  Get the cursor position of x axis.<br>
---* return The x coordinate of cursor position.<br>
---* js getLocationX
---@return float@ float#float ret (return value: float)
function EventMouse:getCursorX() end
---*  Get the cursor position of y axis.<br>
---* return The y coordinate of cursor position.<br>
---* js getLocationY
---@return float@ float#float ret (return value: float)
function EventMouse:getCursorY() end
---*  Set the cursor position.<br>
---* param x The x coordinate of cursor position.<br>
---* param y The y coordinate of cursor position.<br>
---* js setLocation
---@param x float@ #float x
---@param y float@ #float y
---@return cc.EventMouse@ EventMouse#EventMouse self (return value: cc.EventMouse)
function EventMouse:setCursorPosition(x,y) end
---*  Constructor.<br>
---* param mouseEventCode A given mouse event type.<br>
---* js ctor
---@param mouseEventCode int@ #int mouseEventCode
---@return cc.EventMouse@ EventMouse#EventMouse self (return value: cc.EventMouse)
function EventMouse:EventMouse(mouseEventCode) end


---@class cc.EventTouch :  Event
local EventTouch={ }
---@class EventTouch : cc.EventTouch
cc.EventTouch=EventTouch


---*  Get event code.<br>
---* return The code of the event.
---@return int@ int#int ret (return value: int)
function EventTouch:getEventCode() end
---*  Set the event code.<br>
---* param eventCode A given EventCode.
---@param eventCode int@ #int eventCode
---@return cc.EventTouch@ EventTouch#EventTouch self (return value: cc.EventTouch)
function EventTouch:setEventCode(eventCode) end
---* Constructor.<br>
---* js NA
---@return cc.EventTouch@ EventTouch#EventTouch self (return value: cc.EventTouch)
function EventTouch:EventTouch() end


---@class cc.FadeIn :  FadeTo
local FadeIn={ }
---@class FadeIn : cc.FadeIn
cc.FadeIn=FadeIn


---* js NA
---@param ac cc.FadeTo@ #cc.FadeTo ac
---@return cc.FadeIn@ FadeIn#FadeIn self (return value: cc.FadeIn)
function FadeIn:setReverseAction(ac) end
---* Creates the action.<br>
---* param d Duration time, in seconds.<br>
---* return An autoreleased FadeIn object.
---@param d float@ #float d
---@return cc.FadeIn@ FadeIn#FadeIn ret (return value: cc.FadeIn)
function FadeIn:create(d) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.FadeIn@ FadeIn#FadeIn self (return value: cc.FadeIn)
function FadeIn:startWithTarget(target) end
---* 
---@return cc.FadeIn@ FadeIn#FadeIn ret (return value: cc.FadeIn)
function FadeIn:clone() end
---* 
---@return cc.FadeTo@ FadeTo#FadeTo ret (return value: cc.FadeTo)
function FadeIn:reverse() end
---* 
---@return cc.FadeIn@ FadeIn#FadeIn self (return value: cc.FadeIn)
function FadeIn:FadeIn() end


---@class cc.FadeOut :  FadeTo
local FadeOut={ }
---@class FadeOut : cc.FadeOut
cc.FadeOut=FadeOut


---* js NA
---@param ac cc.FadeTo@ #cc.FadeTo ac
---@return cc.FadeOut@ FadeOut#FadeOut self (return value: cc.FadeOut)
function FadeOut:setReverseAction(ac) end
---* Creates the action.<br>
---* param d Duration time, in seconds.
---@param d float@ #float d
---@return cc.FadeOut@ FadeOut#FadeOut ret (return value: cc.FadeOut)
function FadeOut:create(d) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.FadeOut@ FadeOut#FadeOut self (return value: cc.FadeOut)
function FadeOut:startWithTarget(target) end
---* 
---@return cc.FadeOut@ FadeOut#FadeOut ret (return value: cc.FadeOut)
function FadeOut:clone() end
---* 
---@return cc.FadeTo@ FadeTo#FadeTo ret (return value: cc.FadeTo)
function FadeOut:reverse() end
---* 
---@return cc.FadeOut@ FadeOut#FadeOut self (return value: cc.FadeOut)
function FadeOut:FadeOut() end


---@class cc.FadeOutBLTiles :  FadeOutTRTiles
local FadeOutBLTiles={ }
---@class FadeOutBLTiles : cc.FadeOutBLTiles
cc.FadeOutBLTiles=FadeOutBLTiles


---* brief Create the action with the grid size and the duration.<br>
---* param duration Specify the duration of the FadeOutBLTiles action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* return If the creation success, return a pointer of FadeOutBLTiles action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@return cc.FadeOutBLTiles@ FadeOutBLTiles#FadeOutBLTiles ret (return value: cc.FadeOutBLTiles)
function FadeOutBLTiles:create(duration,gridSize) end
---* 
---@return cc.FadeOutBLTiles@ FadeOutBLTiles#FadeOutBLTiles ret (return value: cc.FadeOutBLTiles)
function FadeOutBLTiles:clone() end
---* 
---@param pos size_table@ #size_table pos
---@param time float@ #float time
---@return float@ float#float ret (return value: float)
function FadeOutBLTiles:testFunc(pos,time) end
---* 
---@return cc.FadeOutBLTiles@ FadeOutBLTiles#FadeOutBLTiles self (return value: cc.FadeOutBLTiles)
function FadeOutBLTiles:FadeOutBLTiles() end


---@class cc.FadeOutDownTiles :  FadeOutUpTiles
local FadeOutDownTiles={ }
---@class FadeOutDownTiles : cc.FadeOutDownTiles
cc.FadeOutDownTiles=FadeOutDownTiles


---* brief Create the action with the grid size and the duration.<br>
---* param duration Specify the duration of the FadeOutDownTiles action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* return If the creation success, return a pointer of FadeOutDownTiles action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@return cc.FadeOutDownTiles@ FadeOutDownTiles#FadeOutDownTiles ret (return value: cc.FadeOutDownTiles)
function FadeOutDownTiles:create(duration,gridSize) end
---* 
---@return cc.FadeOutDownTiles@ FadeOutDownTiles#FadeOutDownTiles ret (return value: cc.FadeOutDownTiles)
function FadeOutDownTiles:clone() end
---* 
---@param pos size_table@ #size_table pos
---@param time float@ #float time
---@return float@ float#float ret (return value: float)
function FadeOutDownTiles:testFunc(pos,time) end
---* 
---@return cc.FadeOutDownTiles@ FadeOutDownTiles#FadeOutDownTiles self (return value: cc.FadeOutDownTiles)
function FadeOutDownTiles:FadeOutDownTiles() end


---@class cc.FadeOutTRTiles :  TiledGrid3DAction
local FadeOutTRTiles={ }
---@class FadeOutTRTiles : cc.FadeOutTRTiles
cc.FadeOutTRTiles=FadeOutTRTiles


---* brief Show the tile at specified position.<br>
---* param pos The position index of the tile should be shown.
---@param pos vec2_table@ #vec2_table pos
---@return cc.FadeOutTRTiles@ FadeOutTRTiles#FadeOutTRTiles self (return value: cc.FadeOutTRTiles)
function FadeOutTRTiles:turnOnTile(pos) end
---* brief Hide the tile at specified position.<br>
---* param pos The position index of the tile should be hide.
---@param pos vec2_table@ #vec2_table pos
---@return cc.FadeOutTRTiles@ FadeOutTRTiles#FadeOutTRTiles self (return value: cc.FadeOutTRTiles)
function FadeOutTRTiles:turnOffTile(pos) end
---* brief Show part of the tile.<br>
---* param pos The position index of the tile should be shown.<br>
---* param distance The percentage that the tile should be shown.
---@param pos vec2_table@ #vec2_table pos
---@param distance float@ #float distance
---@return cc.FadeOutTRTiles@ FadeOutTRTiles#FadeOutTRTiles self (return value: cc.FadeOutTRTiles)
function FadeOutTRTiles:transformTile(pos,distance) end
---* brief Calculate the percentage a tile should be shown.<br>
---* param pos The position index of the tile.<br>
---* param time The current percentage of the action.<br>
---* return Return the percentage the tile should be shown.
---@param pos size_table@ #size_table pos
---@param time float@ #float time
---@return float@ float#float ret (return value: float)
function FadeOutTRTiles:testFunc(pos,time) end
---* brief Create the action with the grid size and the duration.<br>
---* param duration Specify the duration of the FadeOutTRTiles action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* return If the creation success, return a pointer of FadeOutTRTiles action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@return cc.FadeOutTRTiles@ FadeOutTRTiles#FadeOutTRTiles ret (return value: cc.FadeOutTRTiles)
function FadeOutTRTiles:create(duration,gridSize) end
---* 
---@return cc.FadeOutTRTiles@ FadeOutTRTiles#FadeOutTRTiles ret (return value: cc.FadeOutTRTiles)
function FadeOutTRTiles:clone() end
---* 
---@param time float@ #float time
---@return cc.FadeOutTRTiles@ FadeOutTRTiles#FadeOutTRTiles self (return value: cc.FadeOutTRTiles)
function FadeOutTRTiles:update(time) end
---* 
---@return cc.FadeOutTRTiles@ FadeOutTRTiles#FadeOutTRTiles self (return value: cc.FadeOutTRTiles)
function FadeOutTRTiles:FadeOutTRTiles() end


---@class cc.FadeOutUpTiles :  FadeOutTRTiles
local FadeOutUpTiles={ }
---@class FadeOutUpTiles : cc.FadeOutUpTiles
cc.FadeOutUpTiles=FadeOutUpTiles


---* brief Create the action with the grid size and the duration.<br>
---* param duration Specify the duration of the FadeOutUpTiles action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* return If the creation success, return a pointer of FadeOutUpTiles action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@return cc.FadeOutUpTiles@ FadeOutUpTiles#FadeOutUpTiles ret (return value: cc.FadeOutUpTiles)
function FadeOutUpTiles:create(duration,gridSize) end
---* 
---@return cc.FadeOutUpTiles@ FadeOutUpTiles#FadeOutUpTiles ret (return value: cc.FadeOutUpTiles)
function FadeOutUpTiles:clone() end
---* 
---@param pos vec2_table@ #vec2_table pos
---@param distance float@ #float distance
---@return cc.FadeOutUpTiles@ FadeOutUpTiles#FadeOutUpTiles self (return value: cc.FadeOutUpTiles)
function FadeOutUpTiles:transformTile(pos,distance) end
---* 
---@param pos size_table@ #size_table pos
---@param time float@ #float time
---@return float@ float#float ret (return value: float)
function FadeOutUpTiles:testFunc(pos,time) end
---* 
---@return cc.FadeOutUpTiles@ FadeOutUpTiles#FadeOutUpTiles self (return value: cc.FadeOutUpTiles)
function FadeOutUpTiles:FadeOutUpTiles() end


---@class cc.FadeTo :  ActionInterval
local FadeTo={ }
---@class FadeTo : cc.FadeTo
cc.FadeTo=FadeTo


---* initializes the action with duration and opacity <br>
---* param duration in seconds
---@param duration float@ #float duration
---@param opacity unsigned_char@ #unsigned char opacity
---@return boolean@ bool#bool ret (return value: bool)
function FadeTo:initWithDuration(duration,opacity) end
---* Creates an action with duration and opacity.<br>
---* param duration Duration time, in seconds.<br>
---* param opacity A certain opacity, the range is from 0 to 255.<br>
---* return An autoreleased FadeTo object.
---@param duration float@ #float duration
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.FadeTo@ FadeTo#FadeTo ret (return value: cc.FadeTo)
function FadeTo:create(duration,opacity) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.FadeTo@ FadeTo#FadeTo self (return value: cc.FadeTo)
function FadeTo:startWithTarget(target) end
---* 
---@return cc.FadeTo@ FadeTo#FadeTo ret (return value: cc.FadeTo)
function FadeTo:clone() end
---* 
---@return cc.FadeTo@ FadeTo#FadeTo ret (return value: cc.FadeTo)
function FadeTo:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.FadeTo@ FadeTo#FadeTo self (return value: cc.FadeTo)
function FadeTo:update(time) end
---* 
---@return cc.FadeTo@ FadeTo#FadeTo self (return value: cc.FadeTo)
function FadeTo:FadeTo() end


---@class cc.FileUtils 
local FileUtils={ }
---@class FileUtils : cc.FileUtils
cc.FileUtils=FileUtils


---*  Returns the fullpath for a given filename.<br>
---* First it will try to get a new filename from the "filenameLookup" dictionary.<br>
---* If a new filename can't be found on the dictionary, it will use the original filename.<br>
---* Then it will try to obtain the full path of the filename using the FileUtils search rules: resolutions, and search paths.<br>
---* The file search is based on the array element order of search paths and resolution directories.<br>
---* For instance:<br>
---* We set two elements("/mnt/sdcard/", "internal_dir/") to search paths vector by setSearchPaths,<br>
---* and set three elements("resources-ipadhd/", "resources-ipad/", "resources-iphonehd")<br>
---* to resolutions vector by setSearchResolutionsOrder. The "internal_dir" is relative to "Resources/".<br>
---* If we have a file named 'sprite.png', the mapping in fileLookup dictionary contains `key: sprite.png -> value: sprite.pvr.gz`.<br>
---* Firstly, it will replace 'sprite.png' with 'sprite.pvr.gz', then searching the file sprite.pvr.gz as follows:<br>
---* /mnt/sdcard/resources-ipadhd/sprite.pvr.gz      (if not found, search next)<br>
---* /mnt/sdcard/resources-ipad/sprite.pvr.gz        (if not found, search next)<br>
---* /mnt/sdcard/resources-iphonehd/sprite.pvr.gz    (if not found, search next)<br>
---* /mnt/sdcard/sprite.pvr.gz                       (if not found, search next)<br>
---* internal_dir/resources-ipadhd/sprite.pvr.gz     (if not found, search next)<br>
---* internal_dir/resources-ipad/sprite.pvr.gz       (if not found, search next)<br>
---* internal_dir/resources-iphonehd/sprite.pvr.gz   (if not found, search next)<br>
---* internal_dir/sprite.pvr.gz                      (if not found, return "sprite.png")<br>
---* If the filename contains relative path like "gamescene/uilayer/sprite.png",<br>
---* and the mapping in fileLookup dictionary contains `key: gamescene/uilayer/sprite.png -> value: gamescene/uilayer/sprite.pvr.gz`.<br>
---* The file search order will be:<br>
---* /mnt/sdcard/gamescene/uilayer/resources-ipadhd/sprite.pvr.gz      (if not found, search next)<br>
---* /mnt/sdcard/gamescene/uilayer/resources-ipad/sprite.pvr.gz        (if not found, search next)<br>
---* /mnt/sdcard/gamescene/uilayer/resources-iphonehd/sprite.pvr.gz    (if not found, search next)<br>
---* /mnt/sdcard/gamescene/uilayer/sprite.pvr.gz                       (if not found, search next)<br>
---* internal_dir/gamescene/uilayer/resources-ipadhd/sprite.pvr.gz     (if not found, search next)<br>
---* internal_dir/gamescene/uilayer/resources-ipad/sprite.pvr.gz       (if not found, search next)<br>
---* internal_dir/gamescene/uilayer/resources-iphonehd/sprite.pvr.gz   (if not found, search next)<br>
---* internal_dir/gamescene/uilayer/sprite.pvr.gz                      (if not found, return "gamescene/uilayer/sprite.png")<br>
---* If the new file can't be found on the file system, it will return the parameter filename directly.<br>
---* This method was added to simplify multiplatform support. Whether you are using cocos2d-js or any cross-compilation toolchain like StellaSDK or Apportable,<br>
---* you might need to load different resources for a given file in the different platforms.<br>
---* since v2.1
---@param filename string@ #string filename
---@return string@ string#string ret (return value: string)
function FileUtils:fullPathForFilename(filename) end
---@param path string@ #string path
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(path:string,callback:function):cc.FileUtils
---@overload fun(path:string):cc.FileUtils
function FileUtils:getStringFromFile(path,callback) end
---* Sets the filenameLookup dictionary.<br>
---* param filenameLookupDict The dictionary for replacing filename.<br>
---* since v2.1
---@param filenameLookupDict map_table@ #map_table filenameLookupDict
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:setFilenameLookupDictionary(filenameLookupDict) end
---@param filepath string@ #string filepath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(filepath:string,callback:function):cc.FileUtils
---@overload fun(filepath:string):cc.FileUtils
function FileUtils:removeFile(filepath,callback) end
---* List all files recursively in a directory, async off the main cocos thread.<br>
---* param dirPath The path of the directory, it could be a relative or an absolute path.<br>
---* param callback The callback to be called once the list operation is complete. <br>
---* Will be called on the main cocos thread.<br>
---* js NA<br>
---* lua NA
---@param dirPath string@ #string dirPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:listFilesRecursivelyAsync(dirPath,callback) end
---* Checks whether the path is an absolute path.<br>
---* note On Android, if the parameter passed in is relative to "assets/", this method will treat it as an absolute path.<br>
---* Also on Blackberry, path starts with "app/native/Resources/" is treated as an absolute path.<br>
---* param path The path that needs to be checked.<br>
---* return True if it's an absolute path, false if not.
---@param path string@ #string path
---@return boolean@ bool#bool ret (return value: bool)
function FileUtils:isAbsolutePath(path) end
---@param path string@ #string path
---@param oldname string@ #string oldname
---@param name string@ #string name
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(path:string,oldname:string,name:string,callback:function):cc.FileUtils
---@overload fun(path:string,oldname:string,name:string):cc.FileUtils
---@overload fun(path:string,oldname:string):cc.FileUtils
---@overload fun(path:string,oldname:string,unkown2:function):cc.FileUtils
function FileUtils:renameFile(path,oldname,name,callback) end
---* Get default resource root path.
---@return string@ string#string ret (return value: string)
function FileUtils:getDefaultResourceRootPath() end
---* Loads the filenameLookup dictionary from the contents of a filename.<br>
---* note The plist file name should follow the format below:<br>
---* code<br>
---* <?xml version="1.0" encoding="UTF-8"?><br>
---* <!DOCTYPE plist PUBLIC "-AppleDTD PLIST 1.0EN" "http:www.apple.com/DTDs/PropertyList-1.0.dtd"><br>
---* <plist version="1.0"><br>
---* <dict><br>
---* <key>filenames</key><br>
---* <dict><br>
---* <key>sounds/click.wav</key><br>
---* <string>sounds/click.caf</string><br>
---* <key>sounds/endgame.wav</key><br>
---* <string>sounds/endgame.caf</string><br>
---* <key>sounds/gem-0.wav</key><br>
---* <string>sounds/gem-0.caf</string><br>
---* </dict><br>
---* <key>metadata</key><br>
---* <dict><br>
---* <key>version</key><br>
---* <integer>1</integer><br>
---* </dict><br>
---* </dict><br>
---* </plist><br>
---* endcode<br>
---* param filename The plist file name.<br>
---* since v2.1<br>
---* js loadFilenameLookup<br>
---* lua loadFilenameLookup
---@param filename string@ #string filename
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:loadFilenameLookupDictionaryFromFile(filename) end
---*  Checks whether to pop up a message box when failed to load an image.<br>
---* return True if pop up a message box when failed to load an image, false if not.
---@return boolean@ bool#bool ret (return value: bool)
function FileUtils:isPopupNotify() end
---* 
---@param filename string@ #string filename
---@return array_table@ array_table#array_table ret (return value: array_table)
function FileUtils:getValueVectorFromFile(filename) end
---* Gets the array of search paths.<br>
---* return The array of search paths which may contain the prefix of default resource root path. <br>
---* note In best practise, getter function should return the value of setter function passes in.<br>
---* But since we should not break the compatibility, we keep using the old logic. <br>
---* Therefore, If you want to get the original search paths, please call 'getOriginalSearchPaths()' instead.<br>
---* see fullPathForFilename(const char*).<br>
---* lua NA
---@return array_table@ array_table#array_table ret (return value: array_table)
function FileUtils:getSearchPaths() end
---* write a ValueMap into a plist file<br>
---* param dict the ValueMap want to save<br>
---* param fullPath The full path to the file you want to save a string<br>
---* return bool
---@param dict map_table@ #map_table dict
---@param fullPath string@ #string fullPath
---@return boolean@ bool#bool ret (return value: bool)
function FileUtils:writeToFile(dict,fullPath) end
---* Gets the original search path array set by 'setSearchPaths' or 'addSearchPath'.<br>
---* return The array of the original search paths
---@return array_table@ array_table#array_table ret (return value: array_table)
function FileUtils:getOriginalSearchPaths() end
---* Gets the new filename from the filename lookup dictionary.<br>
---* It is possible to have a override names.<br>
---* param filename The original filename.<br>
---* return The new filename after searching in the filename lookup dictionary.<br>
---* If the original filename wasn't in the dictionary, it will return the original filename.
---@param filename string@ #string filename
---@return string@ string#string ret (return value: string)
function FileUtils:getNewFilename(filename) end
---* List all files in a directory.<br>
---* param dirPath The path of the directory, it could be a relative or an absolute path.<br>
---* return File paths in a string vector
---@param dirPath string@ #string dirPath
---@return array_table@ array_table#array_table ret (return value: array_table)
function FileUtils:listFiles(dirPath) end
---* Converts the contents of a file to a ValueMap.<br>
---* param filename The filename of the file to gets content.<br>
---* return ValueMap of the file contents.<br>
---* note This method is used internally.
---@param filename string@ #string filename
---@return map_table@ map_table#map_table ret (return value: map_table)
function FileUtils:getValueMapFromFile(filename) end
---@param filepath string@ #string filepath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(filepath:string,callback:function):cc.FileUtils
---@overload fun(filepath:string):cc.FileUtils
function FileUtils:getFileSize(filepath,callback) end
---*  Converts the contents of a file to a ValueMap.<br>
---* This method is used internally.
---@param filedata char@ #char filedata
---@param filesize int@ #int filesize
---@return map_table@ map_table#map_table ret (return value: map_table)
function FileUtils:getValueMapFromData(filedata,filesize) end
---@param dirPath string@ #string dirPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(dirPath:string,callback:function):cc.FileUtils
---@overload fun(dirPath:string):cc.FileUtils
function FileUtils:removeDirectory(dirPath,callback) end
---* Sets the array of search paths.<br>
---* You can use this array to modify the search path of the resources.<br>
---* If you want to use "themes" or search resources in the "cache", you can do it easily by adding new entries in this array.<br>
---* note This method could access relative path and absolute path.<br>
---* If the relative path was passed to the vector, FileUtils will add the default resource directory before the relative path.<br>
---* For instance:<br>
---* On Android, the default resource root path is "assets/".<br>
---* If "/mnt/sdcard/" and "resources-large" were set to the search paths vector,<br>
---* "resources-large" will be converted to "assets/resources-large" since it was a relative path.<br>
---* param searchPaths The array contains search paths.<br>
---* see fullPathForFilename(const char*)<br>
---* since v2.1<br>
---* In js:var setSearchPaths(var jsval);<br>
---* lua NA
---@param searchPaths array_table@ #array_table searchPaths
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:setSearchPaths(searchPaths) end
---@param dataStr string@ #string dataStr
---@param fullPath string@ #string fullPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(dataStr:string,fullPath:string,callback:function):cc.FileUtils
---@overload fun(dataStr:string,fullPath:string):cc.FileUtils
function FileUtils:writeStringToFile(dataStr,fullPath,callback) end
---* Sets the array that contains the search order of the resources.<br>
---* param searchResolutionsOrder The source array that contains the search order of the resources.<br>
---* see getSearchResolutionsOrder(), fullPathForFilename(const char*).<br>
---* since v2.1<br>
---* In js:var setSearchResolutionsOrder(var jsval)<br>
---* lua NA
---@param searchResolutionsOrder array_table@ #array_table searchResolutionsOrder
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:setSearchResolutionsOrder(searchResolutionsOrder) end
---* Append search order of the resources.<br>
---* see setSearchResolutionsOrder(), fullPathForFilename().<br>
---* since v2.1
---@param order string@ #string order
---@param front boolean@ #bool front
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:addSearchResolutionsOrder(order,front) end
---* Add search path.<br>
---* since v2.1
---@param path string@ #string path
---@param front boolean@ #bool front
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:addSearchPath(path,front) end
---@param vecData array_table@ #array_table vecData
---@param fullPath string@ #string fullPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(vecData:array_table,fullPath:string,callback:function):cc.FileUtils
---@overload fun(vecData:array_table,fullPath:string):cc.FileUtils
function FileUtils:writeValueVectorToFile(vecData,fullPath,callback) end
---@param filename string@ #string filename
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(filename:string,callback:function):cc.FileUtils
---@overload fun(filename:string):cc.FileUtils
function FileUtils:isFileExist(filename,callback) end
---* Purges full path caches.
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:purgeCachedEntries() end
---* Gets full path from a file name and the path of the relative file.<br>
---* param filename The file name.<br>
---* param relativeFile The path of the relative file.<br>
---* return The full path.<br>
---* e.g. filename: hello.png, pszRelativeFile: /User/path1/path2/hello.plist<br>
---* Return: /User/path1/path2/hello.pvr (If there a a key(hello.png)-value(hello.pvr) in FilenameLookup dictionary. )
---@param filename string@ #string filename
---@param relativeFile string@ #string relativeFile
---@return string@ string#string ret (return value: string)
function FileUtils:fullPathFromRelativeFile(filename,relativeFile) end
---* Windows fopen can't support UTF-8 filename<br>
---* Need convert all parameters fopen and other 3rd-party libs<br>
---* param filenameUtf8 std::string name file for conversion from utf-8<br>
---* return std::string ansi filename in current locale
---@param filenameUtf8 string@ #string filenameUtf8
---@return string@ string#string ret (return value: string)
function FileUtils:getSuitableFOpen(filenameUtf8) end
---@param dict map_table@ #map_table dict
---@param fullPath string@ #string fullPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(dict:map_table,fullPath:string,callback:function):cc.FileUtils
---@overload fun(dict:map_table,fullPath:string):cc.FileUtils
function FileUtils:writeValueMapToFile(dict,fullPath,callback) end
---* Gets filename extension is a suffix (separated from the base filename by a dot) in lower case.<br>
---* Examples of filename extensions are .png, .jpeg, .exe, .dmg and .txt.<br>
---* param filePath The path of the file, it could be a relative or absolute path.<br>
---* return suffix for filename in lower case or empty if a dot not found.
---@param filePath string@ #string filePath
---@return string@ string#string ret (return value: string)
function FileUtils:getFileExtension(filePath) end
---* Sets writable path.
---@param writablePath string@ #string writablePath
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:setWritablePath(writablePath) end
---* Sets whether to pop-up a message box when failed to load an image.
---@param notify boolean@ #bool notify
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:setPopupNotify(notify) end
---@param fullPath string@ #string fullPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(fullPath:string,callback:function):cc.FileUtils
---@overload fun(fullPath:string):cc.FileUtils
function FileUtils:isDirectoryExist(fullPath,callback) end
---* Set default resource root path.
---@param path string@ #string path
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:setDefaultResourceRootPath(path) end
---* Gets the array that contains the search order of the resources.<br>
---* see setSearchResolutionsOrder(const std::vector<std::string>&), fullPathForFilename(const char*).<br>
---* since v2.1<br>
---* lua NA
---@return array_table@ array_table#array_table ret (return value: array_table)
function FileUtils:getSearchResolutionsOrder() end
---@param dirPath string@ #string dirPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
---@overload fun(dirPath:string,callback:function):cc.FileUtils
---@overload fun(dirPath:string):cc.FileUtils
function FileUtils:createDirectory(dirPath,callback) end
---* List all files in a directory async, off of the main cocos thread.<br>
---* param dirPath The path of the directory, it could be a relative or an absolute path.<br>
---* param callback The callback to be called once the list operation is complete. Will be called on the main cocos thread.<br>
---* js NA<br>
---* lua NA
---@param dirPath string@ #string dirPath
---@param callback function@ #function callback
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:listFilesAsync(dirPath,callback) end
---* Gets the writable path.<br>
---* return  The path that can be write/read a file in
---@return string@ string#string ret (return value: string)
function FileUtils:getWritablePath() end
---* List all files recursively in a directory.<br>
---* param dirPath The path of the directory, it could be a relative or an absolute path.<br>
---* return File paths in a string vector
---@param dirPath string@ #string dirPath
---@param files array_table@ #array_table files
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:listFilesRecursively(dirPath,files) end
---* Destroys the instance of FileUtils.
---@return cc.FileUtils@ FileUtils#FileUtils self (return value: cc.FileUtils)
function FileUtils:destroyInstance() end
---* Gets the instance of FileUtils.
---@return cc.FileUtils@ FileUtils#FileUtils ret (return value: cc.FileUtils)
function FileUtils:getInstance() end


---@class cc.FiniteTimeAction :  Action
local FiniteTimeAction={ }
---@class FiniteTimeAction : cc.FiniteTimeAction
cc.FiniteTimeAction=FiniteTimeAction


---*  Set duration in seconds of the action. <br>
---* param duration In seconds of the action.
---@param duration float@ #float duration
---@return cc.FiniteTimeAction@ FiniteTimeAction#FiniteTimeAction self (return value: cc.FiniteTimeAction)
function FiniteTimeAction:setDuration(duration) end
---*  Get duration in seconds of the action. <br>
---* return The duration in seconds of the action.
---@return float@ float#float ret (return value: float)
function FiniteTimeAction:getDuration() end
---* 
---@return cc.FiniteTimeAction@ FiniteTimeAction#FiniteTimeAction ret (return value: cc.FiniteTimeAction)
function FiniteTimeAction:clone() end
---* 
---@return cc.FiniteTimeAction@ FiniteTimeAction#FiniteTimeAction ret (return value: cc.FiniteTimeAction)
function FiniteTimeAction:reverse() end


---@class cc.FlipX :  ActionInstant
local FlipX={ }
---@class FlipX : cc.FlipX
cc.FlipX=FlipX


---*  init the action 
---@param x boolean@ #bool x
---@return boolean@ bool#bool ret (return value: bool)
function FlipX:initWithFlipX(x) end
---*  Create the action.<br>
---* param x Flips the sprite horizontally if true.<br>
---* return  An autoreleased FlipX object.
---@param x boolean@ #bool x
---@return cc.FlipX@ FlipX#FlipX ret (return value: cc.FlipX)
function FlipX:create(x) end
---* 
---@return cc.FlipX@ FlipX#FlipX ret (return value: cc.FlipX)
function FlipX:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.FlipX@ FlipX#FlipX self (return value: cc.FlipX)
function FlipX:update(time) end
---* 
---@return cc.FlipX@ FlipX#FlipX ret (return value: cc.FlipX)
function FlipX:reverse() end
---* 
---@return cc.FlipX@ FlipX#FlipX self (return value: cc.FlipX)
function FlipX:FlipX() end


---@class cc.FlipX3D :  Grid3DAction
local FlipX3D={ }
---@class FlipX3D : cc.FlipX3D
cc.FlipX3D=FlipX3D


---* brief Initializes an action with duration and grid size.<br>
---* param gridSize Specify the grid size of the FlipX3D action.<br>
---* param duration Specify the duration of the FlipX3D action. It's a value in seconds.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param gridSize size_table@ #size_table gridSize
---@param duration float@ #float duration
---@return boolean@ bool#bool ret (return value: bool)
function FlipX3D:initWithSize(gridSize,duration) end
---* brief Initializes an action with duration.<br>
---* param duration Specify the duration of the FlipX3D action. It's a value in seconds.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@return boolean@ bool#bool ret (return value: bool)
function FlipX3D:initWithDuration(duration) end
---* brief Create the action with duration.<br>
---* param duration Specify the duration of the FilpX3D action. It's a value in seconds.<br>
---* return If the creation success, return a pointer of FilpX3D action; otherwise, return nil.
---@param duration float@ #float duration
---@return cc.FlipX3D@ FlipX3D#FlipX3D ret (return value: cc.FlipX3D)
function FlipX3D:create(duration) end
---* 
---@return cc.FlipX3D@ FlipX3D#FlipX3D ret (return value: cc.FlipX3D)
function FlipX3D:clone() end
---* 
---@param time float@ #float time
---@return cc.FlipX3D@ FlipX3D#FlipX3D self (return value: cc.FlipX3D)
function FlipX3D:update(time) end
---* 
---@return cc.FlipX3D@ FlipX3D#FlipX3D self (return value: cc.FlipX3D)
function FlipX3D:FlipX3D() end


---@class cc.FlipY :  ActionInstant
local FlipY={ }
---@class FlipY : cc.FlipY
cc.FlipY=FlipY


---*  init the action 
---@param y boolean@ #bool y
---@return boolean@ bool#bool ret (return value: bool)
function FlipY:initWithFlipY(y) end
---*  Create the action.<br>
---* param y Flips the sprite vertically if true.<br>
---* return An autoreleased FlipY object.
---@param y boolean@ #bool y
---@return cc.FlipY@ FlipY#FlipY ret (return value: cc.FlipY)
function FlipY:create(y) end
---* 
---@return cc.FlipY@ FlipY#FlipY ret (return value: cc.FlipY)
function FlipY:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.FlipY@ FlipY#FlipY self (return value: cc.FlipY)
function FlipY:update(time) end
---* 
---@return cc.FlipY@ FlipY#FlipY ret (return value: cc.FlipY)
function FlipY:reverse() end
---* 
---@return cc.FlipY@ FlipY#FlipY self (return value: cc.FlipY)
function FlipY:FlipY() end


---@class cc.FlipY3D :  FlipX3D
local FlipY3D={ }
---@class FlipY3D : cc.FlipY3D
cc.FlipY3D=FlipY3D


---* brief Create the action with duration.<br>
---* param duration Specify the duration of the FlipY3D action. It's a value in seconds.<br>
---* return If the creation success, return a pointer of FlipY3D action; otherwise, return nil.
---@param duration float@ #float duration
---@return cc.FlipY3D@ FlipY3D#FlipY3D ret (return value: cc.FlipY3D)
function FlipY3D:create(duration) end
---* 
---@return cc.FlipY3D@ FlipY3D#FlipY3D ret (return value: cc.FlipY3D)
function FlipY3D:clone() end
---* 
---@param time float@ #float time
---@return cc.FlipY3D@ FlipY3D#FlipY3D self (return value: cc.FlipY3D)
function FlipY3D:update(time) end
---* 
---@return cc.FlipY3D@ FlipY3D#FlipY3D self (return value: cc.FlipY3D)
function FlipY3D:FlipY3D() end


---@class cc.Follow :  Action
local Follow={ }
---@class Follow : cc.Follow
cc.Follow=Follow


---*  Alter behavior - turn on/off boundary. <br>
---* param value Turn on/off boundary.
---@param value boolean@ #bool value
---@return cc.Follow@ Follow#Follow self (return value: cc.Follow)
function Follow:setBoundarySet(value) end
---* Initializes the action with a set boundary or with no boundary.<br>
---* param followedNode  The node to be followed.<br>
---* param rect  The boundary. If \p rect is equal to Rect::ZERO, it'll work<br>
---* with no boundary.
---@param followedNode cc.Node@ #cc.Node followedNode
---@param rect rect_table@ #rect_table rect
---@return boolean@ bool#bool ret (return value: bool)
function Follow:initWithTarget(followedNode,rect) end
---* Initializes the action with a set boundary or with no boundary with offsets.<br>
---* param followedNode  The node to be followed.<br>
---* param rect  The boundary. If \p rect is equal to Rect::ZERO, it'll work<br>
---* with no boundary.<br>
---* param xOffset The horizontal offset from the center of the screen from which the<br>
---* node  is to be followed.It can be positive,negative or zero.If<br>
---* set to zero the node will be horizontally centered followed.<br>
---* param yOffset The vertical offset from the center of the screen from which the<br>
---* node is to be followed.It can be positive,negative or zero.<br>
---* If set to zero the node will be vertically centered followed.<br>
---* If both xOffset and yOffset are set to zero,then the node will be horizontally and vertically centered followed.
---@param followedNode cc.Node@ #cc.Node followedNode
---@param xOffset float@ #float xOffset
---@param yOffset float@ #float yOffset
---@param rect rect_table@ #rect_table rect
---@return boolean@ bool#bool ret (return value: bool)
function Follow:initWithTargetAndOffset(followedNode,xOffset,yOffset,rect) end
---*  Return boundarySet.<br>
---* return Return boundarySet.
---@return boolean@ bool#bool ret (return value: bool)
function Follow:isBoundarySet() end
---* Creates the action with a set boundary or with no boundary.<br>
---* param followedNode  The node to be followed.<br>
---* param rect  The boundary. If \p rect is equal to Rect::ZERO, it'll work<br>
---* with no boundary.
---@param followedNode cc.Node@ #cc.Node followedNode
---@param rect rect_table@ #rect_table rect
---@return cc.Follow@ Follow#Follow ret (return value: cc.Follow)
function Follow:create(followedNode,rect) end
---* Creates the action with a set boundary or with no boundary with offsets.<br>
---* param followedNode  The node to be followed.<br>
---* param rect  The boundary. If \p rect is equal to Rect::ZERO, it'll work<br>
---* with no boundary.<br>
---* param xOffset The horizontal offset from the center of the screen from which the<br>
---* node  is to be followed.It can be positive,negative or zero.If<br>
---* set to zero the node will be horizontally centered followed.<br>
---* param yOffset The vertical offset from the center of the screen from which the<br>
---* node is to be followed.It can be positive,negative or zero.<br>
---* If set to zero the node will be vertically centered followed.<br>
---* If both xOffset and yOffset are set to zero,then the node will be horizontally and vertically centered followed.
---@param followedNode cc.Node@ #cc.Node followedNode
---@param xOffset float@ #float xOffset
---@param yOffset float@ #float yOffset
---@param rect rect_table@ #rect_table rect
---@return cc.Follow@ Follow#Follow ret (return value: cc.Follow)
function Follow:createWithOffset(followedNode,xOffset,yOffset,rect) end
---* param dt in seconds.<br>
---* js NA
---@param dt float@ #float dt
---@return cc.Follow@ Follow#Follow self (return value: cc.Follow)
function Follow:step(dt) end
---* 
---@return cc.Follow@ Follow#Follow ret (return value: cc.Follow)
function Follow:clone() end
---* 
---@return cc.Follow@ Follow#Follow self (return value: cc.Follow)
function Follow:stop() end
---* 
---@return cc.Follow@ Follow#Follow ret (return value: cc.Follow)
function Follow:reverse() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Follow:isDone() end
---* js ctor
---@return cc.Follow@ Follow#Follow self (return value: cc.Follow)
function Follow:Follow() end


---@class ccs.Frame :  Ref
local Frame={ }
---@class Frame : ccs.Frame
ccs.Frame=Frame


---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function Frame:clone() end
---* 
---@param tweenType int@ #int tweenType
---@return ccs.Frame@ Frame#Frame self (return value: ccs.Frame)
function Frame:setTweenType(tweenType) end
---* 
---@param node cc.Node@ #cc.Node node
---@return ccs.Frame@ Frame#Frame self (return value: ccs.Frame)
function Frame:setNode(node) end
---* 
---@param timeline ccs.Timeline@ #ccs.Timeline timeline
---@return ccs.Frame@ Frame#Frame self (return value: ccs.Frame)
function Frame:setTimeline(timeline) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Frame:isEnterWhenPassed() end
---* 
---@return int@ int#int ret (return value: int)
function Frame:getTweenType() end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function Frame:getEasingParams() end
---* 
---@param easingParams array_table@ #array_table easingParams
---@return ccs.Frame@ Frame#Frame self (return value: ccs.Frame)
function Frame:setEasingParams(easingParams) end
---* 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Frame:getFrameIndex() end
---* 
---@param percent float@ #float percent
---@return ccs.Frame@ Frame#Frame self (return value: ccs.Frame)
function Frame:apply(percent) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Frame:isTween() end
---* 
---@param frameIndex unsigned_int@ #unsigned int frameIndex
---@return ccs.Frame@ Frame#Frame self (return value: ccs.Frame)
function Frame:setFrameIndex(frameIndex) end
---* 
---@param tween boolean@ #bool tween
---@return ccs.Frame@ Frame#Frame self (return value: ccs.Frame)
function Frame:setTween(tween) end
---* 
---@return ccs.Timeline@ Timeline#Timeline ret (return value: ccs.Timeline)
function Frame:getTimeline() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Frame:getNode() end


---@class ccs.FrameData :  BaseData
local FrameData={ }
---@class FrameData : ccs.FrameData
ccs.FrameData=FrameData


---* 
---@param baseData ccs.BaseData@ #ccs.BaseData baseData
---@return ccs.FrameData@ FrameData#FrameData self (return value: ccs.FrameData)
function FrameData:copy(baseData) end
---* 
---@return ccs.FrameData@ FrameData#FrameData ret (return value: ccs.FrameData)
function FrameData:create() end
---* js ctor
---@return ccs.FrameData@ FrameData#FrameData self (return value: ccs.FrameData)
function FrameData:FrameData() end


---@class cc.GLProgram :  Ref
local GLProgram={ }
---@class GLProgram : cc.GLProgram
cc.GLProgram=GLProgram


---*  returns the fragmentShader error log 
---@return string@ string#string ret (return value: string)
function GLProgram:getFragmentShaderLog() end
---@param vShaderByteArray char@ #char vShaderByteArray
---@param fShaderByteArray char@ #char fShaderByteArray
---@param compileTimeHeaders string@ #string compileTimeHeaders
---@param compileTimeDefines string@ #string compileTimeDefines
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(vShaderByteArray:char,fShaderByteArray:char,compileTimeHeaders:string):boolean
---@overload fun(vShaderByteArray:char,fShaderByteArray:char):boolean
---@overload fun(vShaderByteArray:char,fShaderByteArray:char,compileTimeHeaders:string,compileTimeDefines:string):boolean
function GLProgram:initWithByteArrays(vShaderByteArray,fShaderByteArray,compileTimeHeaders,compileTimeDefines) end
---@param vShaderFilename string@ #string vShaderFilename
---@param fShaderFilename string@ #string fShaderFilename
---@param compileTimeHeaders string@ #string compileTimeHeaders
---@param compileTimeDefines string@ #string compileTimeDefines
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(vShaderFilename:string,fShaderFilename:string,compileTimeHeaders:string):boolean
---@overload fun(vShaderFilename:string,fShaderFilename:string):boolean
---@overload fun(vShaderFilename:string,fShaderFilename:string,compileTimeHeaders:string,compileTimeDefines:string):boolean
function GLProgram:initWithFilenames(vShaderFilename,fShaderFilename,compileTimeHeaders,compileTimeDefines) end
---*  it will call glUseProgram() 
---@return cc.GLProgram@ GLProgram#GLProgram self (return value: cc.GLProgram)
function GLProgram:use() end
---*  returns the vertexShader error log 
---@return string@ string#string ret (return value: string)
function GLProgram:getVertexShaderLog() end
---@param modelView mat4_table@ #mat4_table modelView
---@return cc.GLProgram@ GLProgram#GLProgram self (return value: cc.GLProgram)
---@overload fun():cc.GLProgram
---@overload fun(modelView:mat4_table):cc.GLProgram
function GLProgram:setUniformsForBuiltins(modelView) end
---*  It will create 4 uniforms:<br>
---* - kUniformPMatrix<br>
---* - kUniformMVMatrix<br>
---* - kUniformMVPMatrix<br>
---* - GLProgram::UNIFORM_SAMPLER<br>
---* And it will bind "GLProgram::UNIFORM_SAMPLER" to 0
---@return cc.GLProgram@ GLProgram#GLProgram self (return value: cc.GLProgram)
function GLProgram:updateUniforms() end
---*  calls glUniform1i only if the values are different than the previous call for this same shader program.<br>
---* js setUniformLocationI32<br>
---* lua setUniformLocationI32
---@param location int@ #int location
---@param i1 int@ #int i1
---@return cc.GLProgram@ GLProgram#GLProgram self (return value: cc.GLProgram)
function GLProgram:setUniformLocationWith1i(location,i1) end
---*  Reload all shaders, this function is designed for android<br>
---* when opengl context lost, so don't call it.
---@return cc.GLProgram@ GLProgram#GLProgram self (return value: cc.GLProgram)
function GLProgram:reset() end
---*   It will add a new attribute to the shader by calling glBindAttribLocation. 
---@param attributeName string@ #string attributeName
---@param index unsigned_int@ #unsigned int index
---@return cc.GLProgram@ GLProgram#GLProgram self (return value: cc.GLProgram)
function GLProgram:bindAttribLocation(attributeName,index) end
---*  Calls glGetAttribLocation. 
---@param attributeName string@ #string attributeName
---@return int@ int#int ret (return value: int)
function GLProgram:getAttribLocation(attributeName) end
---*  links the glProgram 
---@return boolean@ bool#bool ret (return value: bool)
function GLProgram:link() end
---@param vShaderByteArray char@ #char vShaderByteArray
---@param fShaderByteArray char@ #char fShaderByteArray
---@param compileTimeHeaders string@ #string compileTimeHeaders
---@param compileTimeDefines string@ #string compileTimeDefines
---@return cc.GLProgram@ GLProgram#GLProgram ret (return value: cc.GLProgram)
---@overload fun(vShaderByteArray:char,fShaderByteArray:char,compileTimeHeaders:string):cc.GLProgram
---@overload fun(vShaderByteArray:char,fShaderByteArray:char):cc.GLProgram
---@overload fun(vShaderByteArray:char,fShaderByteArray:char,compileTimeHeaders:string,compileTimeDefines:string):cc.GLProgram
function GLProgram:createWithByteArrays(vShaderByteArray,fShaderByteArray,compileTimeHeaders,compileTimeDefines) end
---@param vShaderFilename string@ #string vShaderFilename
---@param fShaderFilename string@ #string fShaderFilename
---@param compileTimeHeaders string@ #string compileTimeHeaders
---@param compileTimeDefines string@ #string compileTimeDefines
---@return cc.GLProgram@ GLProgram#GLProgram ret (return value: cc.GLProgram)
---@overload fun(vShaderFilename:string,fShaderFilename:string,compileTimeHeaders:string):cc.GLProgram
---@overload fun(vShaderFilename:string,fShaderFilename:string):cc.GLProgram
---@overload fun(vShaderFilename:string,fShaderFilename:string,compileTimeHeaders:string,compileTimeDefines:string):cc.GLProgram
function GLProgram:createWithFilenames(vShaderFilename,fShaderFilename,compileTimeHeaders,compileTimeDefines) end
---* Constructor.
---@return cc.GLProgram@ GLProgram#GLProgram self (return value: cc.GLProgram)
function GLProgram:GLProgram() end


---@class cc.GLProgramCache :  Ref
local GLProgramCache={ }
---@class GLProgramCache : cc.GLProgramCache
cc.GLProgramCache=GLProgramCache


---*  reload default programs these are relative to light 
---@return cc.GLProgramCache@ GLProgramCache#GLProgramCache self (return value: cc.GLProgramCache)
function GLProgramCache:reloadDefaultGLProgramsRelativeToLights() end
---*  adds a GLProgram to the cache for a given name 
---@param program cc.GLProgram@ #cc.GLProgram program
---@param key string@ #string key
---@return cc.GLProgramCache@ GLProgramCache#GLProgramCache self (return value: cc.GLProgramCache)
function GLProgramCache:addGLProgram(program,key) end
---*  reload the default shaders 
---@return cc.GLProgramCache@ GLProgramCache#GLProgramCache self (return value: cc.GLProgramCache)
function GLProgramCache:reloadDefaultGLPrograms() end
---*  loads the default shaders 
---@return cc.GLProgramCache@ GLProgramCache#GLProgramCache self (return value: cc.GLProgramCache)
function GLProgramCache:loadDefaultGLPrograms() end
---*  returns a GL program for a given key 
---@param key string@ #string key
---@return cc.GLProgram@ GLProgram#GLProgram ret (return value: cc.GLProgram)
function GLProgramCache:getGLProgram(key) end
---*  purges the cache. It releases the retained instance. 
---@return cc.GLProgramCache@ GLProgramCache#GLProgramCache self (return value: cc.GLProgramCache)
function GLProgramCache:destroyInstance() end
---*  returns the shared instance 
---@return cc.GLProgramCache@ GLProgramCache#GLProgramCache ret (return value: cc.GLProgramCache)
function GLProgramCache:getInstance() end
---* Constructor.<br>
---* js ctor
---@return cc.GLProgramCache@ GLProgramCache#GLProgramCache self (return value: cc.GLProgramCache)
function GLProgramCache:GLProgramCache() end


---@class cc.GLProgramState :  Ref
local GLProgramState={ }
---@class GLProgramState : cc.GLProgramState
cc.GLProgramState=GLProgramState


---*  Get the flag of vertex attribs used by OR operation.
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function GLProgramState:getVertexAttribsFlags() end
---@param uniformName string@ #string uniformName
---@param value vec4_table@ #vec4_table value
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,value:vec4_table):cc.GLProgramState
---@overload fun(uniformName:string,value:vec4_table):cc.GLProgramState
function GLProgramState:setUniformVec4(uniformName,value) end
---* Applies the specified custom auto-binding.<br>
---* param uniformName Name of the shader uniform.<br>
---* param autoBinding Name of the auto binding.
---@param uniformName string@ #string uniformName
---@param autoBinding string@ #string autoBinding
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:applyAutoBinding(uniformName,autoBinding) end
---@param uniformName string@ #string uniformName
---@param value vec2_table@ #vec2_table value
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,value:vec2_table):cc.GLProgramState
---@overload fun(uniformName:string,value:vec2_table):cc.GLProgramState
function GLProgramState:setUniformVec2(uniformName,value) end
---@param uniformName string@ #string uniformName
---@param value vec3_table@ #vec3_table value
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,value:vec3_table):cc.GLProgramState
---@overload fun(uniformName:string,value:vec3_table):cc.GLProgramState
function GLProgramState:setUniformVec3(uniformName,value) end
---* Apply GLProgram, attributes and uniforms.<br>
---* param modelView The applied modelView matrix to shader.
---@param modelView mat4_table@ #mat4_table modelView
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:apply(modelView) end
---* Returns the Node bound to the GLProgramState
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function GLProgramState:getNodeBinding() end
---@param uniformName string@ #string uniformName
---@param size int@ #int size
---@param pointer vec4_table@ #vec4_table pointer
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,size:int,pointer:vec4_table):cc.GLProgramState
---@overload fun(uniformName:string,size:int,pointer:vec4_table):cc.GLProgramState
function GLProgramState:setUniformVec4v(uniformName,size,pointer) end
---* Apply GLProgram, and built in uniforms.<br>
---* param modelView The applied modelView matrix to shader.
---@param modelView mat4_table@ #mat4_table modelView
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:applyGLProgram(modelView) end
---* Sets the node that this render state is bound to.<br>
---* The specified node is used to apply auto-bindings for the render state.<br>
---* This is typically set to the node of the model that a material is<br>
---* applied to.<br>
---* param node The node to use for applying auto-bindings.
---@param node cc.Node@ #cc.Node node
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:setNodeBinding(node) end
---@param uniformName string@ #string uniformName
---@param value int@ #int value
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,value:int):cc.GLProgramState
---@overload fun(uniformName:string,value:int):cc.GLProgramState
function GLProgramState:setUniformInt(uniformName,value) end
---* Sets a uniform auto-binding.<br>
---* This method parses the passed in autoBinding string and attempts to convert it<br>
---* to an enumeration value. If it matches to one of the predefined strings, it will create a<br>
---* callback to get the correct value at runtime.<br>
---* param uniformName The name of the material parameter to store an auto-binding for.<br>
---* param autoBinding A string matching one of the built-in AutoBinding enum constants.
---@param uniformName string@ #string uniformName
---@param autoBinding string@ #string autoBinding
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:setParameterAutoBinding(uniformName,autoBinding) end
---@param uniformName string@ #string uniformName
---@param size int@ #int size
---@param pointer vec2_table@ #vec2_table pointer
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,size:int,pointer:vec2_table):cc.GLProgramState
---@overload fun(uniformName:string,size:int,pointer:vec2_table):cc.GLProgramState
function GLProgramState:setUniformVec2v(uniformName,size,pointer) end
---* Get the number of user defined uniform count.
---@return int@ int#int ret (return value: int)
function GLProgramState:getUniformCount() end
---* Apply attributes.<br>
---* param applyAttribFlags Call GL::enableVertexAttribs(_vertexAttribsFlags) or not.
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:applyAttributes() end
---*  Returns a new copy of the GLProgramState. The GLProgram is reused 
---@return cc.GLProgramState@ GLProgramState#GLProgramState ret (return value: cc.GLProgramState)
function GLProgramState:clone() end
---* Setter and Getter of the owner GLProgram binded in this program state.
---@param glprogram cc.GLProgram@ #cc.GLProgram glprogram
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:setGLProgram(glprogram) end
---@param uniformName string@ #string uniformName
---@param size int@ #int size
---@param pointer float@ #float pointer
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,size:int,pointer:float):cc.GLProgramState
---@overload fun(uniformName:string,size:int,pointer:float):cc.GLProgramState
function GLProgramState:setUniformFloatv(uniformName,size,pointer) end
---* 
---@return cc.GLProgram@ GLProgram#GLProgram ret (return value: cc.GLProgram)
function GLProgramState:getGLProgram() end
---@param uniformName string@ #string uniformName
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,texture:cc.Texture2D):cc.GLProgramState
---@overload fun(uniformName:string,texture:cc.Texture2D):cc.GLProgramState
function GLProgramState:setUniformTexture(uniformName,texture) end
---* Apply user defined uniforms.
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
function GLProgramState:applyUniforms() end
---@param uniformName string@ #string uniformName
---@param value float@ #float value
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,value:float):cc.GLProgramState
---@overload fun(uniformName:string,value:float):cc.GLProgramState
function GLProgramState:setUniformFloat(uniformName,value) end
---@param uniformName string@ #string uniformName
---@param value mat4_table@ #mat4_table value
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,value:mat4_table):cc.GLProgramState
---@overload fun(uniformName:string,value:mat4_table):cc.GLProgramState
function GLProgramState:setUniformMat4(uniformName,value) end
---@param uniformName string@ #string uniformName
---@param size int@ #int size
---@param pointer vec3_table@ #vec3_table pointer
---@return cc.GLProgramState@ GLProgramState#GLProgramState self (return value: cc.GLProgramState)
---@overload fun(unkown0:int,size:int,pointer:vec3_table):cc.GLProgramState
---@overload fun(uniformName:string,size:int,pointer:vec3_table):cc.GLProgramState
function GLProgramState:setUniformVec3v(uniformName,size,pointer) end
---* Get the number of vertex attributes.
---@return int@ int#int ret (return value: int)
function GLProgramState:getVertexAttribCount() end
---*  returns a new instance of GLProgramState for a given GLProgram 
---@param glprogram cc.GLProgram@ #cc.GLProgram glprogram
---@return cc.GLProgramState@ GLProgramState#GLProgramState ret (return value: cc.GLProgramState)
function GLProgramState:create(glprogram) end
---@param glProgramName string@ #string glProgramName
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.GLProgramState@ GLProgramState#GLProgramState ret (return value: cc.GLProgramState)
---@overload fun(glProgramName:string,texture:cc.Texture2D):cc.GLProgramState
---@overload fun(glProgramName:string):cc.GLProgramState
function GLProgramState:getOrCreateWithGLProgramName(glProgramName,texture) end
---*  gets-or-creates an instance of GLProgramState for a given GLProgram 
---@param glprogram cc.GLProgram@ #cc.GLProgram glprogram
---@return cc.GLProgramState@ GLProgramState#GLProgramState ret (return value: cc.GLProgramState)
function GLProgramState:getOrCreateWithGLProgram(glprogram) end
---*  gets-or-creates an instance of GLProgramState for given shaders 
---@param vertexShader string@ #string vertexShader
---@param fragShader string@ #string fragShader
---@param compileTimeDefines string@ #string compileTimeDefines
---@return cc.GLProgramState@ GLProgramState#GLProgramState ret (return value: cc.GLProgramState)
function GLProgramState:getOrCreateWithShaders(vertexShader,fragShader,compileTimeDefines) end


---@class cc.GLView :  Ref
local GLView={ }
---@class GLView : cc.GLView
cc.GLView=GLView


---* Set the frame size of EGL view.<br>
---* param width The width of the fram size.<br>
---* param height The height of the fram size.
---@param width float@ #float width
---@param height float@ #float height
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setFrameSize(width,height) end
---* Get the opengl view port rectangle.<br>
---* return Return the opengl view port rectangle.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function GLView:getViewPortRect() end
---* Get scale factor of the vertical direction.<br>
---* return Scale factor of the vertical direction.
---@return float@ float#float ret (return value: float)
function GLView:getScaleY() end
---*  Only works on ios platform. Set Content Scale of the Factor. 
---@param t floa@ #float 
---@return boolean@ bool#bool ret (return value: bool)
function GLView:setContentScaleFactor(t) end
---*  Only works on ios platform. Get Content Scale of the Factor. 
---@return float@ float#float ret (return value: float)
function GLView:getContentScaleFactor() end
---*  Open or close IME keyboard , subclass must implement this method. <br>
---* param open Open or close IME keyboard.
---@param open boolean@ #bool open
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setIMEKeyboardState(open) end
---* Gets safe area rectangle
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function GLView:getSafeAreaRect() end
---* 
---@return cc.VRIRenderer@ VRIRenderer#VRIRenderer ret (return value: cc.VRIRenderer)
function GLView:getVR() end
---* Set Scissor rectangle with points.<br>
---* param x Set the points of x.<br>
---* param y Set the points of y.<br>
---* param w Set the width of  the view port<br>
---* param h Set the Height of the view port.
---@param x float@ #float x
---@param y float@ #float y
---@param w float@ #float w
---@param h float@ #float h
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setScissorInPoints(x,y,w,h) end
---*  Get the view name.<br>
---* return The view name.
---@return string@ string#string ret (return value: string)
function GLView:getViewName() end
---*  Get whether opengl render system is ready, subclass must implement this method. 
---@return boolean@ bool#bool ret (return value: bool)
function GLView:isOpenGLReady() end
---* Hide or Show the mouse cursor if there is one.<br>
---* param isVisible Hide or Show the mouse cursor if there is one.
---@param l boo@ #bool 
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setCursorVisible(l) end
---* Get the frame size of EGL view.<br>
---* In general, it returns the screen size since the EGL view is a fullscreen view.<br>
---* return The frame size of EGL view.
---@return size_table@ size_table#size_table ret (return value: size_table)
function GLView:getFrameSize() end
---*  Set default window icon (implemented for windows and linux).<br>
---* On windows it will use icon from .exe file (if included).<br>
---* On linux it will use default window icon.
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setDefaultIcon() end
---* Get scale factor of the horizontal direction.<br>
---* return Scale factor of the horizontal direction.
---@return float@ float#float ret (return value: float)
function GLView:getScaleX() end
---* Get the visible origin point of opengl viewport.<br>
---* return The visible origin point of opengl viewport.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function GLView:getVisibleOrigin() end
---*  Set zoom factor for frame. This methods are for<br>
---* debugging big resolution (e.g.new ipad) app on desktop.<br>
---* param zoomFactor The zoom factor for frame.
---@param t floa@ #float 
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setFrameZoomFactor(t) end
---*  Get zoom factor for frame. This methods are for<br>
---* debugging big resolution (e.g.new ipad) app on desktop.<br>
---* return The zoom factor for frame.
---@return float@ float#float ret (return value: float)
function GLView:getFrameZoomFactor() end
---*  Get design resolution size.<br>
---* Default resolution size is the same as 'getFrameSize'.<br>
---* return The design resolution size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function GLView:getDesignResolutionSize() end
---@param filename string@ #string filename
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
---@overload fun(unkown0:array_table):cc.GLView
---@overload fun(filename:string):cc.GLView
function GLView:setIcon(filename) end
---* Sets the cursor for the window back to default.
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setDefaultCursor() end
---*  When the window is closed, it will return false if the platforms is Ios or Android.<br>
---* If the platforms is windows or Mac,it will return true.<br>
---* return In ios and android it will return false,if in windows or Mac it will return true.
---@return boolean@ bool#bool ret (return value: bool)
function GLView:windowShouldClose() end
---*  Exchanges the front and back buffers, subclass must implement this method. 
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:swapBuffers() end
---* Set the design resolution size.<br>
---* param width Design resolution width.<br>
---* param height Design resolution height.<br>
---* param resolutionPolicy The resolution policy desired, you may choose:<br>
---* [1] EXACT_FIT Fill screen by stretch-to-fit: if the design resolution ratio of width to height is different from the screen resolution ratio, your game view will be stretched.<br>
---* [2] NO_BORDER Full screen without black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two areas of your game view will be cut.<br>
---* [3] SHOW_ALL  Full screen with black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two black borders will be shown.
---@param width float@ #float width
---@param height float@ #float height
---@param resolutionPolicy int@ #int resolutionPolicy
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setDesignResolutionSize(width,height,resolutionPolicy) end
---*  Returns the current Resolution policy.<br>
---* return The current Resolution policy.
---@return int@ int#int ret (return value: int)
function GLView:getResolutionPolicy() end
---*  Force destroying EGL view, subclass must implement this method. <br>
---* lua endToLua
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:endToLua() end
---*  Returns whether or not the view is in Retina Display mode.<br>
---* return Returns whether or not the view is in Retina Display mode.
---@return boolean@ bool#bool ret (return value: bool)
function GLView:isRetinaDisplay() end
---* Renders a Scene with a Renderer<br>
---* This method is called directly by the Director
---@param scene cc.Scene@ #cc.Scene scene
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:renderScene(scene,renderer) end
---* Sets a VR renderer. <br>
---* if `vrrenderer` is `nullptr` VR will be disabled
---@param vrrenderer cc.VRIRenderer@ #cc.VRIRenderer vrrenderer
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setVR(vrrenderer) end
---* Set opengl view port rectangle with points.<br>
---* param x Set the points of x.<br>
---* param y Set the points of y.<br>
---* param w Set the width of  the view port<br>
---* param h Set the Height of the view port.
---@param x float@ #float x
---@param y float@ #float y
---@param w float@ #float w
---@param h float@ #float h
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setViewPortInPoints(x,y,w,h) end
---* Get the current scissor rectangle.<br>
---* return The current scissor rectangle.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function GLView:getScissorRect() end
---* Sets the cursor for the window with custom image.<br>
---* param filename A path to image file, e.g., "cursors/custom.png".<br>
---* param hotspot Cursor hotspot, as a anchor point, default is top left (0, 1)
---@param filename string@ #string filename
---@param hotspot vec2_table@ #vec2_table hotspot
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setCursor(filename,hotspot) end
---*  Get retina factor.<br>
---* return The retina factor.
---@return int@ int#int ret (return value: int)
function GLView:getRetinaFactor() end
---*  Set the view name. <br>
---* param viewname A string will be set to the view as name.
---@param viewname string@ #string viewname
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setViewName(viewname) end
---* Get the visible rectangle of opengl viewport.<br>
---* return The visible rectangle of opengl viewport.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function GLView:getVisibleRect() end
---* Get the visible area size of opengl viewport.<br>
---* return The visible area size of opengl viewport.
---@return size_table@ size_table#size_table ret (return value: size_table)
function GLView:getVisibleSize() end
---* Get whether GL_SCISSOR_TEST is enable.<br>
---* return Whether GL_SCISSOR_TEST is enable.
---@return boolean@ bool#bool ret (return value: bool)
function GLView:isScissorEnabled() end
---*  Polls the events. 
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:pollEvents() end
---*  Static method and member so that we can modify it on all platforms before create OpenGL context. <br>
---* param glContextAttrs The OpenGL context attrs.
---@param glContextAttrs GLContextAttrs@ #GLContextAttrs glContextAttrs
---@return cc.GLView@ GLView#GLView self (return value: cc.GLView)
function GLView:setGLContextAttrs(glContextAttrs) end
---*  Return the OpenGL context attrs. <br>
---* return Return the OpenGL context attrs.
---@return GLContextAttrs@ GLContextAttrs#GLContextAttrs ret (return value: GLContextAttrs)
function GLView:getGLContextAttrs() end


---@class cc.GLViewImpl :  GLView
local GLViewImpl={ }
---@class GLViewImpl : cc.GLViewImpl
cc.GLViewImpl=GLViewImpl


---* 
---@param viewName string@ #string viewName
---@param rect rect_table@ #rect_table rect
---@param frameZoomFactor float@ #float frameZoomFactor
---@return cc.GLViewImpl@ GLViewImpl#GLViewImpl ret (return value: cc.GLViewImpl)
function GLViewImpl:createWithRect(viewName,rect,frameZoomFactor) end
---* 
---@param viewname string@ #string viewname
---@return cc.GLViewImpl@ GLViewImpl#GLViewImpl ret (return value: cc.GLViewImpl)
function GLViewImpl:create(viewname) end
---* 
---@param viewName string@ #string viewName
---@return cc.GLViewImpl@ GLViewImpl#GLViewImpl ret (return value: cc.GLViewImpl)
function GLViewImpl:createWithFullScreen(viewName) end
---* 
---@param bOpen boolean@ #bool bOpen
---@return cc.GLViewImpl@ GLViewImpl#GLViewImpl self (return value: cc.GLViewImpl)
function GLViewImpl:setIMEKeyboardState(bOpen) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function GLViewImpl:isOpenGLReady() end
---* 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function GLViewImpl:getSafeAreaRect() end


---@class cc.Grid3D :  GridBase
local Grid3D={ }
---@class Grid3D : cc.Grid3D
cc.Grid3D=Grid3D


---* 
---@return boolean@ bool#bool ret (return value: bool)
function Grid3D:getNeedDepthTestForBlit() end
---* Getter and Setter for depth test state when blit.<br>
---* js NA
---@param neededDepthTest boolean@ #bool neededDepthTest
---@return cc.Grid3D@ Grid3D#Grid3D self (return value: cc.Grid3D)
function Grid3D:setNeedDepthTestForBlit(neededDepthTest) end
---@param gridSize size_table@ #size_table gridSize
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param flipped boolean@ #bool flipped
---@param rect rect_table@ #rect_table rect
---@return cc.Grid3D@ Grid3D#Grid3D ret (return value: cc.Grid3D)
---@overload fun(gridSize:size_table,unkown1:rect_table):cc.Grid3D
---@overload fun(gridSize:size_table):cc.Grid3D
---@overload fun(gridSize:size_table,texture:cc.Texture2D,flipped:boolean):cc.Grid3D
---@overload fun(gridSize:size_table,texture:cc.Texture2D,flipped:boolean,rect:rect_table):cc.Grid3D
function Grid3D:create(gridSize,texture,flipped,rect) end
---* 
---@return cc.Grid3D@ Grid3D#Grid3D self (return value: cc.Grid3D)
function Grid3D:calculateVertexPoints() end
---* Implementations for interfaces in base class.
---@return cc.Grid3D@ Grid3D#Grid3D self (return value: cc.Grid3D)
function Grid3D:beforeBlit() end
---* 
---@return cc.Grid3D@ Grid3D#Grid3D self (return value: cc.Grid3D)
function Grid3D:afterBlit() end
---* 
---@return cc.Grid3D@ Grid3D#Grid3D self (return value: cc.Grid3D)
function Grid3D:reuse() end
---* 
---@return cc.Grid3D@ Grid3D#Grid3D self (return value: cc.Grid3D)
function Grid3D:blit() end
---* Constructor.<br>
---* js ctor
---@return cc.Grid3D@ Grid3D#Grid3D self (return value: cc.Grid3D)
function Grid3D:Grid3D() end


---@class cc.Grid3DAction :  GridAction
local Grid3DAction={ }
---@class Grid3DAction : cc.Grid3DAction
cc.Grid3DAction=Grid3DAction


---* brief Get the effect grid rect.<br>
---* return Return the effect grid rect.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Grid3DAction:getGridRect() end
---* 
---@return cc.Grid3DAction@ Grid3DAction#Grid3DAction ret (return value: cc.Grid3DAction)
function Grid3DAction:clone() end
---* 
---@return cc.GridBase@ GridBase#GridBase ret (return value: cc.GridBase)
function Grid3DAction:getGrid() end


---@class cc.GridAction :  ActionInterval
local GridAction={ }
---@class GridAction : cc.GridAction
cc.GridAction=GridAction


---* brief Get the pointer of GridBase.<br>
---* return The pointer of GridBase.
---@return cc.GridBase@ GridBase#GridBase ret (return value: cc.GridBase)
function GridAction:getGrid() end
---* brief Initializes the action with size and duration.<br>
---* param duration The duration of the GridAction. It's a value in seconds.<br>
---* param gridSize The size of the GridAction should be.<br>
---* return Return true when the initialization success, otherwise return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@return boolean@ bool#bool ret (return value: bool)
function GridAction:initWithDuration(duration,gridSize) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.GridAction@ GridAction#GridAction self (return value: cc.GridAction)
function GridAction:startWithTarget(target) end
---* 
---@return cc.GridAction@ GridAction#GridAction ret (return value: cc.GridAction)
function GridAction:clone() end
---* 
---@return cc.GridAction@ GridAction#GridAction ret (return value: cc.GridAction)
function GridAction:reverse() end


---@class cc.GridBase :  Ref
local GridBase={ }
---@class GridBase : cc.GridBase
cc.GridBase=GridBase


---* Set the size of the grid.
---@param gridSize size_table@ #size_table gridSize
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:setGridSize(gridSize) end
---* brief Set the effect grid rect.<br>
---* param rect The effect grid rect.
---@param rect rect_table@ #rect_table rect
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:setGridRect(rect) end
---* 
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:afterBlit() end
---* brief Get the effect grid rect.<br>
---* return Return the effect grid rect.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function GridBase:getGridRect() end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:afterDraw(target) end
---* Init and reset the status when render effects by using the grid.
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:beforeDraw() end
---* Interface, Calculate the vertices used for the blit.
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:calculateVertexPoints() end
---*  is texture flipped. 
---@return boolean@ bool#bool ret (return value: bool)
function GridBase:isTextureFlipped() end
---*  Size of the grid. 
---@return size_table@ size_table#size_table ret (return value: size_table)
function GridBase:getGridSize() end
---*  Pixels between the grids. 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function GridBase:getStep() end
---* Change projection to 2D for grabbing.
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:set2DProjection() end
---* Get the pixels between the grids.
---@param step vec2_table@ #vec2_table step
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:setStep(step) end
---* Set the texture flipped or not.
---@param flipped boolean@ #bool flipped
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:setTextureFlipped(flipped) end
---* Interface used to blit the texture with grid to screen.
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:blit() end
---* 
---@param active boolean@ #bool active
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:setActive(active) end
---*  Get number of times that the grid will be reused. 
---@return int@ int#int ret (return value: int)
function GridBase:getReuseGrid() end
---@param gridSize size_table@ #size_table gridSize
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param flipped boolean@ #bool flipped
---@param rect rect_table@ #rect_table rect
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(gridSize:size_table,unkown1:rect_table):boolean
---@overload fun(gridSize:size_table):boolean
---@overload fun(gridSize:size_table,texture:cc.Texture2D,flipped:boolean):boolean
---@overload fun(gridSize:size_table,texture:cc.Texture2D,flipped:boolean,rect:rect_table):boolean
function GridBase:initWithSize(gridSize,texture,flipped,rect) end
---* Interface for custom action when before or after draw.<br>
---* js NA
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:beforeBlit() end
---*  Set number of times that the grid will be reused. 
---@param reuseGrid int@ #int reuseGrid
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:setReuseGrid(reuseGrid) end
---* Getter and setter of the active state of the grid.
---@return boolean@ bool#bool ret (return value: bool)
function GridBase:isActive() end
---* Interface, Reuse the grid vertices.
---@return cc.GridBase@ GridBase#GridBase self (return value: cc.GridBase)
function GridBase:reuse() end
---@param gridSize size_table@ #size_table gridSize
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param flipped boolean@ #bool flipped
---@return cc.GridBase@ GridBase#GridBase ret (return value: cc.GridBase)
---@overload fun(gridSize:size_table):cc.GridBase
---@overload fun(gridSize:size_table,texture:cc.Texture2D,flipped:boolean):cc.GridBase
function GridBase:create(gridSize,texture,flipped) end


---@class ccs.GUIReader :  Ref
local GUIReader={ }
---@class GUIReader : ccs.GUIReader
ccs.GUIReader=GUIReader


---* 
---@param strFilePath string@ #string strFilePath
---@return ccs.GUIReader@ GUIReader#GUIReader self (return value: ccs.GUIReader)
function GUIReader:setFilePath(strFilePath) end
---* 
---@param fileName char@ #char fileName
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function GUIReader:widgetFromJsonFile(fileName) end
---* 
---@return string@ string#string ret (return value: string)
function GUIReader:getFilePath() end
---* 
---@param fileName char@ #char fileName
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function GUIReader:widgetFromBinaryFile(fileName) end
---* 
---@param str char@ #char str
---@return int@ int#int ret (return value: int)
function GUIReader:getVersionInteger(str) end
---* 
---@return ccs.GUIReader@ GUIReader#GUIReader self (return value: ccs.GUIReader)
function GUIReader:destroyInstance() end
---* 
---@return ccs.GUIReader@ GUIReader#GUIReader ret (return value: ccs.GUIReader)
function GUIReader:getInstance() end


---@class ccui.HBox :  Layout
local HBox={ }
---@class HBox : ccui.HBox
ccui.HBox=HBox


---* 
---@param size size_table@ #size_table size
---@return boolean@ bool#bool ret (return value: bool)
function HBox:initWithSize(size) end
---@param size size_table@ #size_table size
---@return ccui.HBox@ HBox#HBox ret (return value: ccui.HBox)
---@overload fun(size:size_table):ccui.HBox
---@overload fun():ccui.HBox
function HBox:create(size) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function HBox:init() end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.HBox@ HBox#HBox self (return value: ccui.HBox)
function HBox:HBox() end


---@class ccui.Helper 
local Helper={ }
---@class Helper : ccui.Helper
ccui.Helper=Helper


---* brief Get a UTF8 substring from a std::string with a given start position and length<br>
---* Sample:  std::string str = "中国中国中国";  substr = getSubStringOfUTF8String(str,0,2) will = "中国"<br>
---* param str The source string.<br>
---* param start The start position of the substring.<br>
---* param length The length of the substring in UTF8 count<br>
---* return a UTF8 substring<br>
---* js NA
---@param str string@ #string str
---@param start unsigned_int@ #unsigned int start
---@param length unsigned_int@ #unsigned int length
---@return string@ string#string ret (return value: string)
function Helper:getSubStringOfUTF8String(str,start,length) end
---* brief Convert a node's boundingBox rect into screen coordinates.<br>
---* param node Any node pointer.<br>
---* return A Rect in screen coordinates.
---@param node cc.Node@ #cc.Node node
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Helper:convertBoundingBoxToScreen(node) end
---* Change the active property of Layout's @see `LayoutComponent`<br>
---* param active A boolean value.
---@param active boolean@ #bool active
---@return ccui.Helper@ Helper#Helper self (return value: ccui.Helper)
function Helper:changeLayoutSystemActiveState(active) end
---* Find a widget with a specific action tag from root widget<br>
---* This search will be recursive through all child widgets.<br>
---* param root The be searched root widget.<br>
---* param tag The widget action's tag.<br>
---* return Widget instance pointer.
---@param root ccui.Widget@ #ccui.Widget root
---@param tag int@ #int tag
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Helper:seekActionWidgetByActionTag(root,tag) end
---* Find a widget with a specific name from root widget.<br>
---* This search will be recursive through all child widgets.<br>
---* param root      The be searched root widget.<br>
---* param name      The widget name.<br>
---* return Widget instance pointer.
---@param root ccui.Widget@ #ccui.Widget root
---@param name string@ #string name
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Helper:seekWidgetByName(root,name) end
---* Find a widget with a specific tag from root widget.<br>
---* This search will be recursive through all child widgets.<br>
---* param root      The be searched root widget.<br>
---* param tag       The widget tag.<br>
---* return Widget instance pointer.
---@param root ccui.Widget@ #ccui.Widget root
---@param tag int@ #int tag
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Helper:seekWidgetByTag(root,tag) end
---* brief  restrict capInsetSize, when the capInsets's width is larger than the textureSize, it will restrict to 0,<br>
---* the height goes the same way as width.<br>
---* param  capInsets A user defined capInsets.<br>
---* param  textureSize  The size of a scale9enabled texture<br>
---* return a restricted capInset.
---@param capInsets rect_table@ #rect_table capInsets
---@param textureSize size_table@ #size_table textureSize
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Helper:restrictCapInsetRect(capInsets,textureSize) end
---* Refresh object and it's children layout state<br>
---* param rootNode   A Node* or Node* descendant instance pointer.
---@param rootNode cc.Node@ #cc.Node rootNode
---@return ccui.Helper@ Helper#Helper self (return value: ccui.Helper)
function Helper:doLayout(rootNode) end


---@class cc.Hide :  ActionInstant
local Hide={ }
---@class Hide : cc.Hide
cc.Hide=Hide


---*  Allocates and initializes the action.<br>
---* return An autoreleased Hide object.
---@return cc.Hide@ Hide#Hide ret (return value: cc.Hide)
function Hide:create() end
---* 
---@return cc.Hide@ Hide#Hide ret (return value: cc.Hide)
function Hide:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.Hide@ Hide#Hide self (return value: cc.Hide)
function Hide:update(time) end
---* 
---@return cc.ActionInstant@ ActionInstant#ActionInstant ret (return value: cc.ActionInstant)
function Hide:reverse() end
---* 
---@return cc.Hide@ Hide#Hide self (return value: cc.Hide)
function Hide:Hide() end


---@class cc.Image :  Ref
local Image={ }
---@class Image : cc.Image
cc.Image=Image


---* 
---@return boolean@ bool#bool ret (return value: bool)
function Image:hasPremultipliedAlpha() end
---* brief    Save Image data to the specified file, with specified format.<br>
---* param    filePath        the file's absolute path, including file suffix.<br>
---* param    isToRGB        whether the image is saved as RGB format.
---@param filename string@ #string filename
---@param isToRGB boolean@ #bool isToRGB
---@return boolean@ bool#bool ret (return value: bool)
function Image:saveToFile(filename,isToRGB) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Image:hasAlpha() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Image:isCompressed() end
---* 
---@return int@ int#int ret (return value: int)
function Image:getHeight() end
---* brief Load the image from the specified path.<br>
---* param path   the absolute file path.<br>
---* return true if loaded correctly.
---@param path string@ #string path
---@return boolean@ bool#bool ret (return value: bool)
function Image:initWithImageFile(path) end
---* 
---@return int@ int#int ret (return value: int)
function Image:getWidth() end
---* 
---@return int@ int#int ret (return value: int)
function Image:getBitPerPixel() end
---* 
---@return int@ int#int ret (return value: int)
function Image:getFileType() end
---* 
---@return string@ string#string ret (return value: string)
function Image:getFilePath() end
---* 
---@return int@ int#int ret (return value: int)
function Image:getNumberOfMipmaps() end
---* 
---@return int@ int#int ret (return value: int)
function Image:getRenderFormat() end
---*  treats (or not) PVR files as if they have alpha premultiplied.<br>
---* Since it is impossible to know at runtime if the PVR images have the alpha channel premultiplied, it is<br>
---* possible load them as if they have (or not) the alpha channel premultiplied.<br>
---* By default it is disabled.
---@param haveAlphaPremultiplied boolean@ #bool haveAlphaPremultiplied
---@return cc.Image@ Image#Image self (return value: cc.Image)
function Image:setPVRImagesHavePremultipliedAlpha(haveAlphaPremultiplied) end
---* Enables or disables premultiplied alpha for PNG files.<br>
---* param enabled (default: true)
---@param enabled boolean@ #bool enabled
---@return cc.Image@ Image#Image self (return value: cc.Image)
function Image:setPNGPremultipliedAlphaEnabled(enabled) end
---* js ctor
---@return cc.Image@ Image#Image self (return value: cc.Image)
function Image:Image() end


---@class ccui.ImageView :  Widget@BlendProtocol
local ImageView={ }
---@class ImageView : ccui.ImageView
ccui.ImageView=ImageView


---* Returns the blending function that is currently being used.<br>
---* return A BlendFunc structure with source and destination factor which specified pixel arithmetic.<br>
---* js NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function ImageView:getBlendFunc() end
---* Load texture for imageview.<br>
---* param fileName   file name of texture.<br>
---* param texType    @see `Widget::TextureResType`
---@param fileName string@ #string fileName
---@param texType int@ #int texType
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:loadTexture(fileName,texType) end
---* Sets the source blending function.<br>
---* param blendFunc A structure with source and destination factor to specify pixel arithmetic. e.g. {GL_ONE, GL_ONE}, {GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA}.<br>
---* js NA<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:setBlendFunc(blendFunc) end
---* 
---@param imageFileName string@ #string imageFileName
---@param texType int@ #int texType
---@return boolean@ bool#bool ret (return value: bool)
function ImageView:init(imageFileName,texType) end
---* Enable scale9 renderer.<br>
---* param enabled Set to true will use scale9 renderer, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:setScale9Enabled(enabled) end
---* Updates the texture rect of the ImageView in points.<br>
---* It will call setTextureRect:rotated:untrimmedSize with rotated = NO, and utrimmedSize = rect.size.
---@param rect rect_table@ #rect_table rect
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:setTextureRect(rect) end
---* Sets capInsets for imageview.<br>
---* The capInsets affects the ImageView's renderer only if `setScale9Enabled(true)` is called.<br>
---* param capInsets    capinsets for imageview
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:setCapInsets(capInsets) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function ImageView:getRenderFile() end
---* Get ImageView's capInsets size.<br>
---* return Query capInsets size in Rect<br>
---* see `setCapInsets(const Rect&)`
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function ImageView:getCapInsets() end
---* Query whether button is using scale9 renderer or not.<br>
---* return whether button use scale9 renderer or not.
---@return boolean@ bool#bool ret (return value: bool)
function ImageView:isScale9Enabled() end
---@param imageFileName string@ #string imageFileName
---@param texType int@ #int texType
---@return ccui.ImageView@ ImageView#ImageView ret (return value: ccui.ImageView)
---@overload fun(imageFileName:string,texType:int):ccui.ImageView
---@overload fun():ccui.ImageView
function ImageView:create(imageFileName,texType) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ImageView:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ImageView:getVirtualRenderer() end
---* 
---@param ignore boolean@ #bool ignore
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:ignoreContentAdaptWithSize(ignore) end
---* 
---@return string@ string#string ret (return value: string)
function ImageView:getDescription() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ImageView:init() end
---* 
---@param glProgram cc.GLProgram@ #cc.GLProgram glProgram
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:setGLProgram(glProgram) end
---* 
---@param glProgramState cc.GLProgramState@ #cc.GLProgramState glProgramState
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:setGLProgramState(glProgramState) end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function ImageView:getVirtualRendererSize() end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.ImageView@ ImageView#ImageView self (return value: ccui.ImageView)
function ImageView:ImageView() end


---@class ccs.InnerActionFrame :  Frame
local InnerActionFrame={ }
---@class InnerActionFrame : ccs.InnerActionFrame
ccs.InnerActionFrame=InnerActionFrame


---* 
---@return int@ int#int ret (return value: int)
function InnerActionFrame:getEndFrameIndex() end
---* 
---@return int@ int#int ret (return value: int)
function InnerActionFrame:getStartFrameIndex() end
---* 
---@return int@ int#int ret (return value: int)
function InnerActionFrame:getInnerActionType() end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame self (return value: ccs.InnerActionFrame)
function InnerActionFrame:setEndFrameIndex(frameIndex) end
---* 
---@param isEnterWithName boolean@ #bool isEnterWithName
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame self (return value: ccs.InnerActionFrame)
function InnerActionFrame:setEnterWithName(isEnterWithName) end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame self (return value: ccs.InnerActionFrame)
function InnerActionFrame:setSingleFrameIndex(frameIndex) end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame self (return value: ccs.InnerActionFrame)
function InnerActionFrame:setStartFrameIndex(frameIndex) end
---* 
---@return int@ int#int ret (return value: int)
function InnerActionFrame:getSingleFrameIndex() end
---* 
---@param type int@ #int type
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame self (return value: ccs.InnerActionFrame)
function InnerActionFrame:setInnerActionType(type) end
---* 
---@param animationNamed string@ #string animationNamed
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame self (return value: ccs.InnerActionFrame)
function InnerActionFrame:setAnimationName(animationNamed) end
---* 
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame ret (return value: ccs.InnerActionFrame)
function InnerActionFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function InnerActionFrame:clone() end
---* 
---@return ccs.InnerActionFrame@ InnerActionFrame#InnerActionFrame self (return value: ccs.InnerActionFrame)
function InnerActionFrame:InnerActionFrame() end


---@class cc.JumpBy :  ActionInterval
local JumpBy={ }
---@class JumpBy : cc.JumpBy
cc.JumpBy=JumpBy


---* initializes the action<br>
---* param duration in seconds
---@param duration float@ #float duration
---@param position vec2_table@ #vec2_table position
---@param height float@ #float height
---@param jumps int@ #int jumps
---@return boolean@ bool#bool ret (return value: bool)
function JumpBy:initWithDuration(duration,position,height,jumps) end
---* Creates the action.<br>
---* param duration Duration time, in seconds.<br>
---* param position The jumping distance.<br>
---* param height The jumping height.<br>
---* param jumps The jumping times.<br>
---* return An autoreleased JumpBy object.
---@param duration float@ #float duration
---@param position vec2_table@ #vec2_table position
---@param height float@ #float height
---@param jumps int@ #int jumps
---@return cc.JumpBy@ JumpBy#JumpBy ret (return value: cc.JumpBy)
function JumpBy:create(duration,position,height,jumps) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.JumpBy@ JumpBy#JumpBy self (return value: cc.JumpBy)
function JumpBy:startWithTarget(target) end
---* 
---@return cc.JumpBy@ JumpBy#JumpBy ret (return value: cc.JumpBy)
function JumpBy:clone() end
---* 
---@return cc.JumpBy@ JumpBy#JumpBy ret (return value: cc.JumpBy)
function JumpBy:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.JumpBy@ JumpBy#JumpBy self (return value: cc.JumpBy)
function JumpBy:update(time) end
---* 
---@return cc.JumpBy@ JumpBy#JumpBy self (return value: cc.JumpBy)
function JumpBy:JumpBy() end


---@class cc.JumpTiles3D :  TiledGrid3DAction
local JumpTiles3D={ }
---@class JumpTiles3D : cc.JumpTiles3D
cc.JumpTiles3D=JumpTiles3D


---* brief Set the amplitude rate of the effect.<br>
---* param amplitudeRate The value of amplitude rate will be set.
---@param amplitudeRate float@ #float amplitudeRate
---@return cc.JumpTiles3D@ JumpTiles3D#JumpTiles3D self (return value: cc.JumpTiles3D)
function JumpTiles3D:setAmplitudeRate(amplitudeRate) end
---* brief Initializes the action with the number of jumps, the sin amplitude, the grid size and the duration.<br>
---* param duration Specify the duration of the JumpTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param numberOfJumps Specify the jump tiles count.<br>
---* param amplitude Specify the amplitude of the JumpTiles3D action.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param numberOfJumps unsigned_int@ #unsigned int numberOfJumps
---@param amplitude float@ #float amplitude
---@return boolean@ bool#bool ret (return value: bool)
function JumpTiles3D:initWithDuration(duration,gridSize,numberOfJumps,amplitude) end
---* brief Get the amplitude of the effect.<br>
---* return Return the amplitude of the effect.
---@return float@ float#float ret (return value: float)
function JumpTiles3D:getAmplitude() end
---* brief Get the amplitude rate of the effect.<br>
---* return Return the amplitude rate of the effect.
---@return float@ float#float ret (return value: float)
function JumpTiles3D:getAmplitudeRate() end
---* brief Set the amplitude to the effect.<br>
---* param amplitude The value of amplitude will be set.
---@param amplitude float@ #float amplitude
---@return cc.JumpTiles3D@ JumpTiles3D#JumpTiles3D self (return value: cc.JumpTiles3D)
function JumpTiles3D:setAmplitude(amplitude) end
---* brief Create the action with the number of jumps, the sin amplitude, the grid size and the duration.<br>
---* param duration Specify the duration of the JumpTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param numberOfJumps Specify the jump tiles count.<br>
---* param amplitude Specify the amplitude of the JumpTiles3D action.<br>
---* return If the creation success, return a pointer of JumpTiles3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param numberOfJumps unsigned_int@ #unsigned int numberOfJumps
---@param amplitude float@ #float amplitude
---@return cc.JumpTiles3D@ JumpTiles3D#JumpTiles3D ret (return value: cc.JumpTiles3D)
function JumpTiles3D:create(duration,gridSize,numberOfJumps,amplitude) end
---* 
---@return cc.JumpTiles3D@ JumpTiles3D#JumpTiles3D ret (return value: cc.JumpTiles3D)
function JumpTiles3D:clone() end
---* 
---@param time float@ #float time
---@return cc.JumpTiles3D@ JumpTiles3D#JumpTiles3D self (return value: cc.JumpTiles3D)
function JumpTiles3D:update(time) end
---* 
---@return cc.JumpTiles3D@ JumpTiles3D#JumpTiles3D self (return value: cc.JumpTiles3D)
function JumpTiles3D:JumpTiles3D() end


---@class cc.JumpTo :  JumpBy
local JumpTo={ }
---@class JumpTo : cc.JumpTo
cc.JumpTo=JumpTo


---* initializes the action<br>
---* param duration In seconds.
---@param duration float@ #float duration
---@param position vec2_table@ #vec2_table position
---@param height float@ #float height
---@param jumps int@ #int jumps
---@return boolean@ bool#bool ret (return value: bool)
function JumpTo:initWithDuration(duration,position,height,jumps) end
---* Creates the action.<br>
---* param duration Duration time, in seconds.<br>
---* param position The jumping destination position.<br>
---* param height The jumping height.<br>
---* param jumps The jumping times.<br>
---* return An autoreleased JumpTo object.
---@param duration float@ #float duration
---@param position vec2_table@ #vec2_table position
---@param height float@ #float height
---@param jumps int@ #int jumps
---@return cc.JumpTo@ JumpTo#JumpTo ret (return value: cc.JumpTo)
function JumpTo:create(duration,position,height,jumps) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.JumpTo@ JumpTo#JumpTo self (return value: cc.JumpTo)
function JumpTo:startWithTarget(target) end
---* 
---@return cc.JumpTo@ JumpTo#JumpTo ret (return value: cc.JumpTo)
function JumpTo:clone() end
---* 
---@return cc.JumpTo@ JumpTo#JumpTo ret (return value: cc.JumpTo)
function JumpTo:reverse() end
---* 
---@return cc.JumpTo@ JumpTo#JumpTo self (return value: cc.JumpTo)
function JumpTo:JumpTo() end


---@class cc.Label :  Node@LabelProtocol,BlendProtocol
local Label={ }
---@class Label : cc.Label
cc.Label=Label


---* 
---@return boolean@ bool#bool ret (return value: bool)
function Label:isClipMarginEnabled() end
---* Enable shadow effect to Label.<br>
---* todo Support blur for shadow effect.
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableShadow() end
---*  Sets the untransformed size of the Label in a more efficient way. 
---@param width float@ #float width
---@param height float@ #float height
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setDimensions(width,height) end
---* 
---@return float@ float#float ret (return value: float)
function Label:getWidth() end
---*  Return the text the Label is currently displaying.
---@return string@ string#string ret (return value: string)
function Label:getString() end
---* 
---@return float@ float#float ret (return value: float)
function Label:getHeight() end
---@param effect int@ #int effect
---@return cc.Label@ Label#Label self (return value: cc.Label)
---@overload fun(effect:int):cc.Label
---@overload fun():cc.Label
function Label:disableEffect(effect) end
---* Sets a new TTF configuration to Label.<br>
---* see `TTFConfig`
---@param ttfConfig cc._ttfConfig@ #cc._ttfConfig ttfConfig
---@return boolean@ bool#bool ret (return value: bool)
function Label:setTTFConfig(ttfConfig) end
---* Returns type of label<br>
---* warning Not support system font.<br>
---* return the type of label<br>
---* since v3.17.1
---@return int@ int#int ret (return value: int)
function Label:getLabelType() end
---*  Returns the text color of the Label.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function Label:getTextColor() end
---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function Label:getBlendFunc() end
---* Toggle wrap option of the label.<br>
---* Note: System font doesn't support manually toggle wrap.<br>
---* param enable Set true to enable wrap and false to disable wrap.
---@param enable boolean@ #bool enable
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableWrap(enable) end
---* Makes the Label exactly this untransformed width.<br>
---* The Label's width be used for text align if the value not equal zero.
---@param width float@ #float width
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setWidth(width) end
---* Returns the additional kerning of the Label.<br>
---* warning Not support system font.<br>
---* since v3.2.0
---@return float@ float#float ret (return value: float)
function Label:getAdditionalKerning() end
---* Return the user define BMFont size.<br>
---* return The BMFont size in float value.
---@return float@ float#float ret (return value: float)
function Label:getBMFontSize() end
---* 
---@return float@ float#float ret (return value: float)
function Label:getMaxLineWidth() end
---*  Returns the Label's text horizontal alignment.
---@return int@ int#int ret (return value: int)
function Label:getHorizontalAlignment() end
---* Return shadow effect offset value.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Label:getShadowOffset() end
---* 
---@return float@ float#float ret (return value: float)
function Label:getLineSpacing() end
---*  Clips upper and lower margin to reduce height of Label.
---@param clipEnabled boolean@ #bool clipEnabled
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setClipMarginEnabled(clipEnabled) end
---*  Sets the text that this Label is to display.
---@param text string@ #string text
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setString(text) end
---* Sets a new system font to Label.<br>
---* param font A font file or a font family name.<br>
---* warning
---@param font string@ #string font
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setSystemFontName(font) end
---* Query the wrap is enabled or not.<br>
---* Note: System font will always return true.
---@return boolean@ bool#bool ret (return value: bool)
function Label:isWrapEnabled() end
---* Return the outline effect size value.
---@return float@ float#float ret (return value: float)
function Label:getOutlineSize() end
---*  Sets a new bitmap font to Label 
---@param bmfontFilePath string@ #string bmfontFilePath
---@param imageOffset vec2_table@ #vec2_table imageOffset
---@param fontSize float@ #float fontSize
---@return boolean@ bool#bool ret (return value: bool)
function Label:setBMFontFilePath(bmfontFilePath,imageOffset,fontSize) end
---@param text string@ #string text
---@param fontFilePath string@ #string fontFilePath
---@param fontSize float@ #float fontSize
---@param dimensions size_table@ #size_table dimensions
---@param hAlignment int@ #int hAlignment
---@param vAlignment int@ #int vAlignment
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(unkown0:cc._ttfConfig,fontFilePath:string,unkown2:int,unkown3:int):boolean
---@overload fun(text:string,fontFilePath:string,fontSize:float,dimensions:size_table,hAlignment:int,vAlignment:int):boolean
function Label:initWithTTF(text,fontFilePath,fontSize,dimensions,hAlignment,vAlignment) end
---* 
---@return cc.FontAtlas@ FontAtlas#FontAtlas ret (return value: cc.FontAtlas)
function Label:getFontAtlas() end
---*  Sets the line height of the Label.<br>
---* warning Not support system font.<br>
---* since v3.2.0
---@param height float@ #float height
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setLineHeight(height) end
---* 
---@param fontSize float@ #float fontSize
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setSystemFontSize(fontSize) end
---* Change the label's Overflow type, currently only TTF and BMFont support all the valid Overflow type.<br>
---* Char Map font supports all the Overflow type except for SHRINK, because we can't measure it's font size.<br>
---* System font only support Overflow::Normal and Overflow::RESIZE_HEIGHT.<br>
---* param overflow   see `Overflow`
---@param overflow int@ #int overflow
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setOverflow(overflow) end
---* Enables strikethrough.<br>
---* Underline and Strikethrough cannot be enabled at the same time.<br>
---* Strikethrough is like an underline but at the middle of the glyph
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableStrikethrough() end
---*  Update content immediately.
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:updateContent() end
---* Return length of string.
---@return int@ int#int ret (return value: int)
function Label:getStringLength() end
---* Specify what happens when a line is too long for Label.<br>
---* param breakWithoutSpace Lines are automatically broken between words if this value is false.
---@param breakWithoutSpace boolean@ #bool breakWithoutSpace
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setLineBreakWithoutSpace(breakWithoutSpace) end
---* Return the number of lines of text.
---@return int@ int#int ret (return value: int)
function Label:getStringNumLines() end
---* Enable outline effect to Label.<br>
---* warning Limiting use to only when the Label created with true type font or system font.
---@param outlineColor color4b_table@ #color4b_table outlineColor
---@param outlineSize int@ #int outlineSize
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableOutline(outlineColor,outlineSize) end
---* Return the shadow effect blur radius.
---@return float@ float#float ret (return value: float)
function Label:getShadowBlurRadius() end
---* Return current effect color value.
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function Label:getEffectColor() end
---* 
---@param cleanup boolean@ #bool cleanup
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:removeAllChildrenWithCleanup(cleanup) end
---@param charMapFile string@ #string charMapFile
---@param itemWidth int@ #int itemWidth
---@param itemHeight int@ #int itemHeight
---@param startCharMap int@ #int startCharMap
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(unkown0:cc.Texture2D,itemWidth:int,itemHeight:int,startCharMap:int):boolean
---@overload fun(charMapFile:string,itemWidth:int,itemHeight:int,startCharMap:int):boolean
---@overload fun(charMapFile:string):boolean
function Label:setCharMap(charMapFile,itemWidth,itemHeight,startCharMap) end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Label:getDimensions() end
---* Makes the Label at most this line untransformed width.<br>
---* The Label's max line width be used for force line breaks if the value not equal zero.
---@param maxLineWidth float@ #float maxLineWidth
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setMaxLineWidth(maxLineWidth) end
---*  Returns the system font used by the Label.
---@return string@ string#string ret (return value: string)
function Label:getSystemFontName() end
---*  Sets the Label's text vertical alignment.
---@param vAlignment int@ #int vAlignment
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setVerticalAlignment(vAlignment) end
---* 
---@param height float@ #float height
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setLineSpacing(height) end
---* Returns font size
---@return float@ float#float ret (return value: float)
function Label:getRenderingFontSize() end
---* Returns the line height of this Label.<br>
---* warning Not support system font.<br>
---* since v3.2.0
---@return float@ float#float ret (return value: float)
function Label:getLineHeight() end
---* Return the shadow effect color value.
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function Label:getShadowColor() end
---* Returns the TTF configuration object used by the Label.<br>
---* see `TTFConfig`
---@return cc._ttfConfig@ _ttfConfig#_ttfConfig ret (return value: cc._ttfConfig)
function Label:getTTFConfig() end
---* Enable italics rendering
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableItalics() end
---* Sets the text color of Label.<br>
---* The text color is different from the color of Node.<br>
---* warning Limiting use to only when the Label created with true type font or system font.
---@param color color4b_table@ #color4b_table color
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setTextColor(color) end
---* Provides a way to treat each character like a Sprite.<br>
---* warning No support system font.
---@param lettetIndex int@ #int lettetIndex
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Label:getLetter(lettetIndex) end
---* Makes the Label exactly this untransformed height.<br>
---* The Label's height be used for text align if the value not equal zero.<br>
---* The text will display incomplete if the size of Label is not large enough to display all text.
---@param height float@ #float height
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setHeight(height) end
---* Return whether the shadow effect is enabled.
---@return boolean@ bool#bool ret (return value: bool)
function Label:isShadowEnabled() end
---* Enable glow effect to Label.<br>
---* warning Limiting use to only when the Label created with true type font.
---@param glowColor color4b_table@ #color4b_table glowColor
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableGlow(glowColor) end
---* Query the label's Overflow type.<br>
---* return see `Overflow`
---@return int@ int#int ret (return value: int)
function Label:getOverflow() end
---*  Returns the Label's text vertical alignment.
---@return int@ int#int ret (return value: int)
function Label:getVerticalAlignment() end
---* Sets the additional kerning of the Label.<br>
---* warning Not support system font.<br>
---* since v3.2.0
---@param space float@ #float space
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setAdditionalKerning(space) end
---*  Returns the bitmap font path used by the Label.
---@return float@ float#float ret (return value: float)
function Label:getSystemFontSize() end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setBlendFunc(blendFunc) end
---*  Returns the Label's text horizontal alignment.
---@return int@ int#int ret (return value: int)
function Label:getTextAlignment() end
---*  Returns the bitmap font used by the Label.
---@return string@ string#string ret (return value: string)
function Label:getBMFontFilePath() end
---*  Sets the Label's text horizontal alignment.
---@param hAlignment int@ #int hAlignment
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setHorizontalAlignment(hAlignment) end
---* Enable bold rendering
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableBold() end
---* Enable underline
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:enableUnderline() end
---* Return current effect type.
---@return int@ int#int ret (return value: int)
function Label:getLabelEffectType() end
---@param hAlignment int@ #int hAlignment
---@param vAlignment int@ #int vAlignment
---@return cc.Label@ Label#Label self (return value: cc.Label)
---@overload fun(hAlignment:int,vAlignment:int):cc.Label
---@overload fun(hAlignment:int):cc.Label
function Label:setAlignment(hAlignment,vAlignment) end
---* warning This method is not recommended for game developers.
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:requestSystemFontRefresh() end
---* Change font size of label type BMFONT<br>
---* Note: This function only scale the BMFONT letter to mimic the font size change effect.<br>
---* param fontSize The desired font size in float.
---@param fontSize float@ #float fontSize
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setBMFontSize(fontSize) end
---* Allocates and initializes a Label, with a bitmap font file.<br>
---* param bmfontPath A bitmap font file, it's a FNT format.<br>
---* param text The initial text.<br>
---* param hAlignment Text horizontal alignment.<br>
---* param maxLineWidth The max line width.<br>
---* param imageOffset<br>
---* return An automatically released Label object.<br>
---* see setBMFontFilePath setMaxLineWidth
---@param bmfontPath string@ #string bmfontPath
---@param text string@ #string text
---@param hAlignment int@ #int hAlignment
---@param maxLineWidth int@ #int maxLineWidth
---@param imageOffset vec2_table@ #vec2_table imageOffset
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function Label:createWithBMFont(bmfontPath,text,hAlignment,maxLineWidth,imageOffset) end
---* Allocates and initializes a Label, with default settings.<br>
---* return An automatically released Label object.
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function Label:create() end
---@param charMapFile string@ #string charMapFile
---@param itemWidth int@ #int itemWidth
---@param itemHeight int@ #int itemHeight
---@param startCharMap int@ #int startCharMap
---@return cc.Label@ Label#Label ret (return value: cc.Label)
---@overload fun(unkown0:cc.Texture2D,itemWidth:int,itemHeight:int,startCharMap:int):cc.Label
---@overload fun(charMapFile:string,itemWidth:int,itemHeight:int,startCharMap:int):cc.Label
---@overload fun(charMapFile:string):cc.Label
function Label:createWithCharMap(charMapFile,itemWidth,itemHeight,startCharMap) end
---* Allocates and initializes a Label, base on platform-dependent API.<br>
---* param text The initial text.<br>
---* param font A font file or a font family name.<br>
---* param fontSize The font size. This value must be > 0.<br>
---* param dimensions<br>
---* param hAlignment The text horizontal alignment.<br>
---* param vAlignment The text vertical alignment.<br>
---* warning It will generate texture by the platform-dependent code.<br>
---* return An automatically released Label object.
---@param text string@ #string text
---@param font string@ #string font
---@param fontSize float@ #float fontSize
---@param dimensions size_table@ #size_table dimensions
---@param hAlignment int@ #int hAlignment
---@param vAlignment int@ #int vAlignment
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function Label:createWithSystemFont(text,font,fontSize,dimensions,hAlignment,vAlignment) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:draw(renderer,transform,flags) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Label:isOpacityModifyRGB() end
---* 
---@param mask unsigned short@ #unsigned short mask
---@param applyChildren boolean@ #bool applyChildren
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setCameraMask(mask,applyChildren) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:removeChild(child,cleanup) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:visit(renderer,parentTransform,parentFlags) end
---* 
---@return string@ string#string ret (return value: string)
function Label:getDescription() end
---* 
---@param isOpacityModifyRGB boolean@ #bool isOpacityModifyRGB
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setOpacityModifyRGB(isOpacityModifyRGB) end
---* 
---@param parentOpacity unsigned_char@ #unsigned char parentOpacity
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:updateDisplayedOpacity(parentOpacity) end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Label:getContentSize() end
---* 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Label:getBoundingBox() end
---* 
---@param parentColor color3b_table@ #color3b_table parentColor
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:updateDisplayedColor(parentColor) end
---* 
---@param globalZOrder float@ #float globalZOrder
---@return cc.Label@ Label#Label self (return value: cc.Label)
function Label:setGlobalZOrder(globalZOrder) end


---@class cc.LabelAtlas :  AtlasNode@LabelProtocol
local LabelAtlas={ }
---@class LabelAtlas : cc.LabelAtlas
cc.LabelAtlas=LabelAtlas


---* 
---@param label string@ #string label
---@return cc.LabelAtlas@ LabelAtlas#LabelAtlas self (return value: cc.LabelAtlas)
function LabelAtlas:setString(label) end
---@param string string@ #string string
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param itemWidth int@ #int itemWidth
---@param itemHeight int@ #int itemHeight
---@param startCharMap int@ #int startCharMap
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(string:string,unkown1:string):boolean
---@overload fun(string:string,unkown1:string,itemWidth:int,itemHeight:int,startCharMap:int):boolean
---@overload fun(string:string,texture:cc.Texture2D,itemWidth:int,itemHeight:int,startCharMap:int):boolean
function LabelAtlas:initWithString(string,texture,itemWidth,itemHeight,startCharMap) end
---* 
---@return string@ string#string ret (return value: string)
function LabelAtlas:getString() end
---@param string string@ #string string
---@param charMapFile string@ #string charMapFile
---@param itemWidth int@ #int itemWidth
---@param itemHeight int@ #int itemHeight
---@param startCharMap int@ #int startCharMap
---@return cc.LabelAtlas@ LabelAtlas#LabelAtlas ret (return value: cc.LabelAtlas)
---@overload fun(string:string,charMapFile:string,itemWidth:int,itemHeight:int,startCharMap:int):cc.LabelAtlas
---@overload fun():cc.LabelAtlas
---@overload fun(string:string,charMapFile:string):cc.LabelAtlas
function LabelAtlas:create(string,charMapFile,itemWidth,itemHeight,startCharMap) end
---* 
---@return cc.LabelAtlas@ LabelAtlas#LabelAtlas self (return value: cc.LabelAtlas)
function LabelAtlas:updateAtlasValues() end
---* js NA
---@return string@ string#string ret (return value: string)
function LabelAtlas:getDescription() end
---* 
---@return cc.LabelAtlas@ LabelAtlas#LabelAtlas self (return value: cc.LabelAtlas)
function LabelAtlas:LabelAtlas() end


---@class cc.Layer :  Node
local Layer={ }
---@class Layer : cc.Layer
cc.Layer=Layer


---*  Creates a fullscreen black layer.<br>
---* return An autoreleased Layer object.
---@return cc.Layer@ Layer#Layer ret (return value: cc.Layer)
function Layer:create() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Layer:init() end
---* 
---@return string@ string#string ret (return value: string)
function Layer:getDescription() end
---* 
---@return cc.Layer@ Layer#Layer self (return value: cc.Layer)
function Layer:Layer() end


---@class cc.LayerColor :  Layer@BlendProtocol
local LayerColor={ }
---@class LayerColor : cc.LayerColor
cc.LayerColor=LayerColor


---*  Change width and height in Points.<br>
---* param w The width of layer.<br>
---* param h The Height of layer.<br>
---* since v0.8
---@param w float@ #float w
---@param h float@ #float h
---@return cc.LayerColor@ LayerColor#LayerColor self (return value: cc.LayerColor)
function LayerColor:changeWidthAndHeight(w,h) end
---*  BlendFunction. Conforms to BlendProtocol protocol <br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function LayerColor:getBlendFunc() end
---* code<br>
---* When this function bound into js or lua,the parameter will be changed<br>
---* In js: var setBlendFunc(var src, var dst)<br>
---* In lua: local setBlendFunc(local src, local dst)<br>
---* endcode
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.LayerColor@ LayerColor#LayerColor self (return value: cc.LayerColor)
function LayerColor:setBlendFunc(blendFunc) end
---*  Change width in Points.<br>
---* param w The width of layer.
---@param w float@ #float w
---@return cc.LayerColor@ LayerColor#LayerColor self (return value: cc.LayerColor)
function LayerColor:changeWidth(w) end
---@param color color4b_table@ #color4b_table color
---@param width float@ #float width
---@param height float@ #float height
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(color:color4b_table):boolean
---@overload fun(color:color4b_table,width:float,height:float):boolean
function LayerColor:initWithColor(color,width,height) end
---*  Change height in Points.<br>
---* param h The height of layer.
---@param h float@ #float h
---@return cc.LayerColor@ LayerColor#LayerColor self (return value: cc.LayerColor)
function LayerColor:changeHeight(h) end
---@param color color4b_table@ #color4b_table color
---@param width float@ #float width
---@param height float@ #float height
---@return cc.LayerColor@ LayerColor#LayerColor ret (return value: cc.LayerColor)
---@overload fun(color:color4b_table,width:float,height:float):cc.LayerColor
---@overload fun():cc.LayerColor
---@overload fun(color:color4b_table):cc.LayerColor
function LayerColor:create(color,width,height) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.LayerColor@ LayerColor#LayerColor self (return value: cc.LayerColor)
function LayerColor:draw(renderer,transform,flags) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function LayerColor:init() end
---* 
---@return string@ string#string ret (return value: string)
function LayerColor:getDescription() end
---* 
---@param var size_table@ #size_table var
---@return cc.LayerColor@ LayerColor#LayerColor self (return value: cc.LayerColor)
function LayerColor:setContentSize(var) end
---* 
---@return cc.LayerColor@ LayerColor#LayerColor self (return value: cc.LayerColor)
function LayerColor:LayerColor() end


---@class cc.LayerGradient :  LayerColor
local LayerGradient={ }
---@class LayerGradient : cc.LayerGradient
cc.LayerGradient=LayerGradient


---*  Returns the start color of the gradient.<br>
---* return The start color.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function LayerGradient:getStartColor() end
---*  Get the compressedInterpolation<br>
---* return The interpolation will be compressed if true.
---@return boolean@ bool#bool ret (return value: bool)
function LayerGradient:isCompressedInterpolation() end
---*  Returns the start opacity of the gradient.<br>
---* return The start opacity.
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function LayerGradient:getStartOpacity() end
---*  Sets the directional vector that will be used for the gradient.<br>
---* The default value is vertical direction (0,-1). <br>
---* param alongVector The direction of gradient.
---@param alongVector vec2_table@ #vec2_table alongVector
---@return cc.LayerGradient@ LayerGradient#LayerGradient self (return value: cc.LayerGradient)
function LayerGradient:setVector(alongVector) end
---*  Returns the start opacity of the gradient.<br>
---* param startOpacity The start opacity, from 0 to 255.
---@param startOpacity unsigned_char@ #unsigned char startOpacity
---@return cc.LayerGradient@ LayerGradient#LayerGradient self (return value: cc.LayerGradient)
function LayerGradient:setStartOpacity(startOpacity) end
---*  Whether or not the interpolation will be compressed in order to display all the colors of the gradient both in canonical and non canonical vectors.<br>
---* Default: true.<br>
---* param compressedInterpolation The interpolation will be compressed if true.
---@param compressedInterpolation boolean@ #bool compressedInterpolation
---@return cc.LayerGradient@ LayerGradient#LayerGradient self (return value: cc.LayerGradient)
function LayerGradient:setCompressedInterpolation(compressedInterpolation) end
---*  Returns the end opacity of the gradient.<br>
---* param endOpacity The end opacity, from 0 to 255.
---@param endOpacity unsigned_char@ #unsigned char endOpacity
---@return cc.LayerGradient@ LayerGradient#LayerGradient self (return value: cc.LayerGradient)
function LayerGradient:setEndOpacity(endOpacity) end
---*  Returns the directional vector used for the gradient.<br>
---* return The direction of gradient.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function LayerGradient:getVector() end
---*  Sets the end color of the gradient.<br>
---* param endColor The end color.
---@param endColor color3b_table@ #color3b_table endColor
---@return cc.LayerGradient@ LayerGradient#LayerGradient self (return value: cc.LayerGradient)
function LayerGradient:setEndColor(endColor) end
---@param start color4b_table@ #color4b_table start
---@param _end color4b_table@ #color4b_table end
---@param v vec2_table@ #vec2_table v
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(start:color4b_table,_end:color4b_table,v:vec2_table):boolean
---@overload fun(start:color4b_table,_end:color4b_table):boolean
function LayerGradient:initWithColor(start,_end,v) end
---*  Returns the end color of the gradient.<br>
---* return The end color.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function LayerGradient:getEndColor() end
---*  Returns the end opacity of the gradient.<br>
---* return The end opacity.
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function LayerGradient:getEndOpacity() end
---*  Sets the start color of the gradient.<br>
---* param startColor The start color.
---@param startColor color3b_table@ #color3b_table startColor
---@return cc.LayerGradient@ LayerGradient#LayerGradient self (return value: cc.LayerGradient)
function LayerGradient:setStartColor(startColor) end
---@param start color4b_table@ #color4b_table start
---@param _end color4b_table@ #color4b_table end
---@param v vec2_table@ #vec2_table v
---@return cc.LayerGradient@ LayerGradient#LayerGradient ret (return value: cc.LayerGradient)
---@overload fun(start:color4b_table,_end:color4b_table):cc.LayerGradient
---@overload fun():cc.LayerGradient
---@overload fun(start:color4b_table,_end:color4b_table,v:vec2_table):cc.LayerGradient
function LayerGradient:create(start,_end,v) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function LayerGradient:init() end
---* 
---@return string@ string#string ret (return value: string)
function LayerGradient:getDescription() end
---* 
---@return cc.LayerGradient@ LayerGradient#LayerGradient self (return value: cc.LayerGradient)
function LayerGradient:LayerGradient() end


---@class cc.LayerMultiplex :  Layer
local LayerMultiplex={ }
---@class LayerMultiplex : cc.LayerMultiplex
cc.LayerMultiplex=LayerMultiplex


---*  initializes a MultiplexLayer with an array of layers<br>
---* since v2.1
---@param arrayOfLayers array_table@ #array_table arrayOfLayers
---@return boolean@ bool#bool ret (return value: bool)
function LayerMultiplex:initWithArray(arrayOfLayers) end
---*  release the current layer and switches to another layer indexed by n.<br>
---* The current (old) layer will be removed from it's parent with 'cleanup=true'.<br>
---* param n The layer indexed by n will display.
---@param n int@ #int n
---@return cc.LayerMultiplex@ LayerMultiplex#LayerMultiplex self (return value: cc.LayerMultiplex)
function LayerMultiplex:switchToAndReleaseMe(n) end
---*  Add a certain layer to LayerMultiplex.<br>
---* param layer A layer need to be added to the LayerMultiplex.
---@param layer cc.Layer@ #cc.Layer layer
---@return cc.LayerMultiplex@ LayerMultiplex#LayerMultiplex self (return value: cc.LayerMultiplex)
function LayerMultiplex:addLayer(layer) end
---@param n int@ #int n
---@param cleanup boolean@ #bool cleanup
---@return cc.LayerMultiplex@ LayerMultiplex#LayerMultiplex self (return value: cc.LayerMultiplex)
---@overload fun(n:int,cleanup:boolean):cc.LayerMultiplex
---@overload fun(n:int):cc.LayerMultiplex
function LayerMultiplex:switchTo(n,cleanup) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function LayerMultiplex:init() end
---* 
---@return string@ string#string ret (return value: string)
function LayerMultiplex:getDescription() end
---* js ctor
---@return cc.LayerMultiplex@ LayerMultiplex#LayerMultiplex self (return value: cc.LayerMultiplex)
function LayerMultiplex:LayerMultiplex() end


---@class cc.LayerRadialGradient :  Layer
local LayerRadialGradient={ }
---@class LayerRadialGradient : cc.LayerRadialGradient
cc.LayerRadialGradient=LayerRadialGradient


---* 
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function LayerRadialGradient:getStartColor() end
---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function LayerRadialGradient:getBlendFunc() end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function LayerRadialGradient:getStartColor3B() end
---* 
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function LayerRadialGradient:getStartOpacity() end
---* 
---@param center vec2_table@ #vec2_table center
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:setCenter(center) end
---* 
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function LayerRadialGradient:getEndColor() end
---* 
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:setStartOpacity(opacity) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function LayerRadialGradient:getCenter() end
---* 
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:setEndOpacity(opacity) end
---* 
---@param expand float@ #float expand
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:setExpand(expand) end
---* 
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function LayerRadialGradient:getEndOpacity() end
---* 
---@param startColor color4b_table@ #color4b_table startColor
---@param endColor color4b_table@ #color4b_table endColor
---@param radius float@ #float radius
---@param center vec2_table@ #vec2_table center
---@param expand float@ #float expand
---@return boolean@ bool#bool ret (return value: bool)
function LayerRadialGradient:initWithColor(startColor,endColor,radius,center,expand) end
---@param color color3b_table@ #color3b_table color
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
---@overload fun(unkown0:color4b_table):cc.LayerRadialGradient
---@overload fun(color:color3b_table):cc.LayerRadialGradient
function LayerRadialGradient:setEndColor(color) end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function LayerRadialGradient:getEndColor3B() end
---* 
---@param radius float@ #float radius
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:setRadius(radius) end
---@param color color3b_table@ #color3b_table color
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
---@overload fun(unkown0:color4b_table):cc.LayerRadialGradient
---@overload fun(color:color3b_table):cc.LayerRadialGradient
function LayerRadialGradient:setStartColor(color) end
---* 
---@return float@ float#float ret (return value: float)
function LayerRadialGradient:getExpand() end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:setBlendFunc(blendFunc) end
---* 
---@return float@ float#float ret (return value: float)
function LayerRadialGradient:getRadius() end
---@param startColor color4b_table@ #color4b_table startColor
---@param endColor color4b_table@ #color4b_table endColor
---@param radius float@ #float radius
---@param center vec2_table@ #vec2_table center
---@param expand float@ #float expand
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient ret (return value: cc.LayerRadialGradient)
---@overload fun():cc.LayerRadialGradient
---@overload fun(startColor:color4b_table,endColor:color4b_table,radius:float,center:vec2_table,expand:float):cc.LayerRadialGradient
function LayerRadialGradient:create(startColor,endColor,radius,center,expand) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:draw(renderer,transform,flags) end
---* 
---@param size size_table@ #size_table size
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:setContentSize(size) end
---* 
---@return cc.LayerRadialGradient@ LayerRadialGradient#LayerRadialGradient self (return value: cc.LayerRadialGradient)
function LayerRadialGradient:LayerRadialGradient() end


---@class ccui.Layout :  Widget@LayoutProtocol
local Layout={ }
---@class Layout : ccui.Layout
ccui.Layout=Layout


---* Sets background color vector for layout.<br>
---* This setting only take effect when layout's color type is BackGroundColorType::GRADIENT<br>
---* param vector The color vector in `Vec2`.
---@param vector vec2_table@ #vec2_table vector
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundColorVector(vector) end
---* Change the clipping type of layout.<br>
---* On default, the clipping type is `ClippingType::STENCIL`.<br>
---* see `ClippingType`<br>
---* param type The clipping type of layout.
---@param type int@ #int type
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setClippingType(type) end
---* Sets Color Type for layout's background<br>
---* param type   @see `BackGroundColorType`
---@param type int@ #int type
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundColorType(type) end
---* If a layout is loop focused which means that the focus movement will be inside the layout<br>
---* param loop  pass true to let the focus movement loop inside the layout
---@param loop boolean@ #bool loop
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setLoopFocus(loop) end
---* Set layout's background image color.<br>
---* param color Background color value in `Color3B`.
---@param color color3b_table@ #color3b_table color
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundImageColor(color) end
---* Get the layout's background color vector.<br>
---* return Background color vector.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Layout:getBackGroundColorVector() end
---* see `setClippingType(ClippingType)`
---@return int@ int#int ret (return value: int)
function Layout:getClippingType() end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Layout:getRenderFile() end
---* return If focus loop is enabled, then it will return true, otherwise it returns false. The default value is false.
---@return boolean@ bool#bool ret (return value: bool)
function Layout:isLoopFocus() end
---* Remove the background image of layout.
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:removeBackGroundImage() end
---* Get the layout's background color opacity.<br>
---* return Background color opacity value.
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function Layout:getBackGroundColorOpacity() end
---* Gets if layout is clipping enabled.<br>
---* return if layout is clipping enabled.
---@return boolean@ bool#bool ret (return value: bool)
function Layout:isClippingEnabled() end
---* Set opacity of background image.<br>
---* param opacity Background image opacity in GLubyte.
---@param opacity unsigned_char@ #unsigned char opacity
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundImageOpacity(opacity) end
---* Sets a background image for layout.<br>
---* param fileName image file path.<br>
---* param texType @see TextureResType. 
---@param fileName string@ #string fileName
---@param texType int@ #int texType
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundImage(fileName,texType) end
---@param startColor color3b_table@ #color3b_table startColor
---@param endColor color3b_table@ #color3b_table endColor
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
---@overload fun(startColor:color3b_table,endColor:color3b_table):ccui.Layout
---@overload fun(startColor:color3b_table):ccui.Layout
function Layout:setBackGroundColor(startColor,endColor) end
---* request to refresh widget layout
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:requestDoLayout() end
---* Query background image's capInsets size.<br>
---* return The background image capInsets.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Layout:getBackGroundImageCapInsets() end
---* Query the layout's background color.<br>
---* return Background color in Color3B.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function Layout:getBackGroundColor() end
---* Toggle layout clipping.<br>
---* If you do need clipping, you pass true to this function.<br>
---* param enabled Pass true to enable clipping, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setClippingEnabled(enabled) end
---* Get color of layout's background image.<br>
---* return Layout's background image color.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function Layout:getBackGroundImageColor() end
---* Query background image scale9 enable status.<br>
---* return Whether background image is scale9 enabled or not.
---@return boolean@ bool#bool ret (return value: bool)
function Layout:isBackGroundImageScale9Enabled() end
---* Query the layout's background color type.<br>
---* return The layout's background color type.
---@return int@ int#int ret (return value: int)
function Layout:getBackGroundColorType() end
---* Get the gradient background end color.<br>
---* return Gradient background end color value.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function Layout:getBackGroundEndColor() end
---* Sets background color opacity of layout.<br>
---* param opacity The opacity in `GLubyte`.
---@param opacity unsigned_char@ #unsigned char opacity
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundColorOpacity(opacity) end
---* Get the opacity of layout's background image.<br>
---* return The opacity of layout's background image.
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function Layout:getBackGroundImageOpacity() end
---* return To query whether the layout will pass the focus to its children or not. The default value is true
---@return boolean@ bool#bool ret (return value: bool)
function Layout:isPassFocusToChild() end
---* Sets a background image capinsets for layout, it only affects the scale9 enabled background image<br>
---* param capInsets  The capInsets in Rect.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundImageCapInsets(capInsets) end
---* Gets background image texture size.<br>
---* return background image texture size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Layout:getBackGroundImageTextureSize() end
---* force refresh widget layout
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:forceDoLayout() end
---* Query layout type.<br>
---* return Get the layout type.
---@return int@ int#int ret (return value: int)
function Layout:getLayoutType() end
---* param pass To specify whether the layout pass its focus to its child
---@param pass boolean@ #bool pass
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setPassFocusToChild(pass) end
---* Get the gradient background start color.<br>
---* return  Gradient background start color value.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function Layout:getBackGroundStartColor() end
---* Enable background image scale9 rendering.<br>
---* param enabled  True means enable scale9 rendering for background image, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setBackGroundImageScale9Enabled(enabled) end
---* Change the layout type.<br>
---* param type Layout type.
---@param type int@ #int type
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setLayoutType(type) end
---* Create a empty layout.
---@return ccui.Layout@ Layout#Layout ret (return value: ccui.Layout)
function Layout:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function Layout:createInstance() end
---@param child cc.Node@ #cc.Node child
---@param localZOrder int@ #int localZOrder
---@param name string@ #string name
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
---@overload fun(child:cc.Node,localZOrder:int):ccui.Layout
---@overload fun(child:cc.Node):ccui.Layout
---@overload fun(child:cc.Node,localZOrder:int,unkown2:int):ccui.Layout
---@overload fun(child:cc.Node,localZOrder:int,name:string):ccui.Layout
function Layout:addChild(child,localZOrder,name) end
---* Returns the "class name" of widget.
---@return string@ string#string ret (return value: string)
function Layout:getDescription() end
---* Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.<br>
---* param cleanup   true if all running actions on all children nodes should be cleanup, false otherwise.<br>
---* js removeAllChildren<br>
---* lua removeAllChildren
---@param cleanup boolean@ #bool cleanup
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:removeAllChildrenWithCleanup(cleanup) end
---* Removes all children from the container with a cleanup.<br>
---* see `removeAllChildrenWithCleanup(bool)`
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:removeAllChildren() end
---* When a widget is in a layout, you could call this method to get the next focused widget within a specified direction.<br>
---* If the widget is not in a layout, it will return itself<br>
---* param direction the direction to look for the next focused widget in a layout<br>
---* param current  the current focused widget<br>
---* return the next focused widget in a layout
---@param direction int@ #int direction
---@param current ccui.Widget@ #ccui.Widget current
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Layout:findNextFocusedWidget(direction,current) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:removeChild(child,cleanup) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Layout:init() end
---* Override function. Set camera mask, the node is visible by the camera whose camera flag & node's camera mask is true. <br>
---* param mask Mask being set<br>
---* param applyChildren If true call this function recursively from this node to its children.
---@param mask unsigned short@ #unsigned short mask
---@param applyChildren boolean@ #bool applyChildren
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setCameraMask(mask,applyChildren) end
---* 
---@param globalZOrder float@ #float globalZOrder
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:setGlobalZOrder(globalZOrder) end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.Layout@ Layout#Layout self (return value: ccui.Layout)
function Layout:Layout() end


---@class ccui.LayoutComponent :  Component
local LayoutComponent={ }
---@class LayoutComponent : ccui.LayoutComponent
ccui.LayoutComponent=LayoutComponent


---* Toggle enable stretch width.<br>
---* param isUsed True if enable stretch width, false otherwise.
---@param isUsed boolean@ #bool isUsed
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setStretchWidthEnabled(isUsed) end
---* Change percent width of owner.<br>
---* param percentWidth Percent Width in float.
---@param percentWidth float@ #float percentWidth
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPercentWidth(percentWidth) end
---* Query the anchor position.<br>
---* return Anchor position to it's parent
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function LayoutComponent:getAnchorPosition() end
---* Toggle position percentX enabled.<br>
---* param isUsed  True if enable position percentX, false otherwise.
---@param isUsed boolean@ #bool isUsed
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPositionPercentXEnabled(isUsed) end
---* Toggle enable stretch height.<br>
---* param isUsed True if stretch height is enabled, false otherwise.
---@param isUsed boolean@ #bool isUsed
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setStretchHeightEnabled(isUsed) end
---* Toggle active enabled of LayoutComponent's owner.<br>
---* param enable True if active layout component, false otherwise.
---@param enable boolean@ #bool enable
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setActiveEnabled(enable) end
---* Query the right margin of owner relative to its parent.<br>
---* return Right margin in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getRightMargin() end
---* Query owner's content size.<br>
---* return Owner's content size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function LayoutComponent:getSize() end
---* Change the anchor position to it's parent.<br>
---* param point A value in (x,y) format.
---@param point vec2_table@ #vec2_table point
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setAnchorPosition(point) end
---* Refresh layout of the owner.
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:refreshLayout() end
---* Query whether percent width is enabled or not.<br>
---* return True if percent width is enabled, false, otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:isPercentWidthEnabled() end
---* Change element's vertical dock type.<br>
---* param vEage Vertical dock type @see `VerticalEdge`.
---@param vEage int@ #int vEage
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setVerticalEdge(vEage) end
---* Query the top margin of owner relative to its parent.<br>
---* return Top margin in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getTopMargin() end
---* Change content size width of owner.<br>
---* param width Content size width in float.
---@param width float@ #float width
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setSizeWidth(width) end
---* Query the percent content size value.<br>
---* return Percent (x,y) in Vec2.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function LayoutComponent:getPercentContentSize() end
---* Query element vertical dock type.<br>
---* return Vertical dock type.
---@return int@ int#int ret (return value: int)
function LayoutComponent:getVerticalEdge() end
---* Toggle enable percent width.<br>
---* param isUsed True if percent width is enabled, false otherwise.
---@param isUsed boolean@ #bool isUsed
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPercentWidthEnabled(isUsed) end
---* Query whether stretch width is enabled or not.<br>
---* return True if stretch width is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:isStretchWidthEnabled() end
---* Change left margin of owner relative to its parent.<br>
---* param margin Margin in float.
---@param margin float@ #float margin
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setLeftMargin(margin) end
---* Query content size width of owner.<br>
---* return Content size width in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getSizeWidth() end
---* Toggle position percentY enabled.<br>
---* param isUsed True if position percentY is enabled, false otherwise.
---@param isUsed boolean@ #bool isUsed
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPositionPercentYEnabled(isUsed) end
---* Query size height of owner.<br>
---* return Size height in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getSizeHeight() end
---* Query the position percentY Y value.<br>
---* return Position percent Y value in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getPositionPercentY() end
---* Query the position percent X value.<br>
---* return Position percent X value in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getPositionPercentX() end
---* Change the top margin of owner relative to its parent.<br>
---* param margin Margin in float.
---@param margin float@ #float margin
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setTopMargin(margin) end
---* Query percent height of owner.         <br>
---* return Percent height in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getPercentHeight() end
---* Query whether use percent content size or not.<br>
---* return True if using percent content size, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:getUsingPercentContentSize() end
---* Change position percentY value.<br>
---* param percentMargin Margin in float.
---@param percentMargin float@ #float percentMargin
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPositionPercentY(percentMargin) end
---* Change position percent X value.<br>
---* param percentMargin Margin in float.
---@param percentMargin float@ #float percentMargin
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPositionPercentX(percentMargin) end
---* Change right margin of owner relative to its parent.<br>
---* param margin Margin in float.
---@param margin float@ #float margin
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setRightMargin(margin) end
---* Whether position percentY is enabled or not.<br>
---* see `setPositionPercentYEnabled`<br>
---* return True if position percentY is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:isPositionPercentYEnabled() end
---* Change percent height value of owner.<br>
---* param percentHeight Percent height in float.
---@param percentHeight float@ #float percentHeight
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPercentHeight(percentHeight) end
---* Toggle enable percent only.<br>
---* param enable True if percent only is enabled, false otherwise.
---@param enable boolean@ #bool enable
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPercentOnlyEnabled(enable) end
---* Change element's horizontal dock type.<br>
---* param hEage Horizontal dock type @see `HorizontalEdge`
---@param hEage int@ #int hEage
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setHorizontalEdge(hEage) end
---* Change the position of component owner.<br>
---* param position A position in (x,y)
---@param position vec2_table@ #vec2_table position
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPosition(position) end
---* Percent content size is used to adapt node's content size based on parent's content size.<br>
---* If set to true then node's content size will be changed based on the value set by @see setPercentContentSize<br>
---* param isUsed True to enable percent content size, false otherwise.
---@param isUsed boolean@ #bool isUsed
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setUsingPercentContentSize(isUsed) end
---* Query left margin of owner relative to its parent.<br>
---* return Left margin in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getLeftMargin() end
---* Query the owner's position.<br>
---* return The owner's position.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function LayoutComponent:getPosition() end
---* Change size height of owner.<br>
---* param height Size height in float.
---@param height float@ #float height
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setSizeHeight(height) end
---* Whether position percentX is enabled or not. <br>
---* return True if position percentX is enable, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:isPositionPercentXEnabled() end
---* Query the bottom margin of owner relative to its parent.<br>
---* return Bottom margin in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getBottomMargin() end
---* Toggle enable percent height.<br>
---* param isUsed True if percent height is enabled, false otherwise.
---@param isUsed boolean@ #bool isUsed
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPercentHeightEnabled(isUsed) end
---* Set percent content size.<br>
---* The value should be [0-1], 0 means the child's content size will be 0<br>
---* and 1 means the child's content size is the same as its parents.<br>
---* param percent The percent (x,y) of the node in [0-1] scope.
---@param percent vec2_table@ #vec2_table percent
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setPercentContentSize(percent) end
---* Query whether percent height is enabled or not.<br>
---* return True if percent height is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:isPercentHeightEnabled() end
---* Query percent width of owner.<br>
---* return percent width in float.
---@return float@ float#float ret (return value: float)
function LayoutComponent:getPercentWidth() end
---* Query element horizontal dock type.<br>
---* return Horizontal dock type.
---@return int@ int#int ret (return value: int)
function LayoutComponent:getHorizontalEdge() end
---* Query whether stretch height is enabled or not.<br>
---* return True if stretch height is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:isStretchHeightEnabled() end
---* Change the bottom margin of owner relative to its parent.<br>
---* param margin in float.
---@param margin float@ #float margin
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setBottomMargin(margin) end
---* Change the content size of owner.<br>
---* param size Content size in @see `Size`.
---@param size size_table@ #size_table size
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:setSize(size) end
---* 
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent ret (return value: ccui.LayoutComponent)
function LayoutComponent:create() end
---* Bind a LayoutComponent to a specified node.<br>
---* If the node has already binded a LayoutComponent named __LAYOUT_COMPONENT_NAME, just return the LayoutComponent.<br>
---* Otherwise, create a new LayoutComponent and bind the LayoutComponent to the node.<br>
---* param node A Node* instance pointer.<br>
---* return The binded LayoutComponent instance pointer.
---@param node cc.Node@ #cc.Node node
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent ret (return value: ccui.LayoutComponent)
function LayoutComponent:bindLayoutComponent(node) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function LayoutComponent:init() end
---* Default constructor<br>
---* lua new
---@return ccui.LayoutComponent@ LayoutComponent#LayoutComponent self (return value: ccui.LayoutComponent)
function LayoutComponent:LayoutComponent() end


---@class ccui.LayoutParameter :  Ref
local LayoutParameter={ }
---@class LayoutParameter : ccui.LayoutParameter
ccui.LayoutParameter=LayoutParameter


---* Create a copy of original LayoutParameter.<br>
---* return A LayoutParameter pointer.
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter ret (return value: ccui.LayoutParameter)
function LayoutParameter:clone() end
---* Gets LayoutParameterType of LayoutParameter.<br>
---* see LayoutParameterType.<br>
---* return LayoutParameterType
---@return int@ int#int ret (return value: int)
function LayoutParameter:getLayoutType() end
---* Create a cloned instance of LayoutParameter.<br>
---* return A LayoutParameter pointer.
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter ret (return value: ccui.LayoutParameter)
function LayoutParameter:createCloneInstance() end
---* Copy all the member field from argument LayoutParameter to self.<br>
---* param model A LayoutParameter instance.
---@param model ccui.LayoutParameter@ #ccui.LayoutParameter model
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter self (return value: ccui.LayoutParameter)
function LayoutParameter:copyProperties(model) end
---* Create a empty LayoutParameter.<br>
---* return A autorelease LayoutParameter instance.
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter ret (return value: ccui.LayoutParameter)
function LayoutParameter:create() end
---* Default constructor.<br>
---* lua new
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter self (return value: ccui.LayoutParameter)
function LayoutParameter:LayoutParameter() end


---@class cc.Lens3D :  Grid3DAction
local Lens3D={ }
---@class Lens3D : cc.Lens3D
cc.Lens3D=Lens3D


---* brief Set whether lens is concave.<br>
---* param concave Whether lens is concave.
---@param concave boolean@ #bool concave
---@return cc.Lens3D@ Lens3D#Lens3D self (return value: cc.Lens3D)
function Lens3D:setConcave(concave) end
---* brief Initializes the action with center position, radius, grid size and duration.<br>
---* param duration Specify the duration of the Lens3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param position Specify the center position of the lens effect.<br>
---* param radius Specify the radius of the lens effect.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param position vec2_table@ #vec2_table position
---@param radius float@ #float radius
---@return boolean@ bool#bool ret (return value: bool)
function Lens3D:initWithDuration(duration,gridSize,position,radius) end
---* brief Set the value of lens effect.<br>
---* param lensEffect The value of lens effect will be set.
---@param lensEffect float@ #float lensEffect
---@return cc.Lens3D@ Lens3D#Lens3D self (return value: cc.Lens3D)
function Lens3D:setLensEffect(lensEffect) end
---* brief Get the value of lens effect. Default value is 0.7.<br>
---* return The value of lens effect.
---@return float@ float#float ret (return value: float)
function Lens3D:getLensEffect() end
---* brief Set the center position of lens effect.<br>
---* param position The center position will be set.
---@param position vec2_table@ #vec2_table position
---@return cc.Lens3D@ Lens3D#Lens3D self (return value: cc.Lens3D)
function Lens3D:setPosition(position) end
---* brief Get the center position of lens effect.<br>
---* return The center position of lens effect.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Lens3D:getPosition() end
---* brief Create the action with center position, radius, a grid size and duration.<br>
---* param duration Specify the duration of the Lens3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param position Specify the center position of the lens.<br>
---* param radius Specify the radius of the lens.<br>
---* return If the creation success, return a pointer of Lens3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param position vec2_table@ #vec2_table position
---@param radius float@ #float radius
---@return cc.Lens3D@ Lens3D#Lens3D ret (return value: cc.Lens3D)
function Lens3D:create(duration,gridSize,position,radius) end
---* 
---@return cc.Lens3D@ Lens3D#Lens3D ret (return value: cc.Lens3D)
function Lens3D:clone() end
---* 
---@param time float@ #float time
---@return cc.Lens3D@ Lens3D#Lens3D self (return value: cc.Lens3D)
function Lens3D:update(time) end
---* 
---@return cc.Lens3D@ Lens3D#Lens3D self (return value: cc.Lens3D)
function Lens3D:Lens3D() end


---@class ccui.LinearLayoutParameter :  LayoutParameter
local LinearLayoutParameter={ }
---@class LinearLayoutParameter : ccui.LinearLayoutParameter
ccui.LinearLayoutParameter=LinearLayoutParameter


---* Sets LinearGravity parameter for LayoutParameter.<br>
---* see LinearGravity<br>
---* param gravity Gravity in LinearGravity.
---@param gravity int@ #int gravity
---@return ccui.LinearLayoutParameter@ LinearLayoutParameter#LinearLayoutParameter self (return value: ccui.LinearLayoutParameter)
function LinearLayoutParameter:setGravity(gravity) end
---* Gets LinearGravity parameter for LayoutParameter.<br>
---* see LinearGravity<br>
---* return LinearGravity
---@return int@ int#int ret (return value: int)
function LinearLayoutParameter:getGravity() end
---* Create a empty LinearLayoutParameter instance.<br>
---* return A initialized LayoutParameter which is marked as "autorelease".
---@return ccui.LinearLayoutParameter@ LinearLayoutParameter#LinearLayoutParameter ret (return value: ccui.LinearLayoutParameter)
function LinearLayoutParameter:create() end
---* 
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter ret (return value: ccui.LayoutParameter)
function LinearLayoutParameter:createCloneInstance() end
---* 
---@param model ccui.LayoutParameter@ #ccui.LayoutParameter model
---@return ccui.LinearLayoutParameter@ LinearLayoutParameter#LinearLayoutParameter self (return value: ccui.LinearLayoutParameter)
function LinearLayoutParameter:copyProperties(model) end
---* Default constructor.<br>
---* lua new
---@return ccui.LinearLayoutParameter@ LinearLayoutParameter#LinearLayoutParameter self (return value: ccui.LinearLayoutParameter)
function LinearLayoutParameter:LinearLayoutParameter() end


---@class cc.Liquid :  Grid3DAction
local Liquid={ }
---@class Liquid : cc.Liquid
cc.Liquid=Liquid


---* brief Set the amplitude rate of the effect.<br>
---* param amplitudeRate The value of amplitude rate will be set.
---@param amplitudeRate float@ #float amplitudeRate
---@return cc.Liquid@ Liquid#Liquid self (return value: cc.Liquid)
function Liquid:setAmplitudeRate(amplitudeRate) end
---* brief Initializes the action with amplitude, grid size, waves count and duration.<br>
---* param duration Specify the duration of the Liquid action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the Liquid action.<br>
---* param amplitude Specify the amplitude of the Liquid action.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return boolean@ bool#bool ret (return value: bool)
function Liquid:initWithDuration(duration,gridSize,waves,amplitude) end
---* brief Get the amplitude of the effect.<br>
---* return Return the amplitude of the effect.
---@return float@ float#float ret (return value: float)
function Liquid:getAmplitude() end
---* brief Get the amplitude rate of the effect.<br>
---* return Return the amplitude rate of the effect.
---@return float@ float#float ret (return value: float)
function Liquid:getAmplitudeRate() end
---* brief Set the amplitude to the effect.<br>
---* param amplitude The value of amplitude will be set.
---@param amplitude float@ #float amplitude
---@return cc.Liquid@ Liquid#Liquid self (return value: cc.Liquid)
function Liquid:setAmplitude(amplitude) end
---* brief Create the action with amplitude, grid size, waves count and duration.<br>
---* param duration Specify the duration of the Liquid action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the Liquid action.<br>
---* param amplitude Specify the amplitude of the Liquid action.<br>
---* return If the creation success, return a pointer of Liquid action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return cc.Liquid@ Liquid#Liquid ret (return value: cc.Liquid)
function Liquid:create(duration,gridSize,waves,amplitude) end
---* 
---@return cc.Liquid@ Liquid#Liquid ret (return value: cc.Liquid)
function Liquid:clone() end
---* 
---@param time float@ #float time
---@return cc.Liquid@ Liquid#Liquid self (return value: cc.Liquid)
function Liquid:update(time) end
---* 
---@return cc.Liquid@ Liquid#Liquid self (return value: cc.Liquid)
function Liquid:Liquid() end


---@class ccui.ListView :  ScrollView
local ListView={ }
---@class ListView : ccui.ListView
ccui.ListView=ListView


---* Set the gravity of ListView.<br>
---* see `ListViewGravity`
---@param gravity int@ #int gravity
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setGravity(gravity) end
---* Removes the last item of ListView.
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:removeLastItem() end
---* Get the left padding in ListView<br>
---* return Left padding in float
---@return float@ float#float ret (return value: float)
function ListView:getLeftPadding() end
---* brief Query the center item<br>
---* return An item instance.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getCenterItemInCurrentView() end
---* brief Query current selected widget's index.<br>
---* return An index of a selected item.
---@return int@ int#int ret (return value: int)
function ListView:getCurSelectedIndex() end
---* Get the time in seconds to scroll between items.<br>
---* return The time in seconds to scroll between items<br>
---* see setScrollDuration(float)
---@return float@ float#float ret (return value: float)
function ListView:getScrollDuration() end
---* Query whether the magnetic out of boundary is allowed.
---@return boolean@ bool#bool ret (return value: bool)
function ListView:getMagneticAllowedOutOfBoundary() end
---* brief Query margin between each item in ListView.<br>
---* return A margin in float.
---@return float@ float#float ret (return value: float)
function ListView:getItemsMargin() end
---@param itemIndex int@ #int itemIndex
---@param positionRatioInView vec2_table@ #vec2_table positionRatioInView
---@param itemAnchorPoint vec2_table@ #vec2_table itemAnchorPoint
---@param timeInSec float@ #float timeInSec
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
---@overload fun(itemIndex:int,positionRatioInView:vec2_table,itemAnchorPoint:vec2_table,timeInSec:float):ccui.ListView
---@overload fun(itemIndex:int,positionRatioInView:vec2_table,itemAnchorPoint:vec2_table):ccui.ListView
function ListView:scrollToItem(itemIndex,positionRatioInView,itemAnchorPoint,timeInSec) end
---* brief Jump to specific item<br>
---* param itemIndex Specifies the item's index<br>
---* param positionRatioInView Specifies the position with ratio in list view's content size.<br>
---* param itemAnchorPoint Specifies an anchor point of each item for position to calculate distance.
---@param itemIndex int@ #int itemIndex
---@param positionRatioInView vec2_table@ #vec2_table positionRatioInView
---@param itemAnchorPoint vec2_table@ #vec2_table itemAnchorPoint
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToItem(itemIndex,positionRatioInView,itemAnchorPoint) end
---* Change padding with top padding<br>
---* param t Top padding in float
---@param t float@ #float t
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setTopPadding(t) end
---* Return the index of specified widget.<br>
---* param item  A widget pointer.<br>
---* return The index of a given widget in ListView.
---@param item ccui.Widget@ #ccui.Widget item
---@return int@ int#int ret (return value: int)
function ListView:getIndex(item) end
---* Insert a  custom item into the end of ListView.<br>
---* param item An item in `Widget*`.
---@param item ccui.Widget@ #ccui.Widget item
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:pushBackCustomItem(item) end
---* brief Set current selected widget's index and call TouchEventType::ENDED event.<br>
---* param itemIndex A index of a selected item.
---@param itemIndex int@ #int itemIndex
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setCurSelectedIndex(itemIndex) end
---* Insert a default item(create by cloning model) into listview at a give index.<br>
---* param index  An index in ssize_t.
---@param index int@ #int index
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:insertDefaultItem(index) end
---* Set magnetic type of ListView.<br>
---* see `MagneticType`
---@param magneticType int@ #int magneticType
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setMagneticType(magneticType) end
---* Set magnetic allowed out of boundary.
---@param magneticAllowedOutOfBoundary boolean@ #bool magneticAllowedOutOfBoundary
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setMagneticAllowedOutOfBoundary(magneticAllowedOutOfBoundary) end
---* Add an event click callback to ListView, then one item of Listview is clicked, the callback will be called.<br>
---* param callback A callback function with type of `ccListViewCallback`.
---@param callback function@ #function callback
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:addEventListener(callback) end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:doLayout() end
---* brief Query the topmost item in horizontal list<br>
---* return An item instance.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getTopmostItemInCurrentView() end
---* Change padding with left, top, right, and bottom padding.<br>
---* param l Left padding in float.<br>
---* param t Top margin in float.<br>
---* param r Right margin in float.<br>
---* param b Bottom margin in float.
---@param l float@ #float l
---@param t float@ #float t
---@param r float@ #float r
---@param b float@ #float b
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setPadding(l,t,r,b) end
---* brief Remove all items in current ListView.
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:removeAllItems() end
---* Get the right padding in ListView<br>
---* return Right padding in float
---@return float@ float#float ret (return value: float)
function ListView:getRightPadding() end
---* brief Query the bottommost item in horizontal list<br>
---* return An item instance.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getBottommostItemInCurrentView() end
---* Return all items in a ListView.<br>
---* returns A vector of widget pointers.
---@return array_table@ array_table#array_table ret (return value: array_table)
function ListView:getItems() end
---* brief Query the leftmost item in horizontal list<br>
---* return An item instance.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getLeftmostItemInCurrentView() end
---* Set the margin between each item in ListView.<br>
---* param margin A margin in float.
---@param margin float@ #float margin
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setItemsMargin(margin) end
---* Get magnetic type of ListView.
---@return int@ int#int ret (return value: int)
function ListView:getMagneticType() end
---* Return an item at a given index.<br>
---* param index A given index in ssize_t.<br>
---* return A widget instance.
---@param index int@ #int index
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getItem(index) end
---* Remove an item at given index.<br>
---* param index A given index in ssize_t.
---@param index int@ #int index
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:removeItem(index) end
---* Get the top padding in ListView<br>
---* return Top padding in float
---@return float@ float#float ret (return value: float)
function ListView:getTopPadding() end
---* Insert a default item(create by a cloned model) at the end of the listview.
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:pushBackDefaultItem() end
---* Change padding with left padding<br>
---* param l Left padding in float.
---@param l float@ #float l
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setLeftPadding(l) end
---* brief Query the closest item to a specific position in inner container.<br>
---* param targetPosition Specifies the target position in inner container's coordinates.<br>
---* param itemAnchorPoint Specifies an anchor point of each item for position to calculate distance.<br>
---* return An item instance if list view is not empty. Otherwise, returns null.
---@param targetPosition vec2_table@ #vec2_table targetPosition
---@param itemAnchorPoint vec2_table@ #vec2_table itemAnchorPoint
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getClosestItemToPosition(targetPosition,itemAnchorPoint) end
---* Change padding with bottom padding<br>
---* param b Bottom padding in float
---@param b float@ #float b
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setBottomPadding(b) end
---* Set the time in seconds to scroll between items.<br>
---* Subsequent calls of function 'scrollToItem', will take 'time' seconds for scrolling.<br>
---* param time The seconds needed to scroll between two items. 'time' must be >= 0<br>
---* see scrollToItem(ssize_t, const Vec2&, const Vec2&)
---@param time float@ #float time
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setScrollDuration(time) end
---* brief Query the closest item to a specific position in current view.<br>
---* For instance, to find the item in the center of view, call 'getClosestItemToPositionInCurrentView(Vec2::ANCHOR_MIDDLE, Vec2::ANCHOR_MIDDLE)'.<br>
---* param positionRatioInView Specifies the target position with ratio in list view's content size.<br>
---* param itemAnchorPoint Specifies an anchor point of each item for position to calculate distance.<br>
---* return An item instance if list view is not empty. Otherwise, returns null.
---@param positionRatioInView vec2_table@ #vec2_table positionRatioInView
---@param itemAnchorPoint vec2_table@ #vec2_table itemAnchorPoint
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getClosestItemToPositionInCurrentView(positionRatioInView,itemAnchorPoint) end
---* brief Query the rightmost item in horizontal list<br>
---* return An item instance.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ListView:getRightmostItemInCurrentView() end
---* Change padding with right padding<br>
---* param r Right padding in float
---@param r float@ #float r
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setRightPadding(r) end
---* Set an item model for listview.<br>
---* When calling `pushBackDefaultItem`, the model will be used as a blueprint and new model copy will be inserted into ListView.<br>
---* param model  Model in `Widget*`.
---@param model ccui.Widget@ #ccui.Widget model
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setItemModel(model) end
---* Get the bottom padding in ListView<br>
---* return Bottom padding in float
---@return float@ float#float ret (return value: float)
function ListView:getBottomPadding() end
---* brief Insert a custom widget into ListView at a given index.<br>
---* param item A widget pointer to be inserted.<br>
---* param index A given index in ssize_t.
---@param item ccui.Widget@ #ccui.Widget item
---@param index int@ #int index
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:insertCustomItem(item,index) end
---* Create an empty ListView.<br>
---* return A ListView instance.
---@return ccui.ListView@ ListView#ListView ret (return value: ccui.ListView)
function ListView:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ListView:createInstance() end
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@param name string@ #string name
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
---@overload fun(child:cc.Node,zOrder:int):ccui.ListView
---@overload fun(child:cc.Node):ccui.ListView
---@overload fun(child:cc.Node,zOrder:int,unkown2:int):ccui.ListView
---@overload fun(child:cc.Node,zOrder:int,name:string):ccui.ListView
function ListView:addChild(child,zOrder,name) end
---* Override functions
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToBottom() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ListView:init() end
---* Changes scroll direction of scrollview.<br>
---* Direction Direction::VERTICAL means vertical scroll, Direction::HORIZONTAL means horizontal scroll.<br>
---* param dir Set the list view's scroll direction.
---@param dir int@ #int dir
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:setDirection(dir) end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToTopRight() end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToLeft() end
---* 
---@param cleanup boolean@ #bool cleanup
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:removeAllChildrenWithCleanup(cleanup) end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:requestDoLayout() end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:removeAllChildren() end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToTopLeft() end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:removeChild(child,cleanup) end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToBottomRight() end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToTop() end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToBottomLeft() end
---* 
---@param percent vec2_table@ #vec2_table percent
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToPercentBothDirection(percent) end
---* 
---@param percent float@ #float percent
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToPercentHorizontal(percent) end
---* 
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToRight() end
---* 
---@return string@ string#string ret (return value: string)
function ListView:getDescription() end
---* 
---@param percent float@ #float percent
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:jumpToPercentVertical(percent) end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.ListView@ ListView#ListView self (return value: ccui.ListView)
function ListView:ListView() end


---@class ccui.LoadingBar :  Widget
local LoadingBar={ }
---@class LoadingBar : ccui.LoadingBar
ccui.LoadingBar=LoadingBar


---* Changes the progress value of LoadingBar.<br>
---* param percent   Percent value from 1 to 100.
---@param percent float@ #float percent
---@return ccui.LoadingBar@ LoadingBar#LoadingBar self (return value: ccui.LoadingBar)
function LoadingBar:setPercent(percent) end
---* Load texture for LoadingBar.<br>
---* param texture   File name of texture.<br>
---* param texType   Texture resource type,@see TextureResType.
---@param texture string@ #string texture
---@param texType int@ #int texType
---@return ccui.LoadingBar@ LoadingBar#LoadingBar self (return value: ccui.LoadingBar)
function LoadingBar:loadTexture(texture,texType) end
---* Change the progress direction of LoadingBar.<br>
---* see Direction  `LEFT` means progress left to right, `RIGHT` otherwise.<br>
---* param direction Direction
---@param direction int@ #int direction
---@return ccui.LoadingBar@ LoadingBar#LoadingBar self (return value: ccui.LoadingBar)
function LoadingBar:setDirection(direction) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function LoadingBar:getRenderFile() end
---* Enable scale9 renderer.<br>
---* param enabled Set to true will use scale9 renderer, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.LoadingBar@ LoadingBar#LoadingBar self (return value: ccui.LoadingBar)
function LoadingBar:setScale9Enabled(enabled) end
---* Set capInsets for LoadingBar.<br>
---* This setting only take effect when enable scale9 renderer.<br>
---* param capInsets CapInset in `Rect`.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.LoadingBar@ LoadingBar#LoadingBar self (return value: ccui.LoadingBar)
function LoadingBar:setCapInsets(capInsets) end
---* Get the progress direction of LoadingBar.<br>
---* see Direction  `LEFT` means progress left to right, `RIGHT` otherwise.<br>
---* return LoadingBar progress direction.
---@return int@ int#int ret (return value: int)
function LoadingBar:getDirection() end
---* brief Query LoadingBar's capInsets.<br>
---* return CapInsets of LoadingBar.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function LoadingBar:getCapInsets() end
---* brief Query whether LoadingBar is using scale9 renderer or not.<br>
---* return Whether LoadingBar uses scale9 renderer or not.
---@return boolean@ bool#bool ret (return value: bool)
function LoadingBar:isScale9Enabled() end
---* Get the progress value of LoadingBar.<br>
---* return Progress value from 1 to 100.
---@return float@ float#float ret (return value: float)
function LoadingBar:getPercent() end
---@param textureName string@ #string textureName
---@param texType int@ #int texType
---@param percentage float@ #float percentage
---@return ccui.LoadingBar@ LoadingBar#LoadingBar ret (return value: ccui.LoadingBar)
---@overload fun(textureName:string,unkown1:float):ccui.LoadingBar
---@overload fun():ccui.LoadingBar
---@overload fun(textureName:string,texType:int,percentage:float):ccui.LoadingBar
function LoadingBar:create(textureName,texType,percentage) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function LoadingBar:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function LoadingBar:getVirtualRenderer() end
---* 
---@return string@ string#string ret (return value: string)
function LoadingBar:getDescription() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function LoadingBar:getVirtualRendererSize() end
---* 
---@param ignore boolean@ #bool ignore
---@return ccui.LoadingBar@ LoadingBar#LoadingBar self (return value: ccui.LoadingBar)
function LoadingBar:ignoreContentAdaptWithSize(ignore) end
---* Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.LoadingBar@ LoadingBar#LoadingBar self (return value: ccui.LoadingBar)
function LoadingBar:LoadingBar() end


---@class cc.Manifest :  Ref
local Manifest={ }
---@class Manifest : cc.Manifest
cc.Manifest=Manifest


---*  @brief Gets remote manifest file url.
---@return string@ string#string ret (return value: string)
function Manifest:getManifestFileUrl() end
---*  @brief Check whether the version informations have been fully loaded
---@return boolean@ bool#bool ret (return value: bool)
function Manifest:isVersionLoaded() end
---*  @brief Check whether the manifest have been fully loaded
---@return boolean@ bool#bool ret (return value: bool)
function Manifest:isLoaded() end
---*  @brief Gets remote package url.
---@return string@ string#string ret (return value: string)
function Manifest:getPackageUrl() end
---*  @brief Gets manifest version.
---@return string@ string#string ret (return value: string)
function Manifest:getVersion() end
---*  @brief Gets remote version file url.
---@return string@ string#string ret (return value: string)
function Manifest:getVersionFileUrl() end
---*  @brief Get the search paths list related to the Manifest.
---@return array_table@ array_table#array_table ret (return value: array_table)
function Manifest:getSearchPaths() end


---@class cc.Material :  RenderState
local Material={ }
---@class Material : cc.Material
cc.Material=Material


---*  returns a clone (deep-copy) of the material 
---@return cc.Material@ Material#Material ret (return value: cc.Material)
function Material:clone() end
---*  Returns the number of Techniques in the Material. 
---@return int@ int#int ret (return value: int)
function Material:getTechniqueCount() end
---* / sets the material name
---@param name string@ #string name
---@return cc.Material@ Material#Material self (return value: cc.Material)
function Material:setName(name) end
---*  Returns a Technique by index. <br>
---* returns `nullptr` if the index is invalid.
---@param index int@ #int index
---@return cc.Technique@ Technique#Technique ret (return value: cc.Technique)
function Material:getTechniqueByIndex(index) end
---* / returns the material name
---@return string@ string#string ret (return value: string)
function Material:getName() end
---*  Returns the list of Techniques 
---@return array_table@ array_table#array_table ret (return value: array_table)
function Material:getTechniques() end
---*  Sets the current technique 
---@param techniqueName string@ #string techniqueName
---@return cc.Material@ Material#Material self (return value: cc.Material)
function Material:setTechnique(techniqueName) end
---*  Returns a Technique by its name.<br>
---* returns `nullptr` if the Technique can't be found.
---@param name string@ #string name
---@return cc.Technique@ Technique#Technique ret (return value: cc.Technique)
function Material:getTechniqueByName(name) end
---*  Adds a Technique into the Material 
---@param technique cc.Technique@ #cc.Technique technique
---@return cc.Material@ Material#Material self (return value: cc.Material)
function Material:addTechnique(technique) end
---*  Returns the Technique used by the Material 
---@return cc.Technique@ Technique#Technique ret (return value: cc.Technique)
function Material:getTechnique() end
---* Creates a Material using the data from the Properties object defined at the specified URL,<br>
---* where the URL is of the format "<file-path>.<extension>#<namespace-id>/<namespace-id>/.../<namespace-id>"<br>
---* (and "#<namespace-id>/<namespace-id>/.../<namespace-id>" is optional).<br>
---* param url The URL pointing to the Properties object defining the material.<br>
---* return A new Material or NULL if there was an error.
---@param path string@ #string path
---@return cc.Material@ Material#Material ret (return value: cc.Material)
function Material:createWithFilename(path) end
---*  Creates a Material with a GLProgramState.<br>
---* It will only contain one Technique and one Pass.<br>
---* Added in order to support legacy code.
---@param programState cc.GLProgramState@ #cc.GLProgramState programState
---@return cc.Material@ Material#Material ret (return value: cc.Material)
function Material:createWithGLStateProgram(programState) end
---* Creates a material from the specified properties object.<br>
---* param materialProperties The properties object defining the<br>
---* material (must have namespace equal to 'material').<br>
---* return A new Material.
---@param materialProperties cc.Properties@ #cc.Properties materialProperties
---@return cc.Material@ Material#Material ret (return value: cc.Material)
function Material:createWithProperties(materialProperties) end


---@class cc.Menu :  Layer
local Menu={ }
---@class Menu : cc.Menu
cc.Menu=Menu


---*  initializes a Menu with a NSArray of MenuItem objects 
---@param arrayOfItems array_table@ #array_table arrayOfItems
---@return boolean@ bool#bool ret (return value: bool)
function Menu:initWithArray(arrayOfItems) end
---* Set whether the menu is enabled. If set to false, interacting with the menu<br>
---* will have no effect.<br>
---* The default value is true, a menu is enabled by default.<br>
---* param value true if menu is to be enabled, false if menu is to be disabled.
---@param value boolean@ #bool value
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:setEnabled(value) end
---*  Align items vertically. 
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:alignItemsVertically() end
---* Determines if the menu is enabled.<br>
---* see `setEnabled(bool)`.<br>
---* return whether the menu is enabled or not.
---@return boolean@ bool#bool ret (return value: bool)
function Menu:isEnabled() end
---*  Align items horizontally. 
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:alignItemsHorizontally() end
---*  Align items horizontally with padding.<br>
---* since v0.7.2
---@param padding float@ #float padding
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:alignItemsHorizontallyWithPadding(padding) end
---*  Align items vertically with padding.<br>
---* since v0.7.2
---@param padding float@ #float padding
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:alignItemsVerticallyWithPadding(padding) end
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@param name string@ #string name
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
---@overload fun(child:cc.Node,zOrder:int):cc.Menu
---@overload fun(child:cc.Node):cc.Menu
---@overload fun(child:cc.Node,zOrder:int,unkown2:int):cc.Menu
---@overload fun(child:cc.Node,zOrder:int,name:string):cc.Menu
function Menu:addChild(child,zOrder,name) end
---* 
---@return string@ string#string ret (return value: string)
function Menu:getDescription() end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:removeChild(child,cleanup) end
---*  initializes an empty Menu 
---@return boolean@ bool#bool ret (return value: bool)
function Menu:init() end
---* 
---@param value boolean@ #bool value
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:setOpacityModifyRGB(value) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Menu:isOpacityModifyRGB() end
---* js ctor
---@return cc.Menu@ Menu#Menu self (return value: cc.Menu)
function Menu:Menu() end


---@class cc.MenuItem :  Node
local MenuItem={ }
---@class MenuItem : cc.MenuItem
cc.MenuItem=MenuItem


---*  Enables or disables the item. 
---@param value boolean@ #bool value
---@return cc.MenuItem@ MenuItem#MenuItem self (return value: cc.MenuItem)
function MenuItem:setEnabled(value) end
---*  Activate the item. 
---@return cc.MenuItem@ MenuItem#MenuItem self (return value: cc.MenuItem)
function MenuItem:activate() end
---*  Returns whether or not the item is enabled. 
---@return boolean@ bool#bool ret (return value: bool)
function MenuItem:isEnabled() end
---*  The item was selected (not activated), similar to "mouse-over". 
---@return cc.MenuItem@ MenuItem#MenuItem self (return value: cc.MenuItem)
function MenuItem:selected() end
---*  Returns whether or not the item is selected. 
---@return boolean@ bool#bool ret (return value: bool)
function MenuItem:isSelected() end
---*  The item was unselected. 
---@return cc.MenuItem@ MenuItem#MenuItem self (return value: cc.MenuItem)
function MenuItem:unselected() end
---*  Returns the outside box. 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function MenuItem:rect() end
---* js NA
---@return string@ string#string ret (return value: string)
function MenuItem:getDescription() end
---* js ctor
---@return cc.MenuItem@ MenuItem#MenuItem self (return value: cc.MenuItem)
function MenuItem:MenuItem() end


---@class cc.MenuItemAtlasFont :  MenuItemLabel
local MenuItemAtlasFont={ }
---@class MenuItemAtlasFont : cc.MenuItemAtlasFont
cc.MenuItemAtlasFont=MenuItemAtlasFont


---*  Initializes a menu item from a string and atlas with a target/selector. 
---@param value string@ #string value
---@param charMapFile string@ #string charMapFile
---@param itemWidth int@ #int itemWidth
---@param itemHeight int@ #int itemHeight
---@param startCharMap char@ #char startCharMap
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function MenuItemAtlasFont:initWithString(value,charMapFile,itemWidth,itemHeight,startCharMap,callback) end
---* js ctor
---@return cc.MenuItemAtlasFont@ MenuItemAtlasFont#MenuItemAtlasFont self (return value: cc.MenuItemAtlasFont)
function MenuItemAtlasFont:MenuItemAtlasFont() end


---@class cc.MenuItemFont :  MenuItemLabel
local MenuItemFont={ }
---@class MenuItemFont : cc.MenuItemFont
cc.MenuItemFont=MenuItemFont


---*  Returns the name of the Font.<br>
---* js getFontNameObj<br>
---* js NA
---@return string@ string#string ret (return value: string)
function MenuItemFont:getFontNameObj() end
---* Set the font name .<br>
---* c++ can not overload static and non-static member functions with the same parameter types.<br>
---* so change the name to setFontNameObj.<br>
---* js setFontName<br>
---* js NA
---@param name string@ #string name
---@return cc.MenuItemFont@ MenuItemFont#MenuItemFont self (return value: cc.MenuItemFont)
function MenuItemFont:setFontNameObj(name) end
---*  Initializes a menu item from a string with a target/selector. 
---@param value string@ #string value
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function MenuItemFont:initWithString(value,callback) end
---*  get font size .<br>
---* js getFontSize<br>
---* js NA
---@return int@ int#int ret (return value: int)
function MenuItemFont:getFontSizeObj() end
---*  Set font size.<br>
---* c++ can not overload static and non-static member functions with the same parameter types.<br>
---* so change the name to setFontSizeObj.<br>
---* js setFontSize<br>
---* js NA
---@param size int@ #int size
---@return cc.MenuItemFont@ MenuItemFont#MenuItemFont self (return value: cc.MenuItemFont)
function MenuItemFont:setFontSizeObj(size) end
---*  Set the default font name. 
---@param name string@ #string name
---@return cc.MenuItemFont@ MenuItemFont#MenuItemFont self (return value: cc.MenuItemFont)
function MenuItemFont:setFontName(name) end
---*  Get default font size. 
---@return int@ int#int ret (return value: int)
function MenuItemFont:getFontSize() end
---*  Get the default font name. 
---@return string@ string#string ret (return value: string)
function MenuItemFont:getFontName() end
---*  Set default font size. 
---@param size int@ #int size
---@return cc.MenuItemFont@ MenuItemFont#MenuItemFont self (return value: cc.MenuItemFont)
function MenuItemFont:setFontSize(size) end
---* js ctor
---@return cc.MenuItemFont@ MenuItemFont#MenuItemFont self (return value: cc.MenuItemFont)
function MenuItemFont:MenuItemFont() end


---@class cc.MenuItemImage :  MenuItemSprite
local MenuItemImage={ }
---@class MenuItemImage : cc.MenuItemImage
cc.MenuItemImage=MenuItemImage


---*  Sets the sprite frame for the disabled image. 
---@param frame cc.SpriteFrame@ #cc.SpriteFrame frame
---@return cc.MenuItemImage@ MenuItemImage#MenuItemImage self (return value: cc.MenuItemImage)
function MenuItemImage:setDisabledSpriteFrame(frame) end
---*  Sets the sprite frame for the selected image. 
---@param frame cc.SpriteFrame@ #cc.SpriteFrame frame
---@return cc.MenuItemImage@ MenuItemImage#MenuItemImage self (return value: cc.MenuItemImage)
function MenuItemImage:setSelectedSpriteFrame(frame) end
---*  Sets the sprite frame for the normal image. 
---@param frame cc.SpriteFrame@ #cc.SpriteFrame frame
---@return cc.MenuItemImage@ MenuItemImage#MenuItemImage self (return value: cc.MenuItemImage)
function MenuItemImage:setNormalSpriteFrame(frame) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function MenuItemImage:init() end
---*  Initializes a menu item with a normal, selected and disabled image with a callable object. 
---@param normalImage string@ #string normalImage
---@param selectedImage string@ #string selectedImage
---@param disabledImage string@ #string disabledImage
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function MenuItemImage:initWithNormalImage(normalImage,selectedImage,disabledImage,callback) end
---* js ctor
---@return cc.MenuItemImage@ MenuItemImage#MenuItemImage self (return value: cc.MenuItemImage)
function MenuItemImage:MenuItemImage() end


---@class cc.MenuItemLabel :  MenuItem
local MenuItemLabel={ }
---@class MenuItemLabel : cc.MenuItemLabel
cc.MenuItemLabel=MenuItemLabel


---*  Sets the label that is rendered. 
---@param node cc.Node@ #cc.Node node
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:setLabel(node) end
---*  Get the inner string of the inner label. 
---@return string@ string#string ret (return value: string)
function MenuItemLabel:getString() end
---*  Gets the color that will be used when the item is disabled. 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function MenuItemLabel:getDisabledColor() end
---*  Sets a new string to the inner label. 
---@param label string@ #string label
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:setString(label) end
---*  Initializes a MenuItemLabel with a Label, target and selector. 
---@param label cc.Node@ #cc.Node label
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function MenuItemLabel:initWithLabel(label,callback) end
---*  Sets the color that will be used when the item is disabled. 
---@param color color3b_table@ #color3b_table color
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:setDisabledColor(color) end
---*  Gets the label that is rendered. 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function MenuItemLabel:getLabel() end
---* 
---@param enabled boolean@ #bool enabled
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:setEnabled(enabled) end
---* 
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:activate() end
---* 
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:unselected() end
---* 
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:selected() end
---* js ctor
---@return cc.MenuItemLabel@ MenuItemLabel#MenuItemLabel self (return value: cc.MenuItemLabel)
function MenuItemLabel:MenuItemLabel() end


---@class cc.MenuItemSprite :  MenuItem
local MenuItemSprite={ }
---@class MenuItemSprite : cc.MenuItemSprite
cc.MenuItemSprite=MenuItemSprite


---*  Enables or disables the item. 
---@param bEnabled boolean@ #bool bEnabled
---@return cc.MenuItemSprite@ MenuItemSprite#MenuItemSprite self (return value: cc.MenuItemSprite)
function MenuItemSprite:setEnabled(bEnabled) end
---* The item was selected (not activated), similar to "mouse-over".<br>
---* since v0.99.5
---@return cc.MenuItemSprite@ MenuItemSprite#MenuItemSprite self (return value: cc.MenuItemSprite)
function MenuItemSprite:selected() end
---*  Sets the image used when the item is not selected. 
---@param image cc.Node@ #cc.Node image
---@return cc.MenuItemSprite@ MenuItemSprite#MenuItemSprite self (return value: cc.MenuItemSprite)
function MenuItemSprite:setNormalImage(image) end
---*  Sets the image used when the item is disabled. 
---@param image cc.Node@ #cc.Node image
---@return cc.MenuItemSprite@ MenuItemSprite#MenuItemSprite self (return value: cc.MenuItemSprite)
function MenuItemSprite:setDisabledImage(image) end
---*  Initializes a menu item with a normal, selected and disabled image with a callable object. 
---@param normalSprite cc.Node@ #cc.Node normalSprite
---@param selectedSprite cc.Node@ #cc.Node selectedSprite
---@param disabledSprite cc.Node@ #cc.Node disabledSprite
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
function MenuItemSprite:initWithNormalSprite(normalSprite,selectedSprite,disabledSprite,callback) end
---*  Sets the image used when the item is selected. 
---@param image cc.Node@ #cc.Node image
---@return cc.MenuItemSprite@ MenuItemSprite#MenuItemSprite self (return value: cc.MenuItemSprite)
function MenuItemSprite:setSelectedImage(image) end
---*  Gets the image used when the item is disabled. 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function MenuItemSprite:getDisabledImage() end
---*  Gets the image used when the item is selected. 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function MenuItemSprite:getSelectedImage() end
---*  Gets the image used when the item is not selected. 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function MenuItemSprite:getNormalImage() end
---*  The item was unselected. 
---@return cc.MenuItemSprite@ MenuItemSprite#MenuItemSprite self (return value: cc.MenuItemSprite)
function MenuItemSprite:unselected() end
---* 
---@return cc.MenuItemSprite@ MenuItemSprite#MenuItemSprite self (return value: cc.MenuItemSprite)
function MenuItemSprite:MenuItemSprite() end


---@class cc.MenuItemToggle :  MenuItem
local MenuItemToggle={ }
---@class MenuItemToggle : cc.MenuItemToggle
cc.MenuItemToggle=MenuItemToggle


---*  Sets the array that contains the subitems. 
---@param items array_table@ #array_table items
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:setSubItems(items) end
---*  Initializes a menu item with a item. 
---@param item cc.MenuItem@ #cc.MenuItem item
---@return boolean@ bool#bool ret (return value: bool)
function MenuItemToggle:initWithItem(item) end
---*  Gets the index of the selected item. 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function MenuItemToggle:getSelectedIndex() end
---*  Add more menu item. 
---@param item cc.MenuItem@ #cc.MenuItem item
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:addSubItem(item) end
---*  Return the selected item. 
---@return cc.MenuItem@ MenuItem#MenuItem ret (return value: cc.MenuItem)
function MenuItemToggle:getSelectedItem() end
---*  Sets the index of the selected item. 
---@param index unsigned_int@ #unsigned int index
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:setSelectedIndex(index) end
---* 
---@param var boolean@ #bool var
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:setEnabled(var) end
---* 
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:cleanup() end
---* 
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:activate() end
---* 
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:unselected() end
---* 
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:selected() end
---* js ctor
---@return cc.MenuItemToggle@ MenuItemToggle#MenuItemToggle self (return value: cc.MenuItemToggle)
function MenuItemToggle:MenuItemToggle() end


---@class cc.Mesh :  Ref
local Mesh={ }
---@class Mesh : cc.Mesh
cc.Mesh=Mesh


---*  Returns the Material being used by the Mesh 
---@return cc.Material@ Material#Material ret (return value: cc.Material)
function Mesh:getMaterial() end
---* get per vertex size in bytes
---@return int@ int#int ret (return value: int)
function Mesh:getVertexSizeInBytes() end
---*  Sets a new Material to the Mesh 
---@param material cc.Material@ #cc.Material material
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setMaterial(material) end
---* name getter 
---@return string@ string#string ret (return value: string)
function Mesh:getName() end
---* get MeshVertexAttribute by index
---@param idx int@ #int idx
---@return cc.MeshVertexAttrib@ MeshVertexAttrib#MeshVertexAttrib ret (return value: cc.MeshVertexAttrib)
function Mesh:getMeshVertexAttribute(idx) end
---* calculate the AABB of the mesh<br>
---* note the AABB is in the local space, not the world space
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:calculateAABB() end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param globalZ float@ #float globalZ
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@param lightMask unsigned_int@ #unsigned int lightMask
---@param color vec4_table@ #vec4_table color
---@param forceDepthWrite boolean@ #bool forceDepthWrite
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:draw(renderer,globalZ,transform,flags,lightMask,color,forceDepthWrite) end
---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function Mesh:getBlendFunc() end
---* name setter
---@param name string@ #string name
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setName(name) end
---* Mesh index data setter
---@param indexdata cc.MeshIndexData@ #cc.MeshIndexData indexdata
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setMeshIndexData(indexdata) end
---* get mesh vertex attribute count
---@return int@ int#int ret (return value: int)
function Mesh:getMeshVertexAttribCount() end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setBlendFunc(blendFunc) end
---* force set this Sprite3D to 2D render queue
---@param force2D boolean@ #bool force2D
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setForce2DQueue(force2D) end
---* skin setter
---@param skin cc.MeshSkin@ #cc.MeshSkin skin
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setSkin(skin) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Mesh:isVisible() end
---*   Sets a new GLProgramState for the Mesh<br>
---* A new Material will be created for it
---@param glProgramState cc.GLProgramState@ #cc.GLProgramState glProgramState
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setGLProgramState(glProgramState) end
---* visible getter and setter
---@param visible boolean@ #bool visible
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:setVisible(visible) end
---* 
---@return cc.Mesh@ Mesh#Mesh self (return value: cc.Mesh)
function Mesh:Mesh() end


---@class cc.MotionStreak :  Node@TextureProtocol
local MotionStreak={ }
---@class MotionStreak : cc.MotionStreak
cc.MotionStreak=MotionStreak


---*  Remove all living segments of the ribbon.
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:reset() end
---* 
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setTexture(texture) end
---* 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function MotionStreak:getTexture() end
---*  Color used for the tint.<br>
---* param colors The color used for the tint.
---@param colors color3b_table@ #color3b_table colors
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:tintWithColor(colors) end
---* js NA<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setBlendFunc(blendFunc) end
---*  Sets the starting position initialized or not.<br>
---* param bStartingPositionInitialized True if initialized the starting position.
---@param bStartingPositionInitialized boolean@ #bool bStartingPositionInitialized
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setStartingPositionInitialized(bStartingPositionInitialized) end
---* js NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function MotionStreak:getBlendFunc() end
---*  Is the starting position initialized or not.<br>
---* return True if the starting position is initialized.
---@return boolean@ bool#bool ret (return value: bool)
function MotionStreak:isStartingPositionInitialized() end
---*  When fast mode is enabled, new points are added faster but with lower precision. <br>
---* return True if fast mode is enabled.
---@return boolean@ bool#bool ret (return value: bool)
function MotionStreak:isFastMode() end
---*  Get stroke.<br>
---* return float stroke.
---@return float@ float#float ret (return value: float)
function MotionStreak:getStroke() end
---@param fade float@ #float fade
---@param minSeg float@ #float minSeg
---@param stroke float@ #float stroke
---@param color color3b_table@ #color3b_table color
---@param path string@ #string path
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(fade:float,minSeg:float,stroke:float,color:color3b_table,unkown4:cc.Texture2D):boolean
---@overload fun(fade:float,minSeg:float,stroke:float,color:color3b_table,path:string):boolean
function MotionStreak:initWithFade(fade,minSeg,stroke,color,path) end
---*  Sets fast mode or not.<br>
---* param bFastMode True if enabled fast mode.
---@param bFastMode boolean@ #bool bFastMode
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setFastMode(bFastMode) end
---*  Set stroke.<br>
---* param stroke The width of stroke.
---@param stroke float@ #float stroke
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setStroke(stroke) end
---@param timeToFade float@ #float timeToFade
---@param minSeg float@ #float minSeg
---@param strokeWidth float@ #float strokeWidth
---@param strokeColor color3b_table@ #color3b_table strokeColor
---@param imagePath string@ #string imagePath
---@return cc.MotionStreak@ MotionStreak#MotionStreak ret (return value: cc.MotionStreak)
---@overload fun(timeToFade:float,minSeg:float,strokeWidth:float,strokeColor:color3b_table,unkown4:cc.Texture2D):cc.MotionStreak
---@overload fun(timeToFade:float,minSeg:float,strokeWidth:float,strokeColor:color3b_table,imagePath:string):cc.MotionStreak
function MotionStreak:create(timeToFade,minSeg,strokeWidth,strokeColor,imagePath) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function MotionStreak:isOpacityModifyRGB() end
---* 
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setOpacity(opacity) end
---* 
---@param y float@ #float y
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setPositionY(y) end
---* 
---@param x float@ #float x
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setPositionX(x) end
---* 
---@return float@ float#float ret (return value: float)
function MotionStreak:getPositionY() end
---* 
---@return float@ float#float ret (return value: float)
function MotionStreak:getPositionX() end
---* 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function MotionStreak:getPosition3D() end
---* 
---@param value boolean@ #bool value
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:setOpacityModifyRGB(value) end
---* 
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function MotionStreak:getOpacity() end
---@param x float@ #float x
---@param y float@ #float y
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
---@overload fun(x:float,y:float):cc.MotionStreak
---@overload fun(unkown0:vec2_table):cc.MotionStreak
function MotionStreak:setPosition(x,y) end
---@param x float@ #float x
---@param y float@ #float y
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
---@overload fun(x:float,y:float):cc.MotionStreak
---@overload fun():cc.MotionStreak
function MotionStreak:getPosition(x,y) end
---* 
---@return cc.MotionStreak@ MotionStreak#MotionStreak self (return value: cc.MotionStreak)
function MotionStreak:MotionStreak() end


---@class cc.MotionStreak3D :  Node@TextureProtocol
local MotionStreak3D={ }
---@class MotionStreak3D : cc.MotionStreak3D
cc.MotionStreak3D=MotionStreak3D


---*  Remove all living segments of the ribbon.
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:reset() end
---* 
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setTexture(texture) end
---* 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function MotionStreak3D:getTexture() end
---*  Color used for the tint.<br>
---* param colors The color used for the tint.
---@param colors color3b_table@ #color3b_table colors
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:tintWithColor(colors) end
---* Get the direction of sweeping line segment
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function MotionStreak3D:getSweepAxis() end
---* js NA<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setBlendFunc(blendFunc) end
---*  Sets the starting position initialized or not.<br>
---* param bStartingPositionInitialized True if initialized the starting position.
---@param bStartingPositionInitialized boolean@ #bool bStartingPositionInitialized
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setStartingPositionInitialized(bStartingPositionInitialized) end
---* js NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function MotionStreak3D:getBlendFunc() end
---*  Is the starting position initialized or not.<br>
---* return True if the starting position is initialized.
---@return boolean@ bool#bool ret (return value: bool)
function MotionStreak3D:isStartingPositionInitialized() end
---*  Get stroke.<br>
---* return float stroke.
---@return float@ float#float ret (return value: float)
function MotionStreak3D:getStroke() end
---@param fade float@ #float fade
---@param minSeg float@ #float minSeg
---@param stroke float@ #float stroke
---@param color color3b_table@ #color3b_table color
---@param path string@ #string path
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(fade:float,minSeg:float,stroke:float,color:color3b_table,unkown4:cc.Texture2D):boolean
---@overload fun(fade:float,minSeg:float,stroke:float,color:color3b_table,path:string):boolean
function MotionStreak3D:initWithFade(fade,minSeg,stroke,color,path) end
---* Set the direction of sweeping line segment.<br>
---* param sweepAxis Direction of sweeping line segment
---@param sweepAxis vec3_table@ #vec3_table sweepAxis
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setSweepAxis(sweepAxis) end
---*  Set stroke.<br>
---* param stroke The width of stroke.
---@param stroke float@ #float stroke
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setStroke(stroke) end
---@param fade float@ #float fade
---@param minSeg float@ #float minSeg
---@param stroke float@ #float stroke
---@param color color3b_table@ #color3b_table color
---@param path string@ #string path
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D ret (return value: cc.MotionStreak3D)
---@overload fun(fade:float,minSeg:float,stroke:float,color:color3b_table,unkown4:cc.Texture2D):cc.MotionStreak3D
---@overload fun(fade:float,minSeg:float,stroke:float,color:color3b_table,path:string):cc.MotionStreak3D
function MotionStreak3D:create(fade,minSeg,stroke,color,path) end
---* js NA<br>
---* lua NA
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:draw(renderer,transform,flags) end
---* 
---@param value boolean@ #bool value
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setOpacityModifyRGB(value) end
---* 
---@param y float@ #float y
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setPositionY(y) end
---* 
---@param rotation vec3_table@ #vec3_table rotation
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setRotation3D(rotation) end
---* 
---@param x float@ #float x
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setPositionX(x) end
---* 
---@param position vec3_table@ #vec3_table position
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setPosition3D(position) end
---* 
---@return float@ float#float ret (return value: float)
function MotionStreak3D:getPositionY() end
---* 
---@return float@ float#float ret (return value: float)
function MotionStreak3D:getPositionX() end
---* 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function MotionStreak3D:getPosition3D() end
---* 
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setOpacity(opacity) end
---* lua NA
---@param delta float@ #float delta
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:update(delta) end
---* 
---@param quat cc.Quaternion@ #cc.Quaternion quat
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:setRotationQuat(quat) end
---* 
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function MotionStreak3D:getOpacity() end
---@param x float@ #float x
---@param y float@ #float y
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
---@overload fun(x:float,y:float):cc.MotionStreak3D
---@overload fun(unkown0:vec2_table):cc.MotionStreak3D
function MotionStreak3D:setPosition(x,y) end
---@param x float@ #float x
---@param y float@ #float y
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
---@overload fun(x:float,y:float):cc.MotionStreak3D
---@overload fun():cc.MotionStreak3D
function MotionStreak3D:getPosition(x,y) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function MotionStreak3D:isOpacityModifyRGB() end
---* 
---@return cc.MotionStreak3D@ MotionStreak3D#MotionStreak3D self (return value: cc.MotionStreak3D)
function MotionStreak3D:MotionStreak3D() end


---@class cc.MoveBy :  ActionInterval
local MoveBy={ }
---@class MoveBy : cc.MoveBy
cc.MoveBy=MoveBy


---@param duration float@ #float duration
---@param deltaPosition vec2_table@ #vec2_table deltaPosition
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(duration:float,unkown1:vec3_table):boolean
---@overload fun(duration:float,deltaPosition:vec2_table):boolean
function MoveBy:initWithDuration(duration,deltaPosition) end
---@param duration float@ #float duration
---@param deltaPosition vec2_table@ #vec2_table deltaPosition
---@return cc.MoveBy@ MoveBy#MoveBy ret (return value: cc.MoveBy)
---@overload fun(duration:float,unkown1:vec3_table):cc.MoveBy
---@overload fun(duration:float,deltaPosition:vec2_table):cc.MoveBy
function MoveBy:create(duration,deltaPosition) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.MoveBy@ MoveBy#MoveBy self (return value: cc.MoveBy)
function MoveBy:startWithTarget(target) end
---* 
---@return cc.MoveBy@ MoveBy#MoveBy ret (return value: cc.MoveBy)
function MoveBy:clone() end
---* 
---@return cc.MoveBy@ MoveBy#MoveBy ret (return value: cc.MoveBy)
function MoveBy:reverse() end
---* param time in seconds
---@param time float@ #float time
---@return cc.MoveBy@ MoveBy#MoveBy self (return value: cc.MoveBy)
function MoveBy:update(time) end
---* 
---@return cc.MoveBy@ MoveBy#MoveBy self (return value: cc.MoveBy)
function MoveBy:MoveBy() end


---@class ccs.MovementBoneData :  Ref
local MovementBoneData={ }
---@class MovementBoneData : ccs.MovementBoneData
ccs.MovementBoneData=MovementBoneData


---* 
---@return boolean@ bool#bool ret (return value: bool)
function MovementBoneData:init() end
---* 
---@param index int@ #int index
---@return ccs.FrameData@ FrameData#FrameData ret (return value: ccs.FrameData)
function MovementBoneData:getFrameData(index) end
---* 
---@param frameData ccs.FrameData@ #ccs.FrameData frameData
---@return ccs.MovementBoneData@ MovementBoneData#MovementBoneData self (return value: ccs.MovementBoneData)
function MovementBoneData:addFrameData(frameData) end
---* 
---@return ccs.MovementBoneData@ MovementBoneData#MovementBoneData ret (return value: ccs.MovementBoneData)
function MovementBoneData:create() end
---* js ctor
---@return ccs.MovementBoneData@ MovementBoneData#MovementBoneData self (return value: ccs.MovementBoneData)
function MovementBoneData:MovementBoneData() end


---@class ccs.MovementData :  Ref
local MovementData={ }
---@class MovementData : ccs.MovementData
ccs.MovementData=MovementData


---* 
---@param boneName string@ #string boneName
---@return ccs.MovementBoneData@ MovementBoneData#MovementBoneData ret (return value: ccs.MovementBoneData)
function MovementData:getMovementBoneData(boneName) end
---* 
---@param movBoneData ccs.MovementBoneData@ #ccs.MovementBoneData movBoneData
---@return ccs.MovementData@ MovementData#MovementData self (return value: ccs.MovementData)
function MovementData:addMovementBoneData(movBoneData) end
---* 
---@return ccs.MovementData@ MovementData#MovementData ret (return value: ccs.MovementData)
function MovementData:create() end
---* js ctor
---@return ccs.MovementData@ MovementData#MovementData self (return value: ccs.MovementData)
function MovementData:MovementData() end


---@class cc.MoveTo :  MoveBy
local MoveTo={ }
---@class MoveTo : cc.MoveTo
cc.MoveTo=MoveTo


---@param duration float@ #float duration
---@param position vec2_table@ #vec2_table position
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(duration:float,unkown1:vec3_table):boolean
---@overload fun(duration:float,position:vec2_table):boolean
function MoveTo:initWithDuration(duration,position) end
---@param duration float@ #float duration
---@param position vec2_table@ #vec2_table position
---@return cc.MoveTo@ MoveTo#MoveTo ret (return value: cc.MoveTo)
---@overload fun(duration:float,unkown1:vec3_table):cc.MoveTo
---@overload fun(duration:float,position:vec2_table):cc.MoveTo
function MoveTo:create(duration,position) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.MoveTo@ MoveTo#MoveTo self (return value: cc.MoveTo)
function MoveTo:startWithTarget(target) end
---* 
---@return cc.MoveTo@ MoveTo#MoveTo ret (return value: cc.MoveTo)
function MoveTo:clone() end
---* 
---@return cc.MoveTo@ MoveTo#MoveTo ret (return value: cc.MoveTo)
function MoveTo:reverse() end
---* 
---@return cc.MoveTo@ MoveTo#MoveTo self (return value: cc.MoveTo)
function MoveTo:MoveTo() end


---@class cc.NavMesh :  Ref
local NavMesh={ }
---@class NavMesh : cc.NavMesh
cc.NavMesh=NavMesh


---*  remove a obstacle from navmesh. 
---@param obstacle cc.NavMeshObstacle@ #cc.NavMeshObstacle obstacle
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:removeNavMeshObstacle(obstacle) end
---*  remove a agent from navmesh. 
---@param agent cc.NavMeshAgent@ #cc.NavMeshAgent agent
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:removeNavMeshAgent(agent) end
---*  update navmesh. 
---@param dt float@ #float dt
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:update(dt) end
---*  Check enabled debug draw. 
---@return boolean@ bool#bool ret (return value: bool)
function NavMesh:isDebugDrawEnabled() end
---*  add a agent to navmesh. 
---@param agent cc.NavMeshAgent@ #cc.NavMeshAgent agent
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:addNavMeshAgent(agent) end
---*  add a obstacle to navmesh. 
---@param obstacle cc.NavMeshObstacle@ #cc.NavMeshObstacle obstacle
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:addNavMeshObstacle(obstacle) end
---*  Enable debug draw or disable. 
---@param enable boolean@ #bool enable
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:setDebugDrawEnable(enable) end
---*  Internal method, the updater of debug drawing, need called each frame. 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:debugDraw(renderer) end
---* Create navmesh<br>
---* param navFilePath The NavMesh File path.<br>
---* param geomFilePath The geometry File Path,include offmesh information,etc.
---@param navFilePath string@ #string navFilePath
---@param geomFilePath string@ #string geomFilePath
---@return cc.NavMesh@ NavMesh#NavMesh ret (return value: cc.NavMesh)
function NavMesh:create(navFilePath,geomFilePath) end
---* 
---@return cc.NavMesh@ NavMesh#NavMesh self (return value: cc.NavMesh)
function NavMesh:NavMesh() end


---@class cc.NavMeshAgent :  Component
local NavMeshAgent={ }
---@class NavMeshAgent : cc.NavMeshAgent
cc.NavMeshAgent=NavMeshAgent


---*  set maximal speed of agent 
---@param maxSpeed float@ #float maxSpeed
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setMaxSpeed(maxSpeed) end
---*  synchronize parameter to node. 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:syncToNode() end
---* Traverse OffMeshLink manually
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:completeOffMeshLink() end
---*  get separation weight 
---@return float@ float#float ret (return value: float)
function NavMeshAgent:getSeparationWeight() end
---* Set automatic Traverse OffMeshLink 
---@param isAuto boolean@ #bool isAuto
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setAutoTraverseOffMeshLink(isAuto) end
---*  get current velocity 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function NavMeshAgent:getCurrentVelocity() end
---*  synchronize parameter to agent. 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:syncToAgent() end
---* Check agent arrived OffMeshLink 
---@return boolean@ bool#bool ret (return value: bool)
function NavMeshAgent:isOnOffMeshLink() end
---*  set separation weight 
---@param weight float@ #float weight
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setSeparationWeight(weight) end
---*  pause movement 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:pause() end
---* 
---@return void@ void#void ret (return value: void)
function NavMeshAgent:getUserData() end
---* Set automatic Orientation 
---@param isAuto boolean@ #bool isAuto
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setAutoOrientation(isAuto) end
---*  get agent height 
---@return float@ float#float ret (return value: float)
function NavMeshAgent:getHeight() end
---*  get maximal speed of agent 
---@return float@ float#float ret (return value: float)
function NavMeshAgent:getMaxSpeed() end
---* Get current OffMeshLink information
---@return cc.OffMeshLinkData@ OffMeshLinkData#OffMeshLinkData ret (return value: cc.OffMeshLinkData)
function NavMeshAgent:getCurrentOffMeshLinkData() end
---*  get agent radius 
---@return float@ float#float ret (return value: float)
function NavMeshAgent:getRadius() end
---* synchronization between node and agent is time consuming, you can skip some synchronization using this function
---@param flag int@ #int flag
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setSyncFlag(flag) end
---* 
---@return int@ int#int ret (return value: int)
function NavMeshAgent:getSyncFlag() end
---*  resume movement 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:resume() end
---*  stop movement 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:stop() end
---*  set maximal acceleration of agent
---@param maxAcceleration float@ #float maxAcceleration
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setMaxAcceleration(maxAcceleration) end
---* Set the reference axes of agent's orientation<br>
---* param rotRefAxes The value of reference axes in local coordinate system.
---@param rotRefAxes vec3_table@ #vec3_table rotRefAxes
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setOrientationRefAxes(rotRefAxes) end
---*  get maximal acceleration of agent
---@return float@ float#float ret (return value: float)
function NavMeshAgent:getMaxAcceleration() end
---*  set agent height 
---@param height float@ #float height
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setHeight(height) end
---* 
---@param data void@ #void data
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setUserData(data) end
---*  get obstacle avoidance type 
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function NavMeshAgent:getObstacleAvoidanceType() end
---*  get current velocity 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function NavMeshAgent:getVelocity() end
---*  set agent radius 
---@param radius float@ #float radius
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setRadius(radius) end
---*  set obstacle avoidance type 
---@param type unsigned_char@ #unsigned char type
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:setObstacleAvoidanceType(type) end
---* 
---@return string@ string#string ret (return value: string)
function NavMeshAgent:getNavMeshAgentComponentName() end
---* Create agent<br>
---* param param The parameters of agent.
---@param param cc.NavMeshAgentParam@ #cc.NavMeshAgentParam param
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent ret (return value: cc.NavMeshAgent)
function NavMeshAgent:create(param) end
---* 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:onEnter() end
---* 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:onExit() end
---* 
---@return cc.NavMeshAgent@ NavMeshAgent#NavMeshAgent self (return value: cc.NavMeshAgent)
function NavMeshAgent:NavMeshAgent() end


---@class cc.NavMeshObstacle :  Component
local NavMeshObstacle={ }
---@class NavMeshObstacle : cc.NavMeshObstacle
cc.NavMeshObstacle=NavMeshObstacle


---* 
---@return int@ int#int ret (return value: int)
function NavMeshObstacle:getSyncFlag() end
---* 
---@param radius float@ #float radius
---@param height float@ #float height
---@return boolean@ bool#bool ret (return value: bool)
function NavMeshObstacle:initWith(radius,height) end
---*  synchronize parameter to obstacle. 
---@return cc.NavMeshObstacle@ NavMeshObstacle#NavMeshObstacle self (return value: cc.NavMeshObstacle)
function NavMeshObstacle:syncToObstacle() end
---*  synchronize parameter to node. 
---@return cc.NavMeshObstacle@ NavMeshObstacle#NavMeshObstacle self (return value: cc.NavMeshObstacle)
function NavMeshObstacle:syncToNode() end
---*  Get height of obstacle 
---@return float@ float#float ret (return value: float)
function NavMeshObstacle:getHeight() end
---* synchronization between node and obstacle is time consuming, you can skip some synchronization using this function
---@param flag int@ #int flag
---@return cc.NavMeshObstacle@ NavMeshObstacle#NavMeshObstacle self (return value: cc.NavMeshObstacle)
function NavMeshObstacle:setSyncFlag(flag) end
---*  Get radius of obstacle 
---@return float@ float#float ret (return value: float)
function NavMeshObstacle:getRadius() end
---* Create obstacle, shape is cylinder<br>
---* param radius The radius of obstacle.<br>
---* param height The height of obstacle.
---@param radius float@ #float radius
---@param height float@ #float height
---@return cc.NavMeshObstacle@ NavMeshObstacle#NavMeshObstacle ret (return value: cc.NavMeshObstacle)
function NavMeshObstacle:create(radius,height) end
---* 
---@return string@ string#string ret (return value: string)
function NavMeshObstacle:getNavMeshObstacleComponentName() end
---* 
---@return cc.NavMeshObstacle@ NavMeshObstacle#NavMeshObstacle self (return value: cc.NavMeshObstacle)
function NavMeshObstacle:onEnter() end
---* 
---@return cc.NavMeshObstacle@ NavMeshObstacle#NavMeshObstacle self (return value: cc.NavMeshObstacle)
function NavMeshObstacle:onExit() end
---* 
---@return cc.NavMeshObstacle@ NavMeshObstacle#NavMeshObstacle self (return value: cc.NavMeshObstacle)
function NavMeshObstacle:NavMeshObstacle() end


---@class cc.Node :  Ref
local Node={ }
---@class Node : cc.Node
cc.Node=Node


---@param child cc.Node@ #cc.Node child
---@param localZOrder int@ #int localZOrder
---@param name string@ #string name
---@return cc.Node@ Node#Node self (return value: cc.Node)
---@overload fun(child:cc.Node,localZOrder:int):cc.Node
---@overload fun(child:cc.Node):cc.Node
---@overload fun(child:cc.Node,localZOrder:int,unkown2:int):cc.Node
---@overload fun(child:cc.Node,localZOrder:int,name:string):cc.Node
function Node:addChild(child,localZOrder,name) end
---@param name string@ #string name
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(unkown0:cc.Component):boolean
---@overload fun(name:string):boolean
function Node:removeComponent(name) end
---* 
---@param physicsBody cc.PhysicsBody@ #cc.PhysicsBody physicsBody
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setPhysicsBody(physicsBody) end
---* Gets the description string. It makes debugging easier.<br>
---* return A string<br>
---* js NA<br>
---* lua NA
---@return string@ string#string ret (return value: string)
function Node:getDescription() end
---* Sets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.<br>
---* The difference between `setRotationalSkew()` and `setSkew()` is that the first one simulate Flash's skew functionality,<br>
---* while the second one uses the real skew function.<br>
---* 0 is the default rotation angle.<br>
---* Positive values rotate node clockwise, and negative values for anti-clockwise.<br>
---* param rotationY    The Y rotation in degrees.<br>
---* warning The physics body doesn't support this.<br>
---* js setRotationY
---@param rotationY float@ #float rotationY
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setRotationSkewY(rotationY) end
---* If you want the opacity affect the color property, then set to true.<br>
---* param value A boolean value.
---@param value boolean@ #bool value
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setOpacityModifyRGB(value) end
---* Change node's cascadeOpacity property.<br>
---* param cascadeOpacityEnabled True to enable cascadeOpacity, false otherwise.
---@param cascadeOpacityEnabled boolean@ #bool cascadeOpacityEnabled
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setCascadeOpacityEnabled(cascadeOpacityEnabled) end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function Node:getChildren() end
---* Set the callback of event onExit.<br>
---* param callback A std::function<void()> callback.
---@param callback function@ #function callback
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setOnExitCallback(callback) end
---* Sets the ActionManager object that is used by all actions.<br>
---* warning If you set a new ActionManager, then previously created actions will be removed.<br>
---* param actionManager     A ActionManager object that is used by all actions.
---@param actionManager cc.ActionManager@ #cc.ActionManager actionManager
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setActionManager(actionManager) end
---* Converts a local Vec2 to world space coordinates.The result is in Points.<br>
---* treating the returned/received node point as anchor relative.<br>
---* param nodePoint A given coordinate.<br>
---* return A point in world space coordinates, anchor relative.
---@param nodePoint vec2_table@ #vec2_table nodePoint
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:convertToWorldSpaceAR(nodePoint) end
---* Gets whether the anchor point will be (0,0) when you position this node.<br>
---* see `setIgnoreAnchorPointForPosition(bool)`<br>
---* return true if the anchor point will be (0,0) when you position this node.
---@return boolean@ bool#bool ret (return value: bool)
function Node:isIgnoreAnchorPointForPosition() end
---* Gets a child from the container with its name.<br>
---* param name   An identifier to find the child node.<br>
---* return a Node object whose name equals to the input parameter.<br>
---* since v3.2
---@param name string@ #string name
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Node:getChildByName(name) end
---* Update the displayed opacity of node with it's parent opacity;<br>
---* param parentOpacity The opacity of parent node.
---@param parentOpacity unsigned_char@ #unsigned char parentOpacity
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:updateDisplayedOpacity(parentOpacity) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Node:init() end
---* get & set camera mask, the node is visible by the camera whose camera flag & node's camera mask is true
---@return unsigned short@ unsigned short#unsigned short ret (return value: unsigned short)
function Node:getCameraMask() end
---* Sets the rotation (angle) of the node in degrees.<br>
---* 0 is the default rotation angle.<br>
---* Positive values rotate node clockwise, and negative values for anti-clockwise.<br>
---* param rotation     The rotation of the node in degrees.
---@param rotation float@ #float rotation
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setRotation(rotation) end
---* Changes the scale factor on Z axis of this node<br>
---* The Default value is 1.0 if you haven't changed it before.<br>
---* param scaleZ   The scale factor on Z axis.<br>
---* warning The physics body doesn't support this.
---@param scaleZ float@ #float scaleZ
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setScaleZ(scaleZ) end
---* Sets the scale (y) of the node.<br>
---* It is a scaling factor that multiplies the height of the node and its children.<br>
---* param scaleY   The scale factor on Y axis.<br>
---* warning The physics body doesn't support this.
---@param scaleY float@ #float scaleY
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setScaleY(scaleY) end
---* Sets the scale (x) of the node.<br>
---* It is a scaling factor that multiplies the width of the node and its children.<br>
---* param scaleX   The scale factor on X axis.<br>
---* warning The physics body doesn't support this.
---@param scaleX float@ #float scaleX
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setScaleX(scaleX) end
---* Sets the X rotation (angle) of the node in degrees which performs a horizontal rotational skew.<br>
---* The difference between `setRotationalSkew()` and `setSkew()` is that the first one simulate Flash's skew functionality,<br>
---* while the second one uses the real skew function.<br>
---* 0 is the default rotation angle.<br>
---* Positive values rotate node clockwise, and negative values for anti-clockwise.<br>
---* param rotationX    The X rotation in degrees which performs a horizontal rotational skew.<br>
---* warning The physics body doesn't support this.<br>
---* js setRotationX
---@param rotationX float@ #float rotationX
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setRotationSkewX(rotationX) end
---* Set the callback of event EnterTransitionDidFinish.<br>
---* param callback A std::function<void()> callback.
---@param callback function@ #function callback
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setonEnterTransitionDidFinishCallback(callback) end
---* Removes all components
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:removeAllComponents() end
---* 
---@param z int@ #int z
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:_setLocalZOrder(z) end
---* Modify the camera mask for current node.<br>
---* If applyChildren is true, then it will modify the camera mask of its children recursively.<br>
---* param mask A unsigned short bit for mask.<br>
---* param applyChildren A boolean value to determine whether the mask bit should apply to its children or not.
---@param mask unsigned short@ #unsigned short mask
---@param applyChildren boolean@ #bool applyChildren
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setCameraMask(mask,applyChildren) end
---* Returns a tag that is used to identify the node easily.<br>
---* return An integer that identifies the node.<br>
---* Please use `getTag()` instead.
---@return int@ int#int ret (return value: int)
function Node:getTag() end
---* / @{/ @name GLProgram<br>
---* Return the GLProgram (shader) currently used for this node.<br>
---* return The GLProgram (shader) currently used for this node.
---@return cc.GLProgram@ GLProgram#GLProgram ret (return value: cc.GLProgram)
function Node:getGLProgram() end
---* Returns the world affine transform matrix. The matrix is in Pixels.<br>
---* return transformation matrix, in pixels.
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Node:getNodeToWorldTransform() end
---* Returns the position (X,Y,Z) in its parent's coordinate system.<br>
---* return The position (X, Y, and Z) in its parent's coordinate system.<br>
---* js NA
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Node:getPosition3D() end
---* Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.<br>
---* param child     The child node which will be removed.<br>
---* param cleanup   True if all running actions and callbacks on the child node will be cleanup, false otherwise.
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:removeChild(child,cleanup) end
---* Converts a Vec2 to world space coordinates. The result is in Points.<br>
---* param nodePoint A given coordinate.<br>
---* return A point in world space coordinates.
---@param nodePoint vec2_table@ #vec2_table nodePoint
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:convertToWorldSpace(nodePoint) end
---*  Returns the Scene that contains the Node.<br>
---* It returns `nullptr` if the node doesn't belong to any Scene.<br>
---* This function recursively calls parent->getScene() until parent is a Scene object. The results are not cached. It is that the user caches the results in case this functions is being used inside a loop.<br>
---* return The Scene that contains the node.
---@return cc.Scene@ Scene#Scene ret (return value: cc.Scene)
function Node:getScene() end
---*  Get the event dispatcher of scene.<br>
---* return The event dispatcher of scene.
---@return cc.EventDispatcher@ EventDispatcher#EventDispatcher ret (return value: cc.EventDispatcher)
function Node:getEventDispatcher() end
---* Changes the X skew angle of the node in degrees.<br>
---* The difference between `setRotationalSkew()` and `setSkew()` is that the first one simulate Flash's skew functionality<br>
---* while the second one uses the real skew function.<br>
---* This angle describes the shear distortion in the X direction.<br>
---* Thus, it is the angle between the Y coordinate and the left edge of the shape<br>
---* The default skewX angle is 0. Positive values distort the node in a CW direction.<br>
---* param skewX The X skew angle of the node in degrees.<br>
---* warning The physics body doesn't support this.
---@param skewX float@ #float skewX
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setSkewX(skewX) end
---* Set the GLProgramState for this node.<br>
---* param glProgramState The GLProgramState for this node.
---@param glProgramState cc.GLProgramState@ #cc.GLProgramState glProgramState
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setGLProgramState(glProgramState) end
---* Set the callback of event onEnter.<br>
---* param callback A std::function<void()> callback.
---@param callback function@ #function callback
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setOnEnterCallback(callback) end
---* Removes all actions from the running action list by its flags.<br>
---* param flags   A flag field that removes actions based on bitwise AND.
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:stopActionsByFlags(flags) end
---* 
---@param position vec2_table@ #vec2_table position
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setNormalizedPosition(position) end
---* Set the callback of event ExitTransitionDidStart.<br>
---* param callback A std::function<void()> callback.
---@param callback function@ #function callback
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setonExitTransitionDidStartCallback(callback) end
---* convenience methods which take a Touch instead of Vec2.<br>
---* param touch A given touch.<br>
---* return A point in world space coordinates.
---@param touch cc.Touch@ #cc.Touch touch
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:convertTouchToNodeSpace(touch) end
---@param cleanup boolean@ #bool cleanup
---@return cc.Node@ Node#Node self (return value: cc.Node)
---@overload fun(cleanup:boolean):cc.Node
---@overload fun():cc.Node
function Node:removeAllChildrenWithCleanup(cleanup) end
---@param ancestor cc.Node@ #cc.Node ancestor
---@return cc.AffineTransform@ AffineTransform#AffineTransform ret (return value: cc.AffineTransform)
---@overload fun(ancestor:cc.Node):cc.AffineTransform
---@overload fun():cc.AffineTransform
function Node:getNodeToParentAffineTransform(ancestor) end
---* Whether cascadeOpacity is enabled or not.<br>
---* return A boolean value.
---@return boolean@ bool#bool ret (return value: bool)
function Node:isCascadeOpacityEnabled() end
---* Sets the parent node.<br>
---* param parent    A pointer to the parent node.
---@param parent cc.Node@ #cc.Node parent
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setParent(parent) end
---*  Returns a string that is used to identify the node.<br>
---* return A string that identifies the node.<br>
---* since v3.2
---@return string@ string#string ret (return value: string)
function Node:getName() end
---* Resumes all scheduled selectors, actions and event listeners.<br>
---* This method is called internally by onEnter.
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:resume() end
---* Returns the rotation (X,Y,Z) in degrees.<br>
---* return The rotation of the node in 3d.<br>
---* js NA
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Node:getRotation3D() end
---@param ancestor cc.Node@ #cc.Node ancestor
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
---@overload fun(ancestor:cc.Node):mat4_table
---@overload fun():mat4_table
function Node:getNodeToParentTransform(ancestor) end
---* converts a Touch (world coordinates) into a local coordinate. This method is AR (Anchor Relative).<br>
---* param touch A given touch.<br>
---* return A point in world space coordinates, anchor relative.
---@param touch cc.Touch@ #cc.Touch touch
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:convertTouchToNodeSpaceAR(touch) end
---* Converts a Vec2 to node (local) space coordinates. The result is in Points.<br>
---* param worldPoint A given coordinate.<br>
---* return A point in node (local) space coordinates.
---@param worldPoint vec2_table@ #vec2_table worldPoint
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:convertToNodeSpace(worldPoint) end
---*  Sets the position (x,y) using values between 0 and 1.<br>
---* The positions in pixels is calculated like the following:<br>
---* code pseudo code<br>
---* void setNormalizedPosition(Vec2 pos) {<br>
---* Size s = getParent()->getContentSize();<br>
---* _position = pos * s;<br>
---* }<br>
---* endcode<br>
---* param position The normalized position (x,y) of the node, using value between 0 and 1.
---@param position vec2_table@ #vec2_table position
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setPositionNormalized(position) end
---* Pauses all scheduled selectors, actions and event listeners.<br>
---* This method is called internally by onExit.
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:pause() end
---* If node opacity will modify the RGB color value, then you should override this method and return true.<br>
---* return A boolean value, true indicates that opacity will modify color; false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Node:isOpacityModifyRGB() end
---@param x float@ #float x
---@param y float@ #float y
---@return cc.Node@ Node#Node self (return value: cc.Node)
---@overload fun(x:float,y:float):cc.Node
---@overload fun(unkown0:vec2_table):cc.Node
function Node:setPosition(x,y) end
---* Removes an action from the running action list by its tag.<br>
---* param tag   A tag that indicates the action to be removed.
---@param tag int@ #int tag
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:stopActionByTag(tag) end
---* Reorders a child according to a new z value.<br>
---* param child     An already added child node. It MUST be already added.<br>
---* param localZOrder Z order for drawing priority. Please refer to setLocalZOrder(int).
---@param child cc.Node@ #cc.Node child
---@param localZOrder int@ #int localZOrder
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:reorderChild(child,localZOrder) end
---* Changes the Y skew angle of the node in degrees.<br>
---* The difference between `setRotationalSkew()` and `setSkew()` is that the first one simulate Flash's skew functionality<br>
---* while the second one uses the real skew function.<br>
---* This angle describes the shear distortion in the Y direction.<br>
---* Thus, it is the angle between the X coordinate and the bottom edge of the shape.<br>
---* The default skewY angle is 0. Positive values distort the node in a CCW direction.<br>
---* param skewY    The Y skew angle of the node in degrees.<br>
---* warning The physics body doesn't support this.
---@param skewY float@ #float skewY
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setSkewY(skewY) end
---* Sets the 'z' coordinate in the position. It is the OpenGL Z vertex value.<br>
---* The OpenGL depth buffer and depth testing are disabled by default. You need to turn them on.<br>
---* In order to use this property correctly.<br>
---* `setPositionZ()` also sets the `setGlobalZValue()` with the positionZ as value.<br>
---* see `setGlobalZValue()`<br>
---* param positionZ  OpenGL Z vertex of this node.<br>
---* js setVertexZ
---@param positionZ float@ #float positionZ
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setPositionZ(positionZ) end
---* Sets the rotation (X,Y,Z) in degrees.<br>
---* Useful for 3d rotations.<br>
---* warning The physics body doesn't support this.<br>
---* param rotation The rotation of the node in 3d.<br>
---* js NA
---@param rotation vec3_table@ #vec3_table rotation
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setRotation3D(rotation) end
---* Gets/Sets x or y coordinate individually for position.<br>
---* These methods are used in Lua and Javascript Bindings<br>
---* Sets the x coordinate of the node in its parent's coordinate system.<br>
---* param x The x coordinate of the node.
---@param x float@ #float x
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setPositionX(x) end
---* Sets the transformation matrix manually.<br>
---* param transform A given transformation matrix.
---@param transform mat4_table@ #mat4_table transform
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setNodeToParentTransform(transform) end
---* Returns the anchor point in percent.<br>
---* see `setAnchorPoint(const Vec2&)`<br>
---* return The anchor point of node.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:getAnchorPoint() end
---* Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays).<br>
---* Composable actions are counted as 1 action. Example:<br>
---* If you are running 1 Sequence of 7 actions, it will return 1.<br>
---* If you are running 7 Sequences of 2 actions, it will return 7.<br>
---* return The number of actions that are running plus the ones that are schedule to run.
---@return int@ int#int ret (return value: int)
function Node:getNumberOfRunningActions() end
---* Calls children's updateTransform() method recursively.<br>
---* This method is moved from Sprite, so it's no longer specific to Sprite.<br>
---* As the result, you apply SpriteBatchNode's optimization on your customed Node.<br>
---* e.g., `batchNode->addChild(myCustomNode)`, while you can only addChild(sprite) before.
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:updateTransform() end
---* Sets the shader program for this node<br>
---* Since v2.0, each rendering node must set its shader program.<br>
---* It should be set in initialize phase.<br>
---* code<br>
---* node->setGLProgram(GLProgramCache::getInstance()->getProgram(GLProgram::SHADER_NAME_POSITION_TEXTURE_COLOR));<br>
---* endcode<br>
---* param glprogram The shader program.
---@param glprogram cc.GLProgram@ #cc.GLProgram glprogram
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setGLProgram(glprogram) end
---* Determines if the node is visible.<br>
---* see `setVisible(bool)`<br>
---* return true if the node is visible, false if the node is hidden.
---@return boolean@ bool#bool ret (return value: bool)
function Node:isVisible() end
---* Returns the amount of children.<br>
---* return The amount of children.
---@return int@ int#int ret (return value: int)
function Node:getChildrenCount() end
---* Converts a Vec2 to node (local) space coordinates. The result is in Points.<br>
---* treating the returned/received node point as anchor relative.<br>
---* param worldPoint A given coordinate.<br>
---* return A point in node (local) space coordinates, anchor relative.
---@param worldPoint vec2_table@ #vec2_table worldPoint
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:convertToNodeSpaceAR(worldPoint) end
---* Adds a component.<br>
---* param component A given component.<br>
---* return True if added success.
---@param component cc.Component@ #cc.Component component
---@return boolean@ bool#bool ret (return value: bool)
function Node:addComponent(component) end
---* Executes an action, and returns the action that is executed.<br>
---* This node becomes the action's target. Refer to Action::getTarget().<br>
---* warning Actions don't retain their target.<br>
---* param action An Action pointer.
---@param action cc.Action@ #cc.Action action
---@return cc.Action@ Action#Action ret (return value: cc.Action)
function Node:runAction(action) end
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.Node@ Node#Node self (return value: cc.Node)
---@overload fun():cc.Node
---@overload fun(renderer:cc.Renderer,parentTransform:mat4_table,parentFlags:unsigned_int):cc.Node
function Node:visit(renderer,parentTransform,parentFlags) end
---* Returns the rotation of the node in degrees.<br>
---* see `setRotation(float)`<br>
---* return The rotation of the node in degrees.
---@return float@ float#float ret (return value: float)
function Node:getRotation() end
---* 
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function Node:getPhysicsBody() end
---* Returns the anchorPoint in absolute pixels.<br>
---* warning You can only read it. If you wish to modify it, use anchorPoint instead.<br>
---* see `getAnchorPoint()`<br>
---* return The anchor point in absolute pixels.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:getAnchorPointInPoints() end
---* Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter.<br>
---* param name       A string that identifies a child node.<br>
---* param cleanup   True if all running actions and callbacks on the child node will be cleanup, false otherwise.
---@param name string@ #string name
---@param cleanup boolean@ #bool cleanup
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:removeChildByName(name,cleanup) end
---* Return the GLProgramState currently used for this node.<br>
---* return The GLProgramState currently used for this node.
---@return cc.GLProgramState@ GLProgramState#GLProgramState ret (return value: cc.GLProgramState)
function Node:getGLProgramState() end
---* Sets a Scheduler object that is used to schedule all "updates" and timers.<br>
---* warning If you set a new Scheduler, then previously created timers/update are going to be removed.<br>
---* param scheduler     A Scheduler object that is used to schedule all "update" and timers.
---@param scheduler cc.Scheduler@ #cc.Scheduler scheduler
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setScheduler(scheduler) end
---* Stops and removes all actions from the running action list .
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:stopAllActions() end
---* Returns the X skew angle of the node in degrees.<br>
---* see `setSkewX(float)`<br>
---* return The X skew angle of the node in degrees.
---@return float@ float#float ret (return value: float)
function Node:getSkewX() end
---* Returns the Y skew angle of the node in degrees.<br>
---* see `setSkewY(float)`<br>
---* return The Y skew angle of the node in degrees.
---@return float@ float#float ret (return value: float)
function Node:getSkewY() end
---* Query node's displayed color.<br>
---* return A Color3B color value.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function Node:getDisplayedColor() end
---* Gets an action from the running action list by its tag.<br>
---* see `setTag(int)`, `getTag()`.<br>
---* return The action object with the given tag.
---@param tag int@ #int tag
---@return cc.Action@ Action#Action ret (return value: cc.Action)
function Node:getActionByTag(tag) end
---*  Changes the name that is used to identify the node easily.<br>
---* param name A string that identifies the node.<br>
---* since v3.2
---@param name string@ #string name
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setName(name) end
---* Update method will be called automatically every frame if "scheduleUpdate" is called, and the node is "live".<br>
---* param delta In seconds.
---@param delta float@ #float delta
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:update(delta) end
---* Return the node's display opacity.<br>
---* The difference between opacity and displayedOpacity is:<br>
---* The displayedOpacity is what's the final rendering opacity of node.<br>
---* return A GLubyte value.
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function Node:getDisplayedOpacity() end
---* Gets the local Z order of this node.<br>
---* see `setLocalZOrder(int)`<br>
---* return The local (relative to its siblings) Z order.
---@return int@ int#int ret (return value: int)
function Node:getLocalZOrder() end
---@return cc.Scheduler@ Scheduler#Scheduler ret (return value: cc.Scheduler)
---@overload fun():cc.Scheduler
---@overload fun():cc.Scheduler
function Node:getScheduler() end
---* 
---@return cc.AffineTransform@ AffineTransform#AffineTransform ret (return value: cc.AffineTransform)
function Node:getParentToNodeAffineTransform() end
---*  Returns the normalized position.<br>
---* return The normalized position.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:getPositionNormalized() end
---* Change the color of node.<br>
---* param color A Color3B color value.
---@param color color3b_table@ #color3b_table color
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setColor(color) end
---* Returns whether or not the node is "running".<br>
---* If the node is running it will accept event callbacks like onEnter(), onExit(), update().<br>
---* return Whether or not the node is running.
---@return boolean@ bool#bool ret (return value: bool)
function Node:isRunning() end
---@return cc.Node@ Node#Node ret (return value: cc.Node)
---@overload fun():cc.Node
---@overload fun():cc.Node
function Node:getParent() end
---* Gets position Z coordinate of this node.<br>
---* see setPositionZ(float)<br>
---* return The position Z coordinate of this node.<br>
---* js getVertexZ
---@return float@ float#float ret (return value: float)
function Node:getPositionZ() end
---*  Gets the y coordinate of the node in its parent's coordinate system.<br>
---* return The y coordinate of the node.
---@return float@ float#float ret (return value: float)
function Node:getPositionY() end
---*  Gets the x coordinate of the node in its parent's coordinate system.<br>
---* return The x coordinate of the node.
---@return float@ float#float ret (return value: float)
function Node:getPositionX() end
---* Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter.<br>
---* param tag       An integer number that identifies a child node.<br>
---* param cleanup   True if all running actions and callbacks on the child node will be cleanup, false otherwise.<br>
---* Please use `removeChildByName` instead.
---@param tag int@ #int tag
---@param cleanup boolean@ #bool cleanup
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:removeChildByTag(tag,cleanup) end
---*  Sets the y coordinate of the node in its parent's coordinate system.<br>
---* param y The y coordinate of the node.
---@param y float@ #float y
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setPositionY(y) end
---* 
---@return cc.AffineTransform@ AffineTransform#AffineTransform ret (return value: cc.AffineTransform)
function Node:getNodeToWorldAffineTransform() end
---* Update node's displayed color with its parent color.<br>
---* param parentColor A Color3B color value.
---@param parentColor color3b_table@ #color3b_table parentColor
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:updateDisplayedColor(parentColor) end
---* Sets whether the node is visible.<br>
---* The default value is true, a node is default to visible.<br>
---* param visible   true if the node is visible, false if the node is hidden.
---@param visible boolean@ #bool visible
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setVisible(visible) end
---* Returns the matrix that transform parent's space coordinates to the node's (local) space coordinates.<br>
---* The matrix is in Pixels.<br>
---* return The transformation matrix.
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Node:getParentToNodeTransform() end
---* Checks whether a lambda function is scheduled.<br>
---* param key      key of the callback<br>
---* return Whether the lambda function selector is scheduled.<br>
---* js NA<br>
---* lua NA
---@param key string@ #string key
---@return boolean@ bool#bool ret (return value: bool)
function Node:isScheduled(key) end
---* Defines the order in which the nodes are renderer.<br>
---* Nodes that have a Global Z Order lower, are renderer first.<br>
---* In case two or more nodes have the same Global Z Order, the order is not guaranteed.<br>
---* The only exception if the Nodes have a Global Z Order == 0. In that case, the Scene Graph order is used.<br>
---* By default, all nodes have a Global Z Order = 0. That means that by default, the Scene Graph order is used to render the nodes.<br>
---* Global Z Order is useful when you need to render nodes in an order different than the Scene Graph order.<br>
---* Limitations: Global Z Order can't be used by Nodes that have SpriteBatchNode as one of their ancestors.<br>
---* And if ClippingNode is one of the ancestors, then "global Z order" will be relative to the ClippingNode.<br>
---* see `setLocalZOrder()`<br>
---* see `setVertexZ()`<br>
---* since v3.0<br>
---* param globalZOrder The global Z order value.
---@param globalZOrder float@ #float globalZOrder
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setGlobalZOrder(globalZOrder) end
---@param scaleX float@ #float scaleX
---@param scaleY float@ #float scaleY
---@return cc.Node@ Node#Node self (return value: cc.Node)
---@overload fun(scaleX:float,scaleY:float):cc.Node
---@overload fun(scaleX:float):cc.Node
function Node:setScale(scaleX,scaleY) end
---* Gets a child from the container with its tag.<br>
---* param tag   An identifier to find the child node.<br>
---* return a Node object whose tag equals to the input parameter.<br>
---* Please use `getChildByName()` instead.
---@param tag int@ #int tag
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Node:getChildByTag(tag) end
---* Returns the scale factor on Z axis of this node<br>
---* see `setScaleZ(float)`<br>
---* return The scale factor on Z axis.
---@return float@ float#float ret (return value: float)
function Node:getScaleZ() end
---* Returns the scale factor on Y axis of this node<br>
---* see `setScaleY(float)`<br>
---* return The scale factor on Y axis.
---@return float@ float#float ret (return value: float)
function Node:getScaleY() end
---* Returns the scale factor on X axis of this node<br>
---* see setScaleX(float)<br>
---* return The scale factor on X axis.
---@return float@ float#float ret (return value: float)
function Node:getScaleX() end
---* LocalZOrder is the 'key' used to sort the node relative to its siblings.<br>
---* The Node's parent will sort all its children based on the LocalZOrder value.<br>
---* If two nodes have the same LocalZOrder, then the node that was added first to the children's array will be in front of the other node in the array.<br>
---* Also, the Scene Graph is traversed using the "In-Order" tree traversal algorithm ( http:en.wikipedia.org/wiki/Tree_traversal#In-order )<br>
---* And Nodes that have LocalZOrder values < 0 are the "left" subtree<br>
---* While Nodes with LocalZOrder >=0 are the "right" subtree.<br>
---* see `setGlobalZOrder`<br>
---* see `setVertexZ`<br>
---* param localZOrder The local Z order value.
---@param localZOrder int@ #int localZOrder
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setLocalZOrder(localZOrder) end
---* 
---@return cc.AffineTransform@ AffineTransform#AffineTransform ret (return value: cc.AffineTransform)
function Node:getWorldToNodeAffineTransform() end
---* If you want node's color affect the children node's color, then set it to true.<br>
---* Otherwise, set it to false.<br>
---* param cascadeColorEnabled A boolean value.
---@param cascadeColorEnabled boolean@ #bool cascadeColorEnabled
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setCascadeColorEnabled(cascadeColorEnabled) end
---* Change node opacity.<br>
---* param opacity A GLubyte opacity value.
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setOpacity(opacity) end
---* Stops all running actions and schedulers
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:cleanup() end
---* / @{/ @name component functions<br>
---* Gets a component by its name.<br>
---* param name A given name of component.<br>
---* return The Component by name.
---@param name string@ #string name
---@return cc.Component@ Component#Component ret (return value: cc.Component)
function Node:getComponent(name) end
---* Returns the untransformed size of the node.<br>
---* see `setContentSize(const Size&)`<br>
---* return The untransformed size of the node.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Node:getContentSize() end
---* Removes all actions from the running action list by its tag.<br>
---* param tag   A tag that indicates the action to be removed.
---@param tag int@ #int tag
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:stopAllActionsByTag(tag) end
---* Query node's color value.<br>
---* return A Color3B color value.
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function Node:getColor() end
---* Returns an AABB (axis-aligned bounding-box) in its parent's coordinate system.<br>
---* return An AABB (axis-aligned bounding-box) in its parent's coordinate system
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Node:getBoundingBox() end
---* Sets whether the anchor point will be (0,0) when you position this node.<br>
---* This is an internal method, only used by Layer and Scene. Don't call it outside framework.<br>
---* The default value is false, while in Layer and Scene are true.<br>
---* param ignore    true if anchor point will be (0,0) when you position this node.
---@param ignore boolean@ #bool ignore
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setIgnoreAnchorPointForPosition(ignore) end
---*  Set event dispatcher for scene.<br>
---* param dispatcher The event dispatcher of scene.
---@param dispatcher cc.EventDispatcher@ #cc.EventDispatcher dispatcher
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setEventDispatcher(dispatcher) end
---* Returns the Node's Global Z Order.<br>
---* see `setGlobalZOrder(int)`<br>
---* return The node's global Z order
---@return float@ float#float ret (return value: float)
function Node:getGlobalZOrder() end
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Node@ Node#Node self (return value: cc.Node)
---@overload fun():cc.Node
---@overload fun(renderer:cc.Renderer,transform:mat4_table,flags:unsigned_int):cc.Node
function Node:draw(renderer,transform,flags) end
---* Returns a user assigned Object.<br>
---* Similar to UserData, but instead of holding a void* it holds an object.<br>
---* The UserObject will be retained once in this method,<br>
---* and the previous UserObject (if existed) will be released.<br>
---* The UserObject will be released in Node's destructor.<br>
---* param userObject    A user assigned Object.
---@param userObject cc.Ref@ #cc.Ref userObject
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setUserObject(userObject) end
---@param cleanup boolean@ #bool cleanup
---@return cc.Node@ Node#Node self (return value: cc.Node)
---@overload fun(cleanup:boolean):cc.Node
---@overload fun():cc.Node
function Node:removeFromParentAndCleanup(cleanup) end
---* Sets the position (X, Y, and Z) in its parent's coordinate system.<br>
---* param position The position (X, Y, and Z) in its parent's coordinate system.<br>
---* js NA
---@param position vec3_table@ #vec3_table position
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setPosition3D(position) end
---* Returns the numbers of actions that are running plus the ones that are<br>
---* schedule to run (actions in actionsToAdd and actions arrays) with a<br>
---* specific tag.<br>
---* Composable actions are counted as 1 action. Example:<br>
---* If you are running 1 Sequence of 7 actions, it will return 1.<br>
---* If you are running 7 Sequences of 2 actions, it will return 7.<br>
---* param  tag The tag that will be searched.<br>
---* return The number of actions that are running plus the<br>
---* ones that are schedule to run with specific tag.
---@param tag int@ #int tag
---@return int@ int#int ret (return value: int)
function Node:getNumberOfRunningActionsByTag(tag) end
---* Sorts the children array once before drawing, instead of every time when a child is added or reordered.<br>
---* This approach can improve the performance massively.<br>
---* note Don't call this manually unless a child added needs to be removed in the same frame.
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:sortAllChildren() end
---* Returns the inverse world affine transform matrix. The matrix is in Pixels.<br>
---* return The transformation matrix.
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Node:getWorldToNodeTransform() end
---* Gets the scale factor of the node,  when X and Y have the same scale factor.<br>
---* warning Assert when `_scaleX != _scaleY`<br>
---* see setScale(float)<br>
---* return The scale factor of the node.
---@return float@ float#float ret (return value: float)
function Node:getScale() end
---* Return the node's opacity.<br>
---* return A GLubyte value.
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function Node:getOpacity() end
---*  !!! ONLY FOR INTERNAL USE<br>
---* Sets the arrival order when this node has a same ZOrder with other children.<br>
---* A node which called addChild subsequently will take a larger arrival order,<br>
---* If two children have the same Z order, the child with larger arrival order will be drawn later.<br>
---* warning This method is used internally for localZOrder sorting, don't change this manually<br>
---* param orderOfArrival   The arrival order.
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:updateOrderOfArrival() end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Node:getNormalizedPosition() end
---* Gets the X rotation (angle) of the node in degrees which performs a horizontal rotation skew.<br>
---* see `setRotationSkewX(float)`<br>
---* return The X rotation in degrees.<br>
---* js getRotationX 
---@return float@ float#float ret (return value: float)
function Node:getRotationSkewX() end
---* Gets the Y rotation (angle) of the node in degrees which performs a vertical rotational skew.<br>
---* see `setRotationSkewY(float)`<br>
---* return The Y rotation in degrees.<br>
---* js getRotationY
---@return float@ float#float ret (return value: float)
function Node:getRotationSkewY() end
---* Changes the tag that is used to identify the node easily.<br>
---* Please refer to getTag for the sample code.<br>
---* param tag   A integer that identifies the node.<br>
---* Please use `setName()` instead.
---@param tag int@ #int tag
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:setTag(tag) end
---* Query whether cascadeColor is enabled or not.<br>
---* return Whether cascadeColor is enabled or not.
---@return boolean@ bool#bool ret (return value: bool)
function Node:isCascadeColorEnabled() end
---* Stops and removes an action from the running action list.<br>
---* param action    The action object to be removed.
---@param action cc.Action@ #cc.Action action
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:stopAction(action) end
---@return cc.ActionManager@ ActionManager#ActionManager ret (return value: cc.ActionManager)
---@overload fun():cc.ActionManager
---@overload fun():cc.ActionManager
function Node:getActionManager() end
---* Allocates and initializes a node.<br>
---* return A initialized node which is marked as "autorelease".
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Node:create() end
---* Gets count of nodes those are attached to scene graph.
---@return int@ int#int ret (return value: int)
function Node:getAttachedNodeCount() end
---* 
---@return cc.Node@ Node#Node self (return value: cc.Node)
function Node:Node() end


---@class cc.NodeGrid :  Node
local NodeGrid={ }
---@class NodeGrid : cc.NodeGrid
cc.NodeGrid=NodeGrid


---* brief Set the effect grid rect.<br>
---* param gridRect The effect grid rect.
---@param gridRect rect_table@ #rect_table gridRect
---@return cc.NodeGrid@ NodeGrid#NodeGrid self (return value: cc.NodeGrid)
function NodeGrid:setGridRect(gridRect) end
---*  Set the Grid Target. <br>
---* param target A Node is used to set the Grid Target.
---@param target cc.Node@ #cc.Node target
---@return cc.NodeGrid@ NodeGrid#NodeGrid self (return value: cc.NodeGrid)
function NodeGrid:setTarget(target) end
---* Changes a grid object that is used when applying effects.<br>
---* param grid  A Grid object that is used when applying effects.
---@param grid cc.GridBase@ #cc.GridBase grid
---@return cc.NodeGrid@ NodeGrid#NodeGrid self (return value: cc.NodeGrid)
function NodeGrid:setGrid(grid) end
---@return cc.GridBase@ GridBase#GridBase ret (return value: cc.GridBase)
---@overload fun():cc.GridBase
---@overload fun():cc.GridBase
function NodeGrid:getGrid() end
---* brief Get the effect grid rect.<br>
---* return Return the effect grid rect.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function NodeGrid:getGridRect() end
---@param rect rect_table@ #rect_table rect
---@return cc.NodeGrid@ NodeGrid#NodeGrid ret (return value: cc.NodeGrid)
---@overload fun(rect:rect_table):cc.NodeGrid
---@overload fun():cc.NodeGrid
function NodeGrid:create(rect) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.NodeGrid@ NodeGrid#NodeGrid self (return value: cc.NodeGrid)
function NodeGrid:visit(renderer,parentTransform,parentFlags) end
---* 
---@return cc.NodeGrid@ NodeGrid#NodeGrid self (return value: cc.NodeGrid)
function NodeGrid:NodeGrid() end


---@class cc.OrbitCamera :  ActionCamera
local OrbitCamera={ }
---@class OrbitCamera : cc.OrbitCamera
cc.OrbitCamera=OrbitCamera


---*  Initializes a OrbitCamera action with radius, delta-radius,  z, deltaZ, x, deltaX. 
---@param t float@ #float t
---@param radius float@ #float radius
---@param deltaRadius float@ #float deltaRadius
---@param angleZ float@ #float angleZ
---@param deltaAngleZ float@ #float deltaAngleZ
---@param angleX float@ #float angleX
---@param deltaAngleX float@ #float deltaAngleX
---@return boolean@ bool#bool ret (return value: bool)
function OrbitCamera:initWithDuration(t,radius,deltaRadius,angleZ,deltaAngleZ,angleX,deltaAngleX) end
---*  Creates a OrbitCamera action with radius, delta-radius,  z, deltaZ, x, deltaX. <br>
---* param t Duration in seconds.<br>
---* param radius The start radius.<br>
---* param deltaRadius The delta radius.<br>
---* param angleZ The start angle in Z.<br>
---* param deltaAngleZ The delta angle in Z.<br>
---* param angleX The start angle in X.<br>
---* param deltaAngleX The delta angle in X.<br>
---* return An OrbitCamera.
---@param t float@ #float t
---@param radius float@ #float radius
---@param deltaRadius float@ #float deltaRadius
---@param angleZ float@ #float angleZ
---@param deltaAngleZ float@ #float deltaAngleZ
---@param angleX float@ #float angleX
---@param deltaAngleX float@ #float deltaAngleX
---@return cc.OrbitCamera@ OrbitCamera#OrbitCamera ret (return value: cc.OrbitCamera)
function OrbitCamera:create(t,radius,deltaRadius,angleZ,deltaAngleZ,angleX,deltaAngleX) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.OrbitCamera@ OrbitCamera#OrbitCamera self (return value: cc.OrbitCamera)
function OrbitCamera:startWithTarget(target) end
---* 
---@return cc.OrbitCamera@ OrbitCamera#OrbitCamera ret (return value: cc.OrbitCamera)
function OrbitCamera:clone() end
---* 
---@param time float@ #float time
---@return cc.OrbitCamera@ OrbitCamera#OrbitCamera self (return value: cc.OrbitCamera)
function OrbitCamera:update(time) end
---* js ctor
---@return cc.OrbitCamera@ OrbitCamera#OrbitCamera self (return value: cc.OrbitCamera)
function OrbitCamera:OrbitCamera() end


---@class cc.PageTurn3D :  Grid3DAction
local PageTurn3D={ }
---@class PageTurn3D : cc.PageTurn3D
cc.PageTurn3D=PageTurn3D


---* brief Create an action with duration, grid size.<br>
---* param duration Specify the duration of the PageTurn3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* return If the creation success, return a pointer of PageTurn3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@return cc.PageTurn3D@ PageTurn3D#PageTurn3D ret (return value: cc.PageTurn3D)
function PageTurn3D:create(duration,gridSize) end
---* 
---@return cc.PageTurn3D@ PageTurn3D#PageTurn3D ret (return value: cc.PageTurn3D)
function PageTurn3D:clone() end
---* js NA 
---@return cc.GridBase@ GridBase#GridBase ret (return value: cc.GridBase)
function PageTurn3D:getGrid() end
---* 
---@param time float@ #float time
---@return cc.PageTurn3D@ PageTurn3D#PageTurn3D self (return value: cc.PageTurn3D)
function PageTurn3D:update(time) end


---@class ccui.PageView :  ListView
local PageView={ }
---@class PageView : ccui.PageView
ccui.PageView=PageView


---* brief Set space between page indicator's index nodes.<br>
---* param spaceBetweenIndexNodes Space between nodes in pixel.
---@param spaceBetweenIndexNodes float@ #float spaceBetweenIndexNodes
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorSpaceBetweenIndexNodes(spaceBetweenIndexNodes) end
---* Insert a page into PageView at a given index.<br>
---* param page  Page to be inserted.<br>
---* param idx   A given index.
---@param page ccui.Widget@ #ccui.Widget page
---@param idx int@ #int idx
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:insertPage(page,idx) end
---* brief Set opacity of page indicator's index nodes.<br>
---* param opacity New indicator node opacity.
---@param opacity unsigned_char@ #unsigned char opacity
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorIndexNodesOpacity(opacity) end
---* brief Set opacity of page indicator's selected index.<br>
---* param color New opacity for selected (current) index.
---@param opacity unsigned_char@ #unsigned char opacity
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorSelectedIndexOpacity(opacity) end
---* brief Remove all pages of the PageView.
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:removeAllPages() end
---* 
---@param epsilon float@ #float epsilon
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setAutoScrollStopEpsilon(epsilon) end
---* brief Set scale of page indicator's index nodes.<br>
---* param indexNodesScale Scale of index nodes.
---@param indexNodesScale float@ #float indexNodesScale
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorIndexNodesScale(indexNodesScale) end
---* brief Toggle page indicator enabled.<br>
---* param enabled True if enable page indicator, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorEnabled(enabled) end
---* brief Set color of page indicator's selected index.<br>
---* param color New color for selected (current) index.
---@param color color3b_table@ #color3b_table color
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorSelectedIndexColor(color) end
---* brief Add a page turn callback to PageView, then when one page is turning, the callback will be called.<br>
---* param callback A page turning callback.
---@param callback function@ #function callback
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:addEventListener(callback) end
---* brief Get the page indicator's position.<br>
---* return positionAsAnchorPoint
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PageView:getIndicatorPosition() end
---* Jump to a page with a given index without scrolling.<br>
---* This is the different between scrollToPage.<br>
---* param index A given index in PageView. Index start from 0 to pageCount -1.
---@param index int@ #int index
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setCurrentPageIndex(index) end
---* brief Get the color of page indicator's index nodes.<br>
---* return color
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function PageView:getIndicatorIndexNodesColor() end
---* brief Get the color of page indicator's selected index.<br>
---* return color
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function PageView:getIndicatorSelectedIndexColor() end
---* brief Get scale of page indicator's index nodes.<br>
---* return indexNodesScale
---@return float@ float#float ret (return value: float)
function PageView:getIndicatorIndexNodesScale() end
---* brief Set the page indicator's position in page view.<br>
---* param position The position in page view
---@param position vec2_table@ #vec2_table position
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorPosition(position) end
---* brief Get the opacity of page indicator's selected index.<br>
---* return opacity
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function PageView:getIndicatorSelectedIndexOpacity() end
---@param idx int@ #int idx
---@param time float@ #float time
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
---@overload fun(idx:int,time:float):ccui.PageView
---@overload fun(idx:int):ccui.PageView
function PageView:scrollToPage(idx,time) end
---* brief Set the page indicator's position using anchor point.<br>
---* param positionAsAnchorPoint The position as anchor point.
---@param positionAsAnchorPoint vec2_table@ #vec2_table positionAsAnchorPoint
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorPositionAsAnchorPoint(positionAsAnchorPoint) end
---@param idx int@ #int idx
---@param time float@ #float time
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
---@overload fun(idx:int,time:float):ccui.PageView
---@overload fun(idx:int):ccui.PageView
function PageView:scrollToItem(idx,time) end
---* brief Set color of page indicator's index nodes.<br>
---* param color New indicator node color.
---@param color color3b_table@ #color3b_table color
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorIndexNodesColor(color) end
---* brief Get the opacity of page indicator's index nodes.<br>
---* return opacity
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function PageView:getIndicatorIndexNodesOpacity() end
---* brief Get the page indicator's position as anchor point.<br>
---* return positionAsAnchorPoint
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PageView:getIndicatorPositionAsAnchorPoint() end
---* Gets current displayed page index.<br>
---* return current page index.
---@return int@ int#int ret (return value: int)
function PageView:getCurrentPageIndex() end
---* Remove a page of PageView.<br>
---* param page  Page to be removed.
---@param page ccui.Widget@ #ccui.Widget page
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:removePage(page) end
---* sets texture for index nodes.<br>
---* param fileName   File name of texture.<br>
---* param resType    @see TextureResType .
---@param texName string@ #string texName
---@param texType int@ #int texType
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setIndicatorIndexNodesTexture(texName,texType) end
---* brief Query page indicator state.<br>
---* return True if page indicator is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function PageView:getIndicatorEnabled() end
---* Remove a page at a given index of PageView.<br>
---* param index  A given index.
---@param index int@ #int index
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:removePageAtIndex(index) end
---* brief Get the space between page indicator's index nodes.<br>
---* return spaceBetweenIndexNodes
---@return float@ float#float ret (return value: float)
function PageView:getIndicatorSpaceBetweenIndexNodes() end
---* Insert a page into the end of PageView.<br>
---* param page Page to be inserted.
---@param page ccui.Widget@ #ccui.Widget page
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:addPage(page) end
---* Create an empty PageView.<br>
---* return A PageView instance.
---@return ccui.PageView@ PageView#PageView ret (return value: ccui.PageView)
function PageView:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function PageView:createInstance() end
---* 
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:doLayout() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PageView:init() end
---* 
---@return string@ string#string ret (return value: string)
function PageView:getDescription() end
---* Changes direction<br>
---* Direction Direction::VERTICAL means vertical scroll, Direction::HORIZONTAL means horizontal scroll.<br>
---* param direction Set the page view's scroll direction.
---@param direction int@ #int direction
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:setDirection(direction) end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.PageView@ PageView#PageView self (return value: ccui.PageView)
function PageView:PageView() end


---@class cc.ParallaxNode :  Node
local ParallaxNode={ }
---@class ParallaxNode : cc.ParallaxNode
cc.ParallaxNode=ParallaxNode


---*  Adds a child to the container with a local z-order, parallax ratio and position offset.<br>
---* param child A child node.<br>
---* param z Z order for drawing priority.<br>
---* param parallaxRatio A given parallax ratio.<br>
---* param positionOffset A given position offset.
---@param child cc.Node@ #cc.Node child
---@param z int@ #int z
---@param parallaxRatio vec2_table@ #vec2_table parallaxRatio
---@param positionOffset vec2_table@ #vec2_table positionOffset
---@return cc.ParallaxNode@ ParallaxNode#ParallaxNode self (return value: cc.ParallaxNode)
function ParallaxNode:addChild(child,z,parallaxRatio,positionOffset) end
---* 
---@param cleanup boolean@ #bool cleanup
---@return cc.ParallaxNode@ ParallaxNode#ParallaxNode self (return value: cc.ParallaxNode)
function ParallaxNode:removeAllChildrenWithCleanup(cleanup) end
---*  Create a Parallax node. <br>
---* return An autoreleased ParallaxNode object.
---@return cc.ParallaxNode@ ParallaxNode#ParallaxNode ret (return value: cc.ParallaxNode)
function ParallaxNode:create() end
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@param tag int@ #int tag
---@return cc.ParallaxNode@ ParallaxNode#ParallaxNode self (return value: cc.ParallaxNode)
---@overload fun(child:cc.Node,zOrder:int,unkown2:string):cc.ParallaxNode
---@overload fun(child:cc.Node,zOrder:int,tag:int):cc.ParallaxNode
function ParallaxNode:addChild(child,zOrder,tag) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.ParallaxNode@ ParallaxNode#ParallaxNode self (return value: cc.ParallaxNode)
function ParallaxNode:visit(renderer,parentTransform,parentFlags) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.ParallaxNode@ ParallaxNode#ParallaxNode self (return value: cc.ParallaxNode)
function ParallaxNode:removeChild(child,cleanup) end
---*  Adds a child to the container with a z-order, a parallax ratio and a position offset<br>
---* It returns self, so you can chain several addChilds.<br>
---* since v0.8<br>
---* js ctor
---@return cc.ParallaxNode@ ParallaxNode#ParallaxNode self (return value: cc.ParallaxNode)
function ParallaxNode:ParallaxNode() end


---@class cc.ParticleBatchNode :  Node@TextureProtocol
local ParticleBatchNode={ }
---@class ParticleBatchNode : cc.ParticleBatchNode
cc.ParticleBatchNode=ParticleBatchNode


---* 
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:setTexture(texture) end
---*  initializes the particle system with Texture2D, a capacity of particles 
---@param tex cc.Texture2D@ #cc.Texture2D tex
---@param capacity int@ #int capacity
---@return boolean@ bool#bool ret (return value: bool)
function ParticleBatchNode:initWithTexture(tex,capacity) end
---*  Disables a particle by inserting a 0'd quad into the texture atlas.<br>
---* param particleIndex The index of the particle.
---@param particleIndex int@ #int particleIndex
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:disableParticle(particleIndex) end
---* 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function ParticleBatchNode:getTexture() end
---*  Sets the texture atlas used for drawing the quads.<br>
---* param atlas The texture atlas used for drawing the quads.
---@param atlas cc.TextureAtlas@ #cc.TextureAtlas atlas
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:setTextureAtlas(atlas) end
---*  initializes the particle system with the name of a file on disk (for a list of supported formats look at the Texture2D class), a capacity of particles 
---@param fileImage string@ #string fileImage
---@param capacity int@ #int capacity
---@return boolean@ bool#bool ret (return value: bool)
function ParticleBatchNode:initWithFile(fileImage,capacity) end
---* code<br>
---* When this function bound into js or lua,the parameter will be changed<br>
---* In js: var setBlendFunc(var src, var dst)<br>
---* endcode<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:setBlendFunc(blendFunc) end
---* 
---@param doCleanup boolean@ #bool doCleanup
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:removeAllChildrenWithCleanup(doCleanup) end
---*  Gets the texture atlas used for drawing the quads.<br>
---* return The texture atlas used for drawing the quads.
---@return cc.TextureAtlas@ TextureAtlas#TextureAtlas ret (return value: cc.TextureAtlas)
function ParticleBatchNode:getTextureAtlas() end
---* js NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function ParticleBatchNode:getBlendFunc() end
---*  Inserts a child into the ParticleBatchNode.<br>
---* param system A given particle system.<br>
---* param index The insert index.
---@param system cc.ParticleSystem@ #cc.ParticleSystem system
---@param index int@ #int index
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:insertChild(system,index) end
---*  Remove a child of the ParticleBatchNode.<br>
---* param index The index of the child.<br>
---* param doCleanup True if all actions and callbacks on this node should be removed, false otherwise.
---@param index int@ #int index
---@param doCleanup boolean@ #bool doCleanup
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:removeChildAtIndex(index,doCleanup) end
---*  Create the particle system with the name of a file on disk (for a list of supported formats look at the Texture2D class), a capacity of particles.<br>
---* param fileImage A given file name.<br>
---* param capacity A capacity of particles.<br>
---* return An autoreleased ParticleBatchNode object.
---@param fileImage string@ #string fileImage
---@param capacity int@ #int capacity
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode ret (return value: cc.ParticleBatchNode)
function ParticleBatchNode:create(fileImage,capacity) end
---*  Create the particle system with Texture2D, a capacity of particles, which particle system to use.<br>
---* param tex A given texture.<br>
---* param capacity A capacity of particles.<br>
---* return An autoreleased ParticleBatchNode object.<br>
---* js NA
---@param tex cc.Texture2D@ #cc.Texture2D tex
---@param capacity int@ #int capacity
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode ret (return value: cc.ParticleBatchNode)
function ParticleBatchNode:createWithTexture(tex,capacity) end
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@param tag int@ #int tag
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
---@overload fun(child:cc.Node,zOrder:int,unkown2:string):cc.ParticleBatchNode
---@overload fun(child:cc.Node,zOrder:int,tag:int):cc.ParticleBatchNode
function ParticleBatchNode:addChild(child,zOrder,tag) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:draw(renderer,transform,flags) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:visit(renderer,parentTransform,parentFlags) end
---* 
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:reorderChild(child,zOrder) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:removeChild(child,cleanup) end
---* js ctor
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode self (return value: cc.ParticleBatchNode)
function ParticleBatchNode:ParticleBatchNode() end


---@class cc.ParticleData 
local ParticleData={ }
---@class ParticleData : cc.ParticleData
cc.ParticleData=ParticleData


---* 
---@return cc.ParticleData@ ParticleData#ParticleData self (return value: cc.ParticleData)
function ParticleData:release() end
---* 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function ParticleData:getMaxCount() end
---* 
---@param count int@ #int count
---@return boolean@ bool#bool ret (return value: bool)
function ParticleData:init(count) end
---* 
---@param p1 int@ #int p1
---@param p2 int@ #int p2
---@return cc.ParticleData@ ParticleData#ParticleData self (return value: cc.ParticleData)
function ParticleData:copyParticle(p1,p2) end
---* 
---@return cc.ParticleData@ ParticleData#ParticleData self (return value: cc.ParticleData)
function ParticleData:ParticleData() end


---@class ccs.ParticleDisplayData :  DisplayData
local ParticleDisplayData={ }
---@class ParticleDisplayData : ccs.ParticleDisplayData
ccs.ParticleDisplayData=ParticleDisplayData


---* 
---@return ccs.ParticleDisplayData@ ParticleDisplayData#ParticleDisplayData ret (return value: ccs.ParticleDisplayData)
function ParticleDisplayData:create() end
---* js ctor
---@return ccs.ParticleDisplayData@ ParticleDisplayData#ParticleDisplayData self (return value: ccs.ParticleDisplayData)
function ParticleDisplayData:ParticleDisplayData() end


---@class cc.ParticleExplosion :  ParticleSystemQuad
local ParticleExplosion={ }
---@class ParticleExplosion : cc.ParticleExplosion
cc.ParticleExplosion=ParticleExplosion


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleExplosion:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleExplosion:initWithTotalParticles(numberOfParticles) end
---*  Create a explosion particle system.<br>
---* return An autoreleased ParticleExplosion object.
---@return cc.ParticleExplosion@ ParticleExplosion#ParticleExplosion ret (return value: cc.ParticleExplosion)
function ParticleExplosion:create() end
---*  Create a explosion particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleExplosion object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleExplosion@ ParticleExplosion#ParticleExplosion ret (return value: cc.ParticleExplosion)
function ParticleExplosion:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleExplosion@ ParticleExplosion#ParticleExplosion self (return value: cc.ParticleExplosion)
function ParticleExplosion:ParticleExplosion() end


---@class cc.ParticleFire :  ParticleSystemQuad
local ParticleFire={ }
---@class ParticleFire : cc.ParticleFire
cc.ParticleFire=ParticleFire


---*  Create a fire particle system.<br>
---* return An autoreleased ParticleFire object.
---@return cc.ParticleFire@ ParticleFire#ParticleFire ret (return value: cc.ParticleFire)
function ParticleFire:create() end
---*  Create a fire particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleFire object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleFire@ ParticleFire#ParticleFire ret (return value: cc.ParticleFire)
function ParticleFire:createWithTotalParticles(numberOfParticles) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleFire:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleFire:initWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleFire@ ParticleFire#ParticleFire self (return value: cc.ParticleFire)
function ParticleFire:ParticleFire() end


---@class cc.ParticleFireworks :  ParticleSystemQuad
local ParticleFireworks={ }
---@class ParticleFireworks : cc.ParticleFireworks
cc.ParticleFireworks=ParticleFireworks


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleFireworks:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleFireworks:initWithTotalParticles(numberOfParticles) end
---*  Create a fireworks particle system.<br>
---* return An autoreleased ParticleFireworks object.
---@return cc.ParticleFireworks@ ParticleFireworks#ParticleFireworks ret (return value: cc.ParticleFireworks)
function ParticleFireworks:create() end
---*  Create a fireworks particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleFireworks object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleFireworks@ ParticleFireworks#ParticleFireworks ret (return value: cc.ParticleFireworks)
function ParticleFireworks:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleFireworks@ ParticleFireworks#ParticleFireworks self (return value: cc.ParticleFireworks)
function ParticleFireworks:ParticleFireworks() end


---@class cc.ParticleFlower :  ParticleSystemQuad
local ParticleFlower={ }
---@class ParticleFlower : cc.ParticleFlower
cc.ParticleFlower=ParticleFlower


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleFlower:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleFlower:initWithTotalParticles(numberOfParticles) end
---*  Create a flower particle system.<br>
---* return An autoreleased ParticleFlower object.
---@return cc.ParticleFlower@ ParticleFlower#ParticleFlower ret (return value: cc.ParticleFlower)
function ParticleFlower:create() end
---*  Create a flower particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleFlower object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleFlower@ ParticleFlower#ParticleFlower ret (return value: cc.ParticleFlower)
function ParticleFlower:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleFlower@ ParticleFlower#ParticleFlower self (return value: cc.ParticleFlower)
function ParticleFlower:ParticleFlower() end


---@class cc.ParticleGalaxy :  ParticleSystemQuad
local ParticleGalaxy={ }
---@class ParticleGalaxy : cc.ParticleGalaxy
cc.ParticleGalaxy=ParticleGalaxy


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleGalaxy:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleGalaxy:initWithTotalParticles(numberOfParticles) end
---*  Create a galaxy particle system.<br>
---* return An autoreleased ParticleGalaxy object.
---@return cc.ParticleGalaxy@ ParticleGalaxy#ParticleGalaxy ret (return value: cc.ParticleGalaxy)
function ParticleGalaxy:create() end
---*  Create a galaxy particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleGalaxy object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleGalaxy@ ParticleGalaxy#ParticleGalaxy ret (return value: cc.ParticleGalaxy)
function ParticleGalaxy:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleGalaxy@ ParticleGalaxy#ParticleGalaxy self (return value: cc.ParticleGalaxy)
function ParticleGalaxy:ParticleGalaxy() end


---@class cc.ParticleMeteor :  ParticleSystemQuad
local ParticleMeteor={ }
---@class ParticleMeteor : cc.ParticleMeteor
cc.ParticleMeteor=ParticleMeteor


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleMeteor:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleMeteor:initWithTotalParticles(numberOfParticles) end
---*  Create a meteor particle system.<br>
---* return An autoreleased ParticleMeteor object.
---@return cc.ParticleMeteor@ ParticleMeteor#ParticleMeteor ret (return value: cc.ParticleMeteor)
function ParticleMeteor:create() end
---*  Create a meteor particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleMeteor object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleMeteor@ ParticleMeteor#ParticleMeteor ret (return value: cc.ParticleMeteor)
function ParticleMeteor:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleMeteor@ ParticleMeteor#ParticleMeteor self (return value: cc.ParticleMeteor)
function ParticleMeteor:ParticleMeteor() end


---@class cc.ParticleRain :  ParticleSystemQuad
local ParticleRain={ }
---@class ParticleRain : cc.ParticleRain
cc.ParticleRain=ParticleRain


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleRain:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleRain:initWithTotalParticles(numberOfParticles) end
---*  Create a rain particle system.<br>
---* return An autoreleased ParticleRain object.
---@return cc.ParticleRain@ ParticleRain#ParticleRain ret (return value: cc.ParticleRain)
function ParticleRain:create() end
---*  Create a rain particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleRain object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleRain@ ParticleRain#ParticleRain ret (return value: cc.ParticleRain)
function ParticleRain:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleRain@ ParticleRain#ParticleRain self (return value: cc.ParticleRain)
function ParticleRain:ParticleRain() end


---@class cc.ParticleSmoke :  ParticleSystemQuad
local ParticleSmoke={ }
---@class ParticleSmoke : cc.ParticleSmoke
cc.ParticleSmoke=ParticleSmoke


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSmoke:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSmoke:initWithTotalParticles(numberOfParticles) end
---*  Create a smoke particle system.<br>
---* return An autoreleased ParticleSmoke object.
---@return cc.ParticleSmoke@ ParticleSmoke#ParticleSmoke ret (return value: cc.ParticleSmoke)
function ParticleSmoke:create() end
---*  Create a smoke particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleSmoke object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleSmoke@ ParticleSmoke#ParticleSmoke ret (return value: cc.ParticleSmoke)
function ParticleSmoke:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleSmoke@ ParticleSmoke#ParticleSmoke self (return value: cc.ParticleSmoke)
function ParticleSmoke:ParticleSmoke() end


---@class cc.ParticleSnow :  ParticleSystemQuad
local ParticleSnow={ }
---@class ParticleSnow : cc.ParticleSnow
cc.ParticleSnow=ParticleSnow


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSnow:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSnow:initWithTotalParticles(numberOfParticles) end
---*  Create a snow particle system.<br>
---* return An autoreleased ParticleSnow object.
---@return cc.ParticleSnow@ ParticleSnow#ParticleSnow ret (return value: cc.ParticleSnow)
function ParticleSnow:create() end
---*  Create a snow particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleSnow object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleSnow@ ParticleSnow#ParticleSnow ret (return value: cc.ParticleSnow)
function ParticleSnow:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleSnow@ ParticleSnow#ParticleSnow self (return value: cc.ParticleSnow)
function ParticleSnow:ParticleSnow() end


---@class cc.ParticleSpiral :  ParticleSystemQuad
local ParticleSpiral={ }
---@class ParticleSpiral : cc.ParticleSpiral
cc.ParticleSpiral=ParticleSpiral


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSpiral:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSpiral:initWithTotalParticles(numberOfParticles) end
---*  Create a spiral particle system.<br>
---* return An autoreleased ParticleSpiral object.
---@return cc.ParticleSpiral@ ParticleSpiral#ParticleSpiral ret (return value: cc.ParticleSpiral)
function ParticleSpiral:create() end
---*  Create a spiral particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleSpiral object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleSpiral@ ParticleSpiral#ParticleSpiral ret (return value: cc.ParticleSpiral)
function ParticleSpiral:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleSpiral@ ParticleSpiral#ParticleSpiral self (return value: cc.ParticleSpiral)
function ParticleSpiral:ParticleSpiral() end


---@class cc.ParticleSun :  ParticleSystemQuad
local ParticleSun={ }
---@class ParticleSun : cc.ParticleSun
cc.ParticleSun=ParticleSun


---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSun:init() end
---* 
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSun:initWithTotalParticles(numberOfParticles) end
---*  Create a sun particle system.<br>
---* return An autoreleased ParticleSun object.
---@return cc.ParticleSun@ ParticleSun#ParticleSun ret (return value: cc.ParticleSun)
function ParticleSun:create() end
---*  Create a sun particle system withe a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleSun object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleSun@ ParticleSun#ParticleSun ret (return value: cc.ParticleSun)
function ParticleSun:createWithTotalParticles(numberOfParticles) end
---* js ctor
---@return cc.ParticleSun@ ParticleSun#ParticleSun self (return value: cc.ParticleSun)
function ParticleSun:ParticleSun() end


---@class cc.ParticleSystem :  Node@TextureProtocol,PlayableProtocol
local ParticleSystem={ }
---@class ParticleSystem : cc.ParticleSystem
cc.ParticleSystem=ParticleSystem


---*  Gets the start size variance in pixels of each particle.<br>
---* return The start size variance in pixels of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getStartSizeVar() end
---* 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function ParticleSystem:getTexture() end
---*  Whether or not the system is full.<br>
---* return True if the system is full.
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:isFull() end
---*  Gets the batch node.<br>
---* return The batch node.
---@return cc.ParticleBatchNode@ ParticleBatchNode#ParticleBatchNode ret (return value: cc.ParticleBatchNode)
function ParticleSystem:getBatchNode() end
---*  Gets the start color of each particle.<br>
---* return The start color of each particle.
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function ParticleSystem:getStartColor() end
---*  Gets the particles movement type: Free or Grouped.<br>
---* since v0.8<br>
---* return The particles movement type.
---@return int@ int#int ret (return value: int)
function ParticleSystem:getPositionType() end
---*  Sets the position variance of the emitter.<br>
---* param pos The position variance of the emitter.
---@param pos vec2_table@ #vec2_table pos
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setPosVar(pos) end
---*  Gets the end spin of each particle.<br>
---* return The end spin of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getEndSpin() end
---*  Sets the rotate per second variance.<br>
---* param degrees The rotate per second variance.
---@param degrees float@ #float degrees
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setRotatePerSecondVar(degrees) end
---* / @} end of PlayableProtocol
---@param sourcePositionCompatible boolean@ #bool sourcePositionCompatible
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setSourcePositionCompatible(sourcePositionCompatible) end
---*  Gets the start spin variance of each particle.<br>
---* return The start spin variance of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getStartSpinVar() end
---*  Gets the radial acceleration variance.<br>
---* return The radial acceleration variance.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getRadialAccelVar() end
---*  Gets the end size variance in pixels of each particle.<br>
---* return The end size variance in pixels of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getEndSizeVar() end
---*  Sets the tangential acceleration.<br>
---* param t The tangential acceleration.
---@param t float@ #float t
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setTangentialAccel(t) end
---*  Gets the radial acceleration.<br>
---* return The radial acceleration.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getRadialAccel() end
---*  Sets the start radius.<br>
---* param startRadius The start radius.
---@param startRadius float@ #float startRadius
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartRadius(startRadius) end
---*  Sets the number of degrees to rotate a particle around the source pos per second.<br>
---* param degrees The number of degrees to rotate a particle around the source pos per second.
---@param degrees float@ #float degrees
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setRotatePerSecond(degrees) end
---*  Sets the end size in pixels of each particle.<br>
---* param endSize The end size in pixels of each particle.
---@param endSize float@ #float endSize
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndSize(endSize) end
---*  Gets the gravity.<br>
---* return The gravity.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ParticleSystem:getGravity() end
---* 
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:resumeEmissions() end
---*  Gets the tangential acceleration.<br>
---* return The tangential acceleration.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getTangentialAccel() end
---*  Sets the end radius.<br>
---* param endRadius The end radius.
---@param endRadius float@ #float endRadius
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndRadius(endRadius) end
---*  Gets the speed.<br>
---* return The speed.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getSpeed() end
---* 
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:pauseEmissions() end
---*  Gets the angle of each particle. <br>
---* return The angle of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getAngle() end
---*  Sets the end color and end color variation of each particle.<br>
---* param color The end color and end color variation of each particle.
---@param color color4f_table@ #color4f_table color
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndColor(color) end
---*  Sets the start spin of each particle.<br>
---* param spin The start spin of each particle.
---@param spin float@ #float spin
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartSpin(spin) end
---*  Sets how many seconds the emitter will run. -1 means 'forever'.<br>
---* param duration The seconds that the emitter will run. -1 means 'forever'.
---@param duration float@ #float duration
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setDuration(duration) end
---*  Initializes a system with a fixed number of particles
---@param numberOfParticles int@ #int numberOfParticles
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:initWithTotalParticles(numberOfParticles) end
---* 
---@param count int@ #int count
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:addParticles(count) end
---* 
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setTexture(texture) end
---*  Gets the position variance of the emitter.<br>
---* return The position variance of the emitter.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ParticleSystem:getPosVar() end
---*  Call the update method with no time..
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:updateWithNoTime() end
---*  Whether or not the particle system is blend additive.<br>
---* return True if the particle system is blend additive.
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:isBlendAdditive() end
---*  Gets the speed variance.<br>
---* return The speed variance.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getSpeedVar() end
---*  Sets the particles movement type: Free or Grouped.<br>
---* since v0.8<br>
---* param type The particles movement type.
---@param type int@ #int type
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setPositionType(type) end
---* 
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:stopSystem() end
---*  Gets the source position of the emitter.<br>
---* return The source position of the emitter.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ParticleSystem:getSourcePosition() end
---*  Sets the life variance of each particle.<br>
---* param lifeVar The life variance of each particle.
---@param lifeVar float@ #float lifeVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setLifeVar(lifeVar) end
---*  Sets the maximum particles of the system.<br>
---* param totalParticles The maximum particles of the system.
---@param totalParticles int@ #int totalParticles
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setTotalParticles(totalParticles) end
---*  Sets the end color variance of each particle.<br>
---* param color The end color variance of each particle.
---@param color color4f_table@ #color4f_table color
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndColorVar(color) end
---*  Gets the index of system in batch node array.<br>
---* return The index of system in batch node array.
---@return int@ int#int ret (return value: int)
function ParticleSystem:getAtlasIndex() end
---*  Gets the start size in pixels of each particle.<br>
---* return The start size in pixels of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getStartSize() end
---*  Sets the start spin variance of each particle.<br>
---* param pinVar The start spin variance of each particle.
---@param pinVar float@ #float pinVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartSpinVar(pinVar) end
---*  Kill all living particles.
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:resetSystem() end
---*  Sets the index of system in batch node array.<br>
---* param index The index of system in batch node array.
---@param index int@ #int index
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setAtlasIndex(index) end
---*  Sets the tangential acceleration variance.<br>
---* param t The tangential acceleration variance.
---@param t float@ #float t
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setTangentialAccelVar(t) end
---*  Sets the end radius variance.<br>
---* param endRadiusVar The end radius variance.
---@param endRadiusVar float@ #float endRadiusVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndRadiusVar(endRadiusVar) end
---*  Gets the end radius.<br>
---* return The end radius.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getEndRadius() end
---*  Whether or not the particle system is active.<br>
---* return True if the particle system is active.
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:isActive() end
---*  Sets the radial acceleration variance.<br>
---* param t The radial acceleration variance.
---@param t float@ #float t
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setRadialAccelVar(t) end
---*  Sets the start size in pixels of each particle.<br>
---* param startSize The start size in pixels of each particle.
---@param startSize float@ #float startSize
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartSize(startSize) end
---*  Sets the speed.<br>
---* param speed The speed.
---@param speed float@ #float speed
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setSpeed(speed) end
---*  Gets the start spin of each particle.<br>
---* return The start spin of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getStartSpin() end
---* 
---@return string@ string#string ret (return value: string)
function ParticleSystem:getResourceFile() end
---*  Gets the number of degrees to rotate a particle around the source pos per second.<br>
---* return The number of degrees to rotate a particle around the source pos per second.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getRotatePerSecond() end
---*  Sets the mode of the emitter.<br>
---* param mode The mode of the emitter.
---@param mode int@ #int mode
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEmitterMode(mode) end
---*  Gets how many seconds the emitter will run. -1 means 'forever'.<br>
---* return The seconds that the emitter will run. -1 means 'forever'.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getDuration() end
---*  Sets the source position of the emitter.<br>
---* param pos The source position of the emitter.
---@param pos vec2_table@ #vec2_table pos
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setSourcePosition(pos) end
---* 
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:stop() end
---*  Update the verts position data of particle,<br>
---* should be overridden by subclasses. 
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:updateParticleQuads() end
---*  Gets the end spin variance of each particle.<br>
---* return The end spin variance of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getEndSpinVar() end
---*  Sets the particle system blend additive.<br>
---* param value True if the particle system is blend additive.
---@param value boolean@ #bool value
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setBlendAdditive(value) end
---*  Sets the life of each particle.<br>
---* param life The life of each particle.
---@param life float@ #float life
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setLife(life) end
---*  Sets the angle variance of each particle.<br>
---* param angleVar The angle variance of each particle.
---@param angleVar float@ #float angleVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setAngleVar(angleVar) end
---*  Sets the rotation of each particle to its direction.<br>
---* param t True if the rotation is the direction.
---@param t boolean@ #bool t
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setRotationIsDir(t) end
---* / @{/ @name implement Playable Protocol
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:start() end
---*  Sets the end size variance in pixels of each particle.<br>
---* param sizeVar The end size variance in pixels of each particle.
---@param sizeVar float@ #float sizeVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndSizeVar(sizeVar) end
---*  Sets the angle of each particle.<br>
---* param angle The angle of each particle.
---@param angle float@ #float angle
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setAngle(angle) end
---*  Sets the batch node.<br>
---* param batchNode The batch node.
---@param batchNode cc.ParticleBatchNode@ #cc.ParticleBatchNode batchNode
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setBatchNode(batchNode) end
---*  Gets the tangential acceleration variance.<br>
---* return The tangential acceleration variance.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getTangentialAccelVar() end
---*  Switch between different kind of emitter modes:<br>
---* - kParticleModeGravity: uses gravity, speed, radial and tangential acceleration.<br>
---* - kParticleModeRadius: uses radius movement + rotation.<br>
---* return The mode of the emitter.
---@return int@ int#int ret (return value: int)
function ParticleSystem:getEmitterMode() end
---*  Sets the end spin variance of each particle.<br>
---* param endSpinVar The end spin variance of each particle.
---@param endSpinVar float@ #float endSpinVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndSpinVar(endSpinVar) end
---*  initializes a ParticleSystem from a plist file.<br>
---* This plist files can be created manually or with Particle Designer:<br>
---* http:particledesigner.71squared.com/<br>
---* since v0.99.3
---@param plistFile string@ #string plistFile
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:initWithFile(plistFile) end
---*  Gets the angle variance of each particle.<br>
---* return The angle variance of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getAngleVar() end
---*  Sets the start color of each particle.<br>
---* param color The start color of each particle.
---@param color color4f_table@ #color4f_table color
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartColor(color) end
---*  Gets the rotate per second variance.<br>
---* return The rotate per second variance.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getRotatePerSecondVar() end
---*  Gets the end size in pixels of each particle.<br>
---* return The end size in pixels of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getEndSize() end
---*  Gets the life of each particle.<br>
---* return The life of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getLife() end
---*  Are the emissions paused<br>
---* return True if the emissions are paused, else false
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:isPaused() end
---*  Sets the speed variance.<br>
---* param speed The speed variance.
---@param speed float@ #float speed
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setSpeedVar(speed) end
---*  Set the particle system auto removed it self on finish.<br>
---* param var True if the particle system removed self on finish.
---@param var boolean@ #bool var
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setAutoRemoveOnFinish(var) end
---*  Sets the gravity.<br>
---* param g The gravity.
---@param g vec2_table@ #vec2_table g
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setGravity(g) end
---*  Update the VBO verts buffer which does not use batch node,<br>
---* should be overridden by subclasses. 
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:postStep() end
---*  Sets the emission rate of the particles.<br>
---* param rate The emission rate of the particles.
---@param rate float@ #float rate
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEmissionRate(rate) end
---*  Gets the end color variance of each particle.<br>
---* return The end color variance of each particle.
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function ParticleSystem:getEndColorVar() end
---*  Whether or not the rotation of each particle to its direction.<br>
---* return True if the rotation is the direction.
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:getRotationIsDir() end
---*  Gets the emission rate of the particles.<br>
---* return The emission rate of the particles.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getEmissionRate() end
---*  Gets the end color and end color variation of each particle.<br>
---* return The end color and end color variation of each particle.
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function ParticleSystem:getEndColor() end
---*  Gets the life variance of each particle.<br>
---* return The life variance of each particle.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getLifeVar() end
---*  Sets the start size variance in pixels of each particle.<br>
---* param sizeVar The start size variance in pixels of each particle.
---@param sizeVar float@ #float sizeVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartSizeVar(sizeVar) end
---*  Gets the start radius.<br>
---* return The start radius.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getStartRadius() end
---*  Gets the Quantity of particles that are being simulated at the moment.<br>
---* return The Quantity of particles that are being simulated at the moment.
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function ParticleSystem:getParticleCount() end
---*  Gets the start radius variance.<br>
---* return The start radius variance.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getStartRadiusVar() end
---* js NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function ParticleSystem:getBlendFunc() end
---*  Sets the start color variance of each particle.<br>
---* param color The start color variance of each particle.
---@param color color4f_table@ #color4f_table color
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartColorVar(color) end
---*  Sets the end spin of each particle.<br>
---* param endSpin The end spin of each particle.
---@param endSpin float@ #float endSpin
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setEndSpin(endSpin) end
---*  Sets the radial acceleration.<br>
---* param t The radial acceleration.
---@param t float@ #float t
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setRadialAccel(t) end
---@param dictionary map_table@ #map_table dictionary
---@param dirname string@ #string dirname
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(dictionary:map_table,dirname:string):boolean
---@overload fun(dictionary:map_table):boolean
function ParticleSystem:initWithDictionary(dictionary,dirname) end
---*  Whether or not the particle system removed self on finish.<br>
---* return True if the particle system removed self on finish.
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:isAutoRemoveOnFinish() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:isSourcePositionCompatible() end
---*  Gets the maximum particles of the system.<br>
---* return The maximum particles of the system.
---@return int@ int#int ret (return value: int)
function ParticleSystem:getTotalParticles() end
---*  Sets the start radius variance.<br>
---* param startRadiusVar The start radius variance.
---@param startRadiusVar float@ #float startRadiusVar
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setStartRadiusVar(startRadiusVar) end
---* code<br>
---* When this function bound into js or lua,the parameter will be changed<br>
---* In js: var setBlendFunc(var src, var dst)<br>
---* In lua: local setBlendFunc(local src, local dst)<br>
---* endcode
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setBlendFunc(blendFunc) end
---*  Gets the end radius variance.<br>
---* return The end radius variance.
---@return float@ float#float ret (return value: float)
function ParticleSystem:getEndRadiusVar() end
---*  Gets the start color variance of each particle.<br>
---* return The start color variance of each particle.
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function ParticleSystem:getStartColorVar() end
---*  Creates an initializes a ParticleSystem from a plist file.<br>
---* This plist files can be created manually or with Particle Designer:<br>
---* http:particledesigner.71squared.com/<br>
---* since v2.0<br>
---* param plistFile Particle plist file name.<br>
---* return An autoreleased ParticleSystem object.
---@param plistFile string@ #string plistFile
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem ret (return value: cc.ParticleSystem)
function ParticleSystem:create(plistFile) end
---*  Create a system with a fixed number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleSystemQuad object.<br>
---* js NA
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem ret (return value: cc.ParticleSystem)
function ParticleSystem:createWithTotalParticles(numberOfParticles) end
---*  Gets all ParticleSystem references
---@return array_table@ array_table#array_table ret (return value: array_table)
function ParticleSystem:getAllParticleSystems() end
---* 
---@param newScaleY float@ #float newScaleY
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setScaleY(newScaleY) end
---* 
---@param newScaleX float@ #float newScaleX
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setScaleX(newScaleX) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:isOpacityModifyRGB() end
---*  does the alpha value modify color 
---@param opacityModifyRGB boolean@ #bool opacityModifyRGB
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setOpacityModifyRGB(opacityModifyRGB) end
---* 
---@param s float@ #float s
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setScale(s) end
---* 
---@param dt float@ #float dt
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:update(dt) end
---*  initializes a ParticleSystem
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem:init() end
---* 
---@param newRotation float@ #float newRotation
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:setRotation(newRotation) end
---* js ctor
---@return cc.ParticleSystem@ ParticleSystem#ParticleSystem self (return value: cc.ParticleSystem)
function ParticleSystem:ParticleSystem() end


---@class cc.ParticleSystem3D :  Node@BlendProtocol
local ParticleSystem3D={ }
---@class ParticleSystem3D : cc.ParticleSystem3D
cc.ParticleSystem3D=ParticleSystem3D


---* remove affector by index
---@param index int@ #int index
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:removeAffector(index) end
---* resume particle
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:resumeParticleSystem() end
---* remove all particle affector
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:removeAllAffector() end
---* add particle affector
---@param affector cc.Particle3DAffector@ #cc.Particle3DAffector affector
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:addAffector(affector) end
---* particle system play control
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:startParticleSystem() end
---* is enabled
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem3D:isEnabled() end
---* return particle render
---@return cc.Particle3DRender@ Particle3DRender#Particle3DRender ret (return value: cc.Particle3DRender)
function ParticleSystem3D:getRender() end
---* set emitter for particle system, can set your own particle emitter
---@param emitter cc.Particle3DEmitter@ #cc.Particle3DEmitter emitter
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:setEmitter(emitter) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ParticleSystem3D:isKeepLocal() end
---* Enables or disables the system.
---@param enabled boolean@ #bool enabled
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:setEnabled(enabled) end
---* get particle quota
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function ParticleSystem3D:getParticleQuota() end
---* override function
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function ParticleSystem3D:getBlendFunc() end
---* pause particle
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:pauseParticleSystem() end
---* get particle playing state
---@return int@ int#int ret (return value: int)
function ParticleSystem3D:getState() end
---* get alive particles count
---@return int@ int#int ret (return value: int)
function ParticleSystem3D:getAliveParticleCount() end
---* set particle quota
---@param quota unsigned_int@ #unsigned int quota
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:setParticleQuota(quota) end
---* override function
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:setBlendFunc(blendFunc) end
---* set particle render, can set your own particle render
---@param render cc.Particle3DRender@ #cc.Particle3DRender render
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:setRender(render) end
---* stop particle
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:stopParticleSystem() end
---* 
---@param keepLocal boolean@ #bool keepLocal
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:setKeepLocal(keepLocal) end
---* override function
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:draw(renderer,transform,flags) end
---* override function
---@param delta float@ #float delta
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:update(delta) end
---* 
---@return cc.ParticleSystem3D@ ParticleSystem3D#ParticleSystem3D self (return value: cc.ParticleSystem3D)
function ParticleSystem3D:ParticleSystem3D() end


---@class cc.ParticleSystemQuad :  ParticleSystem
local ParticleSystemQuad={ }
---@class ParticleSystemQuad : cc.ParticleSystemQuad
cc.ParticleSystemQuad=ParticleSystemQuad


---*  Sets a new SpriteFrame as particle.<br>
---* WARNING: this method is experimental. Use setTextureWithRect instead.<br>
---* param spriteFrame A given sprite frame as particle texture.<br>
---* since v0.99.4
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@return cc.ParticleSystemQuad@ ParticleSystemQuad#ParticleSystemQuad self (return value: cc.ParticleSystemQuad)
function ParticleSystemQuad:setDisplayFrame(spriteFrame) end
---*  Sets a new texture with a rect. The rect is in Points.<br>
---* since v0.99.4<br>
---* js NA<br>
---* lua NA<br>
---* param texture A given texture.<br>
---* 8 @param rect A given rect, in points.
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param rect rect_table@ #rect_table rect
---@return cc.ParticleSystemQuad@ ParticleSystemQuad#ParticleSystemQuad self (return value: cc.ParticleSystemQuad)
function ParticleSystemQuad:setTextureWithRect(texture,rect) end
---*  Listen the event that renderer was recreated on Android/WP8.<br>
---* js NA<br>
---* lua NA<br>
---* param event the event that renderer was recreated on Android/WP8.
---@param event cc.EventCustom@ #cc.EventCustom event
---@return cc.ParticleSystemQuad@ ParticleSystemQuad#ParticleSystemQuad self (return value: cc.ParticleSystemQuad)
function ParticleSystemQuad:listenRendererRecreated(event) end
---@param dictionary map_table@ #map_table dictionary
---@return cc.ParticleSystemQuad@ ParticleSystemQuad#ParticleSystemQuad ret (return value: cc.ParticleSystemQuad)
---@overload fun(unkown0:string):cc.ParticleSystemQuad
---@overload fun():cc.ParticleSystemQuad
---@overload fun(dictionary:map_table):cc.ParticleSystemQuad
function ParticleSystemQuad:create(dictionary) end
---*  Creates a Particle Emitter with a number of particles.<br>
---* param numberOfParticles A given number of particles.<br>
---* return An autoreleased ParticleSystemQuad object.
---@param numberOfParticles int@ #int numberOfParticles
---@return cc.ParticleSystemQuad@ ParticleSystemQuad#ParticleSystemQuad ret (return value: cc.ParticleSystemQuad)
function ParticleSystemQuad:createWithTotalParticles(numberOfParticles) end
---* 
---@return string@ string#string ret (return value: string)
function ParticleSystemQuad:getDescription() end
---* js NA<br>
---* lua NA
---@return cc.ParticleSystemQuad@ ParticleSystemQuad#ParticleSystemQuad self (return value: cc.ParticleSystemQuad)
function ParticleSystemQuad:updateParticleQuads() end
---* js ctor
---@return cc.ParticleSystemQuad@ ParticleSystemQuad#ParticleSystemQuad self (return value: cc.ParticleSystemQuad)
function ParticleSystemQuad:ParticleSystemQuad() end


---@class cc.Pass :  RenderState
local Pass={ }
---@class Pass : cc.Pass
cc.Pass=Pass


---*  Unbinds the Pass.<br>
---* This method must be called AFTER calling the actual draw call
---@return cc.Pass@ Pass#Pass self (return value: cc.Pass)
function Pass:unbind() end
---@param modelView mat4_table@ #mat4_table modelView
---@param bindAttributes boolean@ #bool bindAttributes
---@return cc.Pass@ Pass#Pass self (return value: cc.Pass)
---@overload fun(modelView:mat4_table,bindAttributes:boolean):cc.Pass
---@overload fun(modelView:mat4_table):cc.Pass
function Pass:bind(modelView,bindAttributes) end
---* Returns a clone (deep-copy) of this instance 
---@return cc.Pass@ Pass#Pass ret (return value: cc.Pass)
function Pass:clone() end
---*  Returns the GLProgramState 
---@return cc.GLProgramState@ GLProgramState#GLProgramState ret (return value: cc.GLProgramState)
function Pass:getGLProgramState() end
---* Returns the vertex attribute binding for this pass.<br>
---* return The vertex attribute binding for this pass.
---@return cc.VertexAttribBinding@ VertexAttribBinding#VertexAttribBinding ret (return value: cc.VertexAttribBinding)
function Pass:getVertexAttributeBinding() end
---* 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Pass:getHash() end
---* Sets a vertex attribute binding for this pass.<br>
---* When a mesh binding is set, the VertexAttribBinding will be automatically<br>
---* bound when the bind() method is called for the pass.<br>
---* param binding The VertexAttribBinding to set (or NULL to remove an existing binding).
---@param binding cc.VertexAttribBinding@ #cc.VertexAttribBinding binding
---@return cc.Pass@ Pass#Pass self (return value: cc.Pass)
function Pass:setVertexAttribBinding(binding) end
---* 
---@param parent cc.Technique@ #cc.Technique parent
---@return cc.Pass@ Pass#Pass ret (return value: cc.Pass)
function Pass:create(parent) end
---*  Creates a Pass with a GLProgramState.
---@param parent cc.Technique@ #cc.Technique parent
---@param programState cc.GLProgramState@ #cc.GLProgramState programState
---@return cc.Pass@ Pass#Pass ret (return value: cc.Pass)
function Pass:createWithGLProgramState(parent,programState) end


---@class cc.Physics3D6DofConstraint :  Physics3DConstraint
local Physics3D6DofConstraint={ }
---@class Physics3D6DofConstraint : cc.Physics3D6DofConstraint
cc.Physics3D6DofConstraint=Physics3D6DofConstraint


---* set linear lower limit
---@param linearLower vec3_table@ #vec3_table linearLower
---@return cc.Physics3D6DofConstraint@ Physics3D6DofConstraint#Physics3D6DofConstraint self (return value: cc.Physics3D6DofConstraint)
function Physics3D6DofConstraint:setLinearLowerLimit(linearLower) end
---* get linear lower limit
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3D6DofConstraint:getLinearLowerLimit() end
---* get angular upper limit
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3D6DofConstraint:getAngularUpperLimit() end
---*  access for UseFrameOffset
---@return boolean@ bool#bool ret (return value: bool)
function Physics3D6DofConstraint:getUseFrameOffset() end
---* get linear upper limit
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3D6DofConstraint:getLinearUpperLimit() end
---* set angular lower limit
---@param angularLower vec3_table@ #vec3_table angularLower
---@return cc.Physics3D6DofConstraint@ Physics3D6DofConstraint#Physics3D6DofConstraint self (return value: cc.Physics3D6DofConstraint)
function Physics3D6DofConstraint:setAngularLowerLimit(angularLower) end
---* is limited?<br>
---* param limitIndex first 3 are linear, next 3 are angular
---@param limitIndex int@ #int limitIndex
---@return boolean@ bool#bool ret (return value: bool)
function Physics3D6DofConstraint:isLimited(limitIndex) end
---* set use frame offset
---@param frameOffsetOnOff boolean@ #bool frameOffsetOnOff
---@return cc.Physics3D6DofConstraint@ Physics3D6DofConstraint#Physics3D6DofConstraint self (return value: cc.Physics3D6DofConstraint)
function Physics3D6DofConstraint:setUseFrameOffset(frameOffsetOnOff) end
---* set linear upper limit
---@param linearUpper vec3_table@ #vec3_table linearUpper
---@return cc.Physics3D6DofConstraint@ Physics3D6DofConstraint#Physics3D6DofConstraint self (return value: cc.Physics3D6DofConstraint)
function Physics3D6DofConstraint:setLinearUpperLimit(linearUpper) end
---* get angular lower limit
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3D6DofConstraint:getAngularLowerLimit() end
---* set angular upper limit
---@param angularUpper vec3_table@ #vec3_table angularUpper
---@return cc.Physics3D6DofConstraint@ Physics3D6DofConstraint#Physics3D6DofConstraint self (return value: cc.Physics3D6DofConstraint)
function Physics3D6DofConstraint:setAngularUpperLimit(angularUpper) end
---@param rbA cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbA
---@param rbB cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbB
---@param frameInA mat4_table@ #mat4_table frameInA
---@param frameInB mat4_table@ #mat4_table frameInB
---@param useLinearReferenceFrameA boolean@ #bool useLinearReferenceFrameA
---@return cc.Physics3D6DofConstraint@ Physics3D6DofConstraint#Physics3D6DofConstraint ret (return value: cc.Physics3D6DofConstraint)
---@overload fun(rbA:cc.Physics3DRigidBody,unkown1:mat4_table,unkown2:boolean):cc.Physics3D6DofConstraint
---@overload fun(rbA:cc.Physics3DRigidBody,rbB:cc.Physics3DRigidBody,frameInA:mat4_table,frameInB:mat4_table,useLinearReferenceFrameA:boolean):cc.Physics3D6DofConstraint
function Physics3D6DofConstraint:create(rbA,rbB,frameInA,frameInB,useLinearReferenceFrameA) end
---* 
---@return cc.Physics3D6DofConstraint@ Physics3D6DofConstraint#Physics3D6DofConstraint self (return value: cc.Physics3D6DofConstraint)
function Physics3D6DofConstraint:Physics3D6DofConstraint() end


---@class cc.Physics3DComponent :  Component
local Physics3DComponent={ }
---@class Physics3DComponent : cc.Physics3DComponent
cc.Physics3DComponent=Physics3DComponent


---* synchronize node transformation to physics
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:syncNodeToPhysics() end
---* add this component to physics world, called by scene
---@param world cc.Physics3DWorld@ #cc.Physics3DWorld world
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:addToPhysicsWorld(world) end
---* synchronize physics transformation to node
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:syncPhysicsToNode() end
---* get physics object
---@return cc.Physics3DObject@ Physics3DObject#Physics3DObject ret (return value: cc.Physics3DObject)
function Physics3DComponent:getPhysics3DObject() end
---* set Physics object to the component
---@param physicsObj cc.Physics3DObject@ #cc.Physics3DObject physicsObj
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:setPhysics3DObject(physicsObj) end
---* synchronization between node and physics is time consuming, you can skip some synchronization using this function
---@param syncFlag int@ #int syncFlag
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:setSyncFlag(syncFlag) end
---* get the component name, it is used to find whether it is Physics3DComponent
---@return string@ string#string ret (return value: string)
function Physics3DComponent:getPhysics3DComponentName() end
---* set it enable or not
---@param b boolean@ #bool b
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:setEnabled(b) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DComponent:init() end
---* 
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:onEnter() end
---* 
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:onExit() end
---* 
---@return cc.Physics3DComponent@ Physics3DComponent#Physics3DComponent self (return value: cc.Physics3DComponent)
function Physics3DComponent:Physics3DComponent() end


---@class cc.Physics3DConeTwistConstraint :  Physics3DConstraint
local Physics3DConeTwistConstraint={ }
---@class Physics3DConeTwistConstraint : cc.Physics3DConeTwistConstraint
cc.Physics3DConeTwistConstraint=Physics3DConeTwistConstraint


---* get B's frame
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DConeTwistConstraint:getBFrame() end
---* set fix thresh
---@param fixThresh float@ #float fixThresh
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:setFixThresh(fixThresh) end
---* get B's frame offset
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DConeTwistConstraint:getFrameOffsetB() end
---* get A's frame offset
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DConeTwistConstraint:getFrameOffsetA() end
---* get fix thresh
---@return float@ float#float ret (return value: float)
function Physics3DConeTwistConstraint:getFixThresh() end
---* get swing span2
---@return float@ float#float ret (return value: float)
function Physics3DConeTwistConstraint:getSwingSpan2() end
---* get swing span1
---@return float@ float#float ret (return value: float)
function Physics3DConeTwistConstraint:getSwingSpan1() end
---* set max motor impulse
---@param maxMotorImpulse float@ #float maxMotorImpulse
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:setMaxMotorImpulse(maxMotorImpulse) end
---* set A and B's frame
---@param frameA mat4_table@ #mat4_table frameA
---@param frameB mat4_table@ #mat4_table frameB
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:setFrames(frameA,frameB) end
---* get twist angle
---@return float@ float#float ret (return value: float)
function Physics3DConeTwistConstraint:getTwistAngle() end
---* get point for angle
---@param fAngleInRadians float@ #float fAngleInRadians
---@param fLength float@ #float fLength
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DConeTwistConstraint:GetPointForAngle(fAngleInRadians,fLength) end
---* set max motor impulse normalize
---@param maxMotorImpulse float@ #float maxMotorImpulse
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:setMaxMotorImpulseNormalized(maxMotorImpulse) end
---* get twist span
---@return float@ float#float ret (return value: float)
function Physics3DConeTwistConstraint:getTwistSpan() end
---* set damping
---@param damping float@ #float damping
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:setDamping(damping) end
---* set limits<br>
---* param swingSpan1 swing span1<br>
---* param swingSpan2 swing span2<br>
---* param twistSpan twist span<br>
---* param softness 0->1, recommend ~0.8->1. Describes % of limits where movement is free. Beyond this softness %, the limit is gradually enforced until the "hard" (1.0) limit is reached.<br>
---* param biasFactor 0->1?, recommend 0.3 +/-0.3 or so. Strength with which constraint resists zeroth order (angular, not angular velocity) limit violation.<br>
---* param relaxationFactor 0->1, recommend to stay near 1. the lower the value, the less the constraint will fight velocities which violate the angular limits.
---@param swingSpan1 float@ #float swingSpan1
---@param swingSpan2 float@ #float swingSpan2
---@param twistSpan float@ #float twistSpan
---@param softness float@ #float softness
---@param biasFactor float@ #float biasFactor
---@param relaxationFactor float@ #float relaxationFactor
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:setLimit(swingSpan1,swingSpan2,twistSpan,softness,biasFactor,relaxationFactor) end
---* get A's frame
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DConeTwistConstraint:getAFrame() end
---* enable motor
---@param b boolean@ #bool b
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:enableMotor(b) end
---@param rbA cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbA
---@param rbB cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbB
---@param frameA mat4_table@ #mat4_table frameA
---@param frameB mat4_table@ #mat4_table frameB
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint ret (return value: cc.Physics3DConeTwistConstraint)
---@overload fun(rbA:cc.Physics3DRigidBody,rbB:cc.Physics3DRigidBody,frameA:mat4_table,frameB:mat4_table):cc.Physics3DConeTwistConstraint
---@overload fun(rbA:cc.Physics3DRigidBody,unkown1:mat4_table):cc.Physics3DConeTwistConstraint
function Physics3DConeTwistConstraint:create(rbA,rbB,frameA,frameB) end
---* 
---@return cc.Physics3DConeTwistConstraint@ Physics3DConeTwistConstraint#Physics3DConeTwistConstraint self (return value: cc.Physics3DConeTwistConstraint)
function Physics3DConeTwistConstraint:Physics3DConeTwistConstraint() end


---@class cc.Physics3DConstraint :  Ref
local Physics3DConstraint={ }
---@class Physics3DConstraint : cc.Physics3DConstraint
cc.Physics3DConstraint=Physics3DConstraint


---* set enable or not
---@param enabled boolean@ #bool enabled
---@return cc.Physics3DConstraint@ Physics3DConstraint#Physics3DConstraint self (return value: cc.Physics3DConstraint)
function Physics3DConstraint:setEnabled(enabled) end
---* set the impulse that break the constraint
---@param impulse float@ #float impulse
---@return cc.Physics3DConstraint@ Physics3DConstraint#Physics3DConstraint self (return value: cc.Physics3DConstraint)
function Physics3DConstraint:setBreakingImpulse(impulse) end
---* get user data
---@return void@ void#void ret (return value: void)
function Physics3DConstraint:getUserData() end
---* get the impulse that break the constraint
---@return float@ float#float ret (return value: float)
function Physics3DConstraint:getBreakingImpulse() end
---* get rigid body a
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody ret (return value: cc.Physics3DRigidBody)
function Physics3DConstraint:getBodyA() end
---* is it enabled
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DConstraint:isEnabled() end
---* get override number of solver iterations
---@return int@ int#int ret (return value: int)
function Physics3DConstraint:getOverrideNumSolverIterations() end
---* get rigid body b
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody ret (return value: cc.Physics3DRigidBody)
function Physics3DConstraint:getBodyB() end
---* override the number of constraint solver iterations used to solve this constraint, -1 will use the default number of iterations, as specified in SolverInfo.m_numIterations
---@param overrideNumIterations int@ #int overrideNumIterations
---@return cc.Physics3DConstraint@ Physics3DConstraint#Physics3DConstraint self (return value: cc.Physics3DConstraint)
function Physics3DConstraint:setOverrideNumSolverIterations(overrideNumIterations) end
---* get constraint type
---@return int@ int#int ret (return value: int)
function Physics3DConstraint:getConstraintType() end
---* get user data
---@param userData void@ #void userData
---@return cc.Physics3DConstraint@ Physics3DConstraint#Physics3DConstraint self (return value: cc.Physics3DConstraint)
function Physics3DConstraint:setUserData(userData) end
---* 
---@return btTypedConstraint@ btTypedConstraint#btTypedConstraint ret (return value: btTypedConstraint)
function Physics3DConstraint:getbtContraint() end


---@class cc.Physics3DHingeConstraint :  Physics3DConstraint
local Physics3DHingeConstraint={ }
---@class Physics3DHingeConstraint : cc.Physics3DHingeConstraint
cc.Physics3DHingeConstraint=Physics3DHingeConstraint


---@param transA mat4_table@ #mat4_table transA
---@param transB mat4_table@ #mat4_table transB
---@return float@ float#float ret (return value: float)
---@overload fun(transA:mat4_table,transB:mat4_table):float
---@overload fun():float
function Physics3DHingeConstraint:getHingeAngle(transA,transB) end
---* get motor target velocity
---@return float@ float#float ret (return value: float)
function Physics3DHingeConstraint:getMotorTargetVelosity() end
---* get rigid body A's frame offset
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DHingeConstraint:getFrameOffsetA() end
---* get rigid body B's frame offset
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DHingeConstraint:getFrameOffsetB() end
---*  set max motor impulse 
---@param maxMotorImpulse float@ #float maxMotorImpulse
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:setMaxMotorImpulse(maxMotorImpulse) end
---*  enable angular motor 
---@param enableMotor boolean@ #bool enableMotor
---@param targetVelocity float@ #float targetVelocity
---@param maxMotorImpulse float@ #float maxMotorImpulse
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:enableAngularMotor(enableMotor,targetVelocity,maxMotorImpulse) end
---* get upper limit
---@return float@ float#float ret (return value: float)
function Physics3DHingeConstraint:getUpperLimit() end
---* get max motor impulse
---@return float@ float#float ret (return value: float)
function Physics3DHingeConstraint:getMaxMotorImpulse() end
---* get lower limit
---@return float@ float#float ret (return value: float)
function Physics3DHingeConstraint:getLowerLimit() end
---* set use frame offset
---@param frameOffsetOnOff boolean@ #bool frameOffsetOnOff
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:setUseFrameOffset(frameOffsetOnOff) end
---* get enable angular motor
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DHingeConstraint:getEnableAngularMotor() end
---* 
---@param enableMotor boolean@ #bool enableMotor
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:enableMotor(enableMotor) end
---* get B's frame
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DHingeConstraint:getBFrame() end
---* set frames for rigid body A and B
---@param frameA mat4_table@ #mat4_table frameA
---@param frameB mat4_table@ #mat4_table frameB
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:setFrames(frameA,frameB) end
---*  access for UseFrameOffset
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DHingeConstraint:getUseFrameOffset() end
---* set angular only
---@param angularOnly boolean@ #bool angularOnly
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:setAngularOnly(angularOnly) end
---*  set limit 
---@param low float@ #float low
---@param high float@ #float high
---@param _softness float@ #float _softness
---@param _biasFactor float@ #float _biasFactor
---@param _relaxationFactor float@ #float _relaxationFactor
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:setLimit(low,high,_softness,_biasFactor,_relaxationFactor) end
---* get angular only
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DHingeConstraint:getAngularOnly() end
---* set axis
---@param axisInA vec3_table@ #vec3_table axisInA
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:setAxis(axisInA) end
---* get A's frame 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DHingeConstraint:getAFrame() end
---@param rbA cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbA
---@param rbB cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbB
---@param pivotInA vec3_table@ #vec3_table pivotInA
---@param pivotInB vec3_table@ #vec3_table pivotInB
---@param axisInA vec3_table@ #vec3_table axisInA
---@param axisInB vec3_table@ #vec3_table axisInB
---@param useReferenceFrameA boolean@ #bool useReferenceFrameA
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint ret (return value: cc.Physics3DHingeConstraint)
---@overload fun(rbA:cc.Physics3DRigidBody,unkown1:vec3_table,pivotInA:vec3_table,unkown3:boolean):cc.Physics3DHingeConstraint
---@overload fun(rbA:cc.Physics3DRigidBody,unkown1:mat4_table,unkown2:boolean):cc.Physics3DHingeConstraint
---@overload fun(rbA:cc.Physics3DRigidBody,rbB:cc.Physics3DRigidBody,pivotInA:vec3_table,pivotInB:vec3_table,axisInA:vec3_table,axisInB:vec3_table,useReferenceFrameA:boolean):cc.Physics3DHingeConstraint
---@overload fun(rbA:cc.Physics3DRigidBody,rbB:cc.Physics3DRigidBody,unkown2:mat4_table,unkown3:mat4_table,unkown4:boolean):cc.Physics3DHingeConstraint
function Physics3DHingeConstraint:create(rbA,rbB,pivotInA,pivotInB,axisInA,axisInB,useReferenceFrameA) end
---* 
---@return cc.Physics3DHingeConstraint@ Physics3DHingeConstraint#Physics3DHingeConstraint self (return value: cc.Physics3DHingeConstraint)
function Physics3DHingeConstraint:Physics3DHingeConstraint() end


---@class cc.Physics3DObject :  Ref
local Physics3DObject={ }
---@class Physics3DObject : cc.Physics3DObject
cc.Physics3DObject=Physics3DObject


---*  Set the user data. 
---@param userData void@ #void userData
---@return cc.Physics3DObject@ Physics3DObject#Physics3DObject self (return value: cc.Physics3DObject)
function Physics3DObject:setUserData(userData) end
---*  Get the user data. 
---@return void@ void#void ret (return value: void)
function Physics3DObject:getUserData() end
---*  Get the Physics3DObject Type. 
---@return int@ int#int ret (return value: int)
function Physics3DObject:getObjType() end
---*  Internal method. Set the pointer of Physics3DWorld. 
---@param world cc.Physics3DWorld@ #cc.Physics3DWorld world
---@return cc.Physics3DObject@ Physics3DObject#Physics3DObject self (return value: cc.Physics3DObject)
function Physics3DObject:setPhysicsWorld(world) end
---*  Get the world matrix of Physics3DObject. 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DObject:getWorldTransform() end
---*  Get the pointer of Physics3DWorld. 
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld ret (return value: cc.Physics3DWorld)
function Physics3DObject:getPhysicsWorld() end
---*  Set the mask of Physics3DObject. 
---@param mask unsigned_int@ #unsigned int mask
---@return cc.Physics3DObject@ Physics3DObject#Physics3DObject self (return value: cc.Physics3DObject)
function Physics3DObject:setMask(mask) end
---*  Get the collision callback function. 
---@return function@ function#function ret (return value: function)
function Physics3DObject:getCollisionCallback() end
---*  Get the mask of Physics3DObject. 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Physics3DObject:getMask() end
---*  Check has collision callback function. 
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DObject:needCollisionCallback() end


---@class cc.Physics3DPointToPointConstraint :  Physics3DConstraint
local Physics3DPointToPointConstraint={ }
---@class Physics3DPointToPointConstraint : cc.Physics3DPointToPointConstraint
cc.Physics3DPointToPointConstraint=Physics3DPointToPointConstraint


---* get pivot point in A's local space
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DPointToPointConstraint:getPivotPointInA() end
---* get pivot point in B's local space
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DPointToPointConstraint:getPivotPointInB() end
---@param rbA cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbA
---@param rbB cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbB
---@param pivotPointInA vec3_table@ #vec3_table pivotPointInA
---@param pivotPointInB vec3_table@ #vec3_table pivotPointInB
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(rbA:cc.Physics3DRigidBody,rbB:cc.Physics3DRigidBody,pivotPointInA:vec3_table,pivotPointInB:vec3_table):boolean
---@overload fun(rbA:cc.Physics3DRigidBody,unkown1:vec3_table):boolean
function Physics3DPointToPointConstraint:init(rbA,rbB,pivotPointInA,pivotPointInB) end
---* set pivot point in A's local space
---@param pivotA vec3_table@ #vec3_table pivotA
---@return cc.Physics3DPointToPointConstraint@ Physics3DPointToPointConstraint#Physics3DPointToPointConstraint self (return value: cc.Physics3DPointToPointConstraint)
function Physics3DPointToPointConstraint:setPivotPointInA(pivotA) end
---* set pivot point in B's local space
---@param pivotB vec3_table@ #vec3_table pivotB
---@return cc.Physics3DPointToPointConstraint@ Physics3DPointToPointConstraint#Physics3DPointToPointConstraint self (return value: cc.Physics3DPointToPointConstraint)
function Physics3DPointToPointConstraint:setPivotPointInB(pivotB) end
---@param rbA cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbA
---@param rbB cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbB
---@param pivotPointInA vec3_table@ #vec3_table pivotPointInA
---@param pivotPointInB vec3_table@ #vec3_table pivotPointInB
---@return cc.Physics3DPointToPointConstraint@ Physics3DPointToPointConstraint#Physics3DPointToPointConstraint ret (return value: cc.Physics3DPointToPointConstraint)
---@overload fun(rbA:cc.Physics3DRigidBody,rbB:cc.Physics3DRigidBody,pivotPointInA:vec3_table,pivotPointInB:vec3_table):cc.Physics3DPointToPointConstraint
---@overload fun(rbA:cc.Physics3DRigidBody,unkown1:vec3_table):cc.Physics3DPointToPointConstraint
function Physics3DPointToPointConstraint:create(rbA,rbB,pivotPointInA,pivotPointInB) end
---* 
---@return cc.Physics3DPointToPointConstraint@ Physics3DPointToPointConstraint#Physics3DPointToPointConstraint self (return value: cc.Physics3DPointToPointConstraint)
function Physics3DPointToPointConstraint:Physics3DPointToPointConstraint() end


---@class cc.Physics3DRigidBody :  Physics3DObject
local Physics3DRigidBody={ }
---@class Physics3DRigidBody : cc.Physics3DRigidBody
cc.Physics3DRigidBody=Physics3DRigidBody


---*  Set the acceleration. 
---@param acceleration vec3_table@ #vec3_table acceleration
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setGravity(acceleration) end
---*  Get friction. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getFriction() end
---@param angFac vec3_table@ #vec3_table angFac
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
---@overload fun(unkown0:float):cc.Physics3DRigidBody
---@overload fun(angFac:vec3_table):cc.Physics3DRigidBody
function Physics3DRigidBody:setAngularFactor(angFac) end
---* 
---@param constraint cc.Physics3DConstraint@ #cc.Physics3DConstraint constraint
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:addConstraint(constraint) end
---*  Get the pointer of btRigidBody. 
---@return btRigidBody@ btRigidBody#btRigidBody ret (return value: btRigidBody)
function Physics3DRigidBody:getRigidBody() end
---*  Get total force. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getTotalForce() end
---*  Get the total number of constraints. 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Physics3DRigidBody:getConstraintCount() end
---* Apply a central force.<br>
---* param   force the value of the force
---@param force vec3_table@ #vec3_table force
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:applyCentralForce(force) end
---*  Set mass and inertia. 
---@param mass float@ #float mass
---@param inertia vec3_table@ #vec3_table inertia
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setMassProps(mass,inertia) end
---*  Set friction. 
---@param frict float@ #float frict
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setFriction(frict) end
---*  Set kinematic object. 
---@param kinematic boolean@ #bool kinematic
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setKinematic(kinematic) end
---*  Set linear damping and angular damping. 
---@param lin_damping float@ #float lin_damping
---@param ang_damping float@ #float ang_damping
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setDamping(lin_damping,ang_damping) end
---* Apply a impulse.<br>
---* param   impulse the value of the impulse<br>
---* param   rel_pos the position of the impulse
---@param impulse vec3_table@ #vec3_table impulse
---@param rel_pos vec3_table@ #vec3_table rel_pos
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:applyImpulse(impulse,rel_pos) end
---*  Check rigid body is kinematic object. 
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DRigidBody:isKinematic() end
---* Apply a torque.<br>
---* param   torque the value of the torque
---@param torque vec3_table@ #vec3_table torque
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:applyTorque(torque) end
---*  Set motion threshold, don't do continuous collision detection if the motion (in one step) is less then ccdMotionThreshold 
---@param ccdMotionThreshold float@ #float ccdMotionThreshold
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setCcdMotionThreshold(ccdMotionThreshold) end
---*  Set rolling friction. 
---@param frict float@ #float frict
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setRollingFriction(frict) end
---*  Get motion threshold. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getCcdMotionThreshold() end
---*  Get the linear factor. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getLinearFactor() end
---*  Damps the velocity, using the given linearDamping and angularDamping. 
---@param timeStep float@ #float timeStep
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:applyDamping(timeStep) end
---*  Get the angular velocity. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getAngularVelocity() end
---* 
---@param info cc.Physics3DRigidBodyDes@ #cc.Physics3DRigidBodyDes info
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DRigidBody:init(info) end
---* Apply a torque impulse.<br>
---* param   torque the value of the torque
---@param torque vec3_table@ #vec3_table torque
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:applyTorqueImpulse(torque) end
---*  Active or inactive. 
---@param active boolean@ #bool active
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setActive(active) end
---*  Set the linear factor. 
---@param linearFactor vec3_table@ #vec3_table linearFactor
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setLinearFactor(linearFactor) end
---*  Set the linear velocity. 
---@param lin_vel vec3_table@ #vec3_table lin_vel
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setLinearVelocity(lin_vel) end
---*  Get the linear velocity. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getLinearVelocity() end
---*  Set swept sphere radius. 
---@param radius float@ #float radius
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setCcdSweptSphereRadius(radius) end
---* Apply a force.<br>
---* param   force the value of the force<br>
---* param   rel_pos the position of the force
---@param force vec3_table@ #vec3_table force
---@param rel_pos vec3_table@ #vec3_table rel_pos
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:applyForce(force,rel_pos) end
---*  Set the angular velocity. 
---@param ang_vel vec3_table@ #vec3_table ang_vel
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setAngularVelocity(ang_vel) end
---* Apply a central impulse.<br>
---* param   impulse the value of the impulse
---@param impulse vec3_table@ #vec3_table impulse
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:applyCentralImpulse(impulse) end
---*  Get the acceleration. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getGravity() end
---*  Get rolling friction. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getRollingFriction() end
---*  Set the center of mass. 
---@param xform mat4_table@ #mat4_table xform
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setCenterOfMassTransform(xform) end
---*  Set the inverse of local inertia. 
---@param diagInvInertia vec3_table@ #vec3_table diagInvInertia
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setInvInertiaDiagLocal(diagInvInertia) end
---@param constraint cc.Physics3DConstraint@ #cc.Physics3DConstraint constraint
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
---@overload fun(unkown0:unsigned_int):cc.Physics3DRigidBody
---@overload fun(constraint:cc.Physics3DConstraint):cc.Physics3DRigidBody
function Physics3DRigidBody:removeConstraint(constraint) end
---*  Get total torque. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getTotalTorque() end
---*  Get inverse of mass. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getInvMass() end
---*  Get constraint by index. 
---@param idx unsigned_int@ #unsigned int idx
---@return cc.Physics3DConstraint@ Physics3DConstraint#Physics3DConstraint ret (return value: cc.Physics3DConstraint)
function Physics3DRigidBody:getConstraint(idx) end
---*  Get restitution. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getRestitution() end
---*  Get swept sphere radius. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getCcdSweptSphereRadius() end
---*  Get hit friction. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getHitFraction() end
---*  Get angular damping. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getAngularDamping() end
---*  Get the inverse of local inertia. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getInvInertiaDiagLocal() end
---*  Get the center of mass. 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DRigidBody:getCenterOfMassTransform() end
---*  Get the angular factor. 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DRigidBody:getAngularFactor() end
---*  Set restitution. 
---@param rest float@ #float rest
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setRestitution(rest) end
---*  Set hit friction. 
---@param hitFraction float@ #float hitFraction
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:setHitFraction(hitFraction) end
---*  Get linear damping. 
---@return float@ float#float ret (return value: float)
function Physics3DRigidBody:getLinearDamping() end
---*  override. 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DRigidBody:getWorldTransform() end
---* 
---@return cc.Physics3DRigidBody@ Physics3DRigidBody#Physics3DRigidBody self (return value: cc.Physics3DRigidBody)
function Physics3DRigidBody:Physics3DRigidBody() end


---@class cc.Physics3DShape :  Ref
local Physics3DShape={ }
---@class Physics3DShape : cc.Physics3DShape
cc.Physics3DShape=Physics3DShape


---* 
---@return btCollisionShape@ btCollisionShape#btCollisionShape ret (return value: btCollisionShape)
function Physics3DShape:getbtShape() end
---* 
---@param radius float@ #float radius
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DShape:initSphere(radius) end
---* 
---@param ext vec3_table@ #vec3_table ext
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DShape:initBox(ext) end
---* 
---@param radius float@ #float radius
---@param height float@ #float height
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DShape:initCapsule(radius,height) end
---* 
---@param radius float@ #float radius
---@param height float@ #float height
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DShape:initCylinder(radius,height) end
---* get shape type
---@return int@ int#int ret (return value: int)
function Physics3DShape:getShapeType() end
---* create box shape<br>
---* param extent The extent of sphere.
---@param extent vec3_table@ #vec3_table extent
---@return cc.Physics3DShape@ Physics3DShape#Physics3DShape ret (return value: cc.Physics3DShape)
function Physics3DShape:createBox(extent) end
---* create cylinder shape<br>
---* param radius The radius of cylinder.<br>
---* param height The height.
---@param radius float@ #float radius
---@param height float@ #float height
---@return cc.Physics3DShape@ Physics3DShape#Physics3DShape ret (return value: cc.Physics3DShape)
function Physics3DShape:createCylinder(radius,height) end
---* create convex hull<br>
---* param points The vertices of convex hull<br>
---* param numPoints The number of vertices.
---@param points vec3_table@ #vec3_table points
---@param numPoints int@ #int numPoints
---@return cc.Physics3DShape@ Physics3DShape#Physics3DShape ret (return value: cc.Physics3DShape)
function Physics3DShape:createConvexHull(points,numPoints) end
---* create capsule shape<br>
---* param radius The radius of capsule.<br>
---* param height The height (cylinder part).
---@param radius float@ #float radius
---@param height float@ #float height
---@return cc.Physics3DShape@ Physics3DShape#Physics3DShape ret (return value: cc.Physics3DShape)
function Physics3DShape:createCapsule(radius,height) end
---* create sphere shape<br>
---* param radius The radius of sphere.
---@param radius float@ #float radius
---@return cc.Physics3DShape@ Physics3DShape#Physics3DShape ret (return value: cc.Physics3DShape)
function Physics3DShape:createSphere(radius) end
---* 
---@return cc.Physics3DShape@ Physics3DShape#Physics3DShape self (return value: cc.Physics3DShape)
function Physics3DShape:Physics3DShape() end


---@class cc.Physics3DSliderConstraint :  Physics3DConstraint
local Physics3DSliderConstraint={ }
---@class Physics3DSliderConstraint : cc.Physics3DSliderConstraint
cc.Physics3DSliderConstraint=Physics3DSliderConstraint


---* 
---@param onOff boolean@ #bool onOff
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setPoweredAngMotor(onOff) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getDampingLimAng() end
---* 
---@param restitutionOrthoLin float@ #float restitutionOrthoLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setRestitutionOrthoLin(restitutionOrthoLin) end
---* 
---@param restitutionDirLin float@ #float restitutionDirLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setRestitutionDirLin(restitutionDirLin) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getLinearPos() end
---* get A's frame offset
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DSliderConstraint:getFrameOffsetA() end
---* get B's frame offset
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Physics3DSliderConstraint:getFrameOffsetB() end
---* 
---@param onOff boolean@ #bool onOff
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setPoweredLinMotor(onOff) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getDampingDirAng() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getRestitutionLimLin() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getSoftnessOrthoAng() end
---* 
---@param softnessOrthoLin float@ #float softnessOrthoLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setSoftnessOrthoLin(softnessOrthoLin) end
---* 
---@param softnessLimLin float@ #float softnessLimLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setSoftnessLimLin(softnessLimLin) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getAngularPos() end
---* 
---@param restitutionLimAng float@ #float restitutionLimAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setRestitutionLimAng(restitutionLimAng) end
---* set upper linear limit
---@param upperLimit float@ #float upperLimit
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setUpperLinLimit(upperLimit) end
---* 
---@param dampingDirLin float@ #float dampingDirLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setDampingDirLin(dampingDirLin) end
---* get upper angular limit
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getUpperAngLimit() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getDampingDirLin() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getSoftnessDirAng() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DSliderConstraint:getPoweredAngMotor() end
---* set lower angular limit
---@param lowerLimit float@ #float lowerLimit
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setLowerAngLimit(lowerLimit) end
---* set upper angular limit
---@param upperLimit float@ #float upperLimit
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setUpperAngLimit(upperLimit) end
---* 
---@param targetLinMotorVelocity float@ #float targetLinMotorVelocity
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setTargetLinMotorVelocity(targetLinMotorVelocity) end
---* 
---@param dampingLimAng float@ #float dampingLimAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setDampingLimAng(dampingLimAng) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getRestitutionLimAng() end
---*  access for UseFrameOffset
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DSliderConstraint:getUseFrameOffset() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getSoftnessOrthoLin() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getDampingOrthoAng() end
---* set use frame offset
---@param frameOffsetOnOff boolean@ #bool frameOffsetOnOff
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setUseFrameOffset(frameOffsetOnOff) end
---* set lower linear limit
---@param lowerLimit float@ #float lowerLimit
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setLowerLinLimit(lowerLimit) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getRestitutionDirLin() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getTargetLinMotorVelocity() end
---* get lower linear limit
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getLowerLinLimit() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getSoftnessLimLin() end
---* 
---@param dampingOrthoAng float@ #float dampingOrthoAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setDampingOrthoAng(dampingOrthoAng) end
---* 
---@param softnessDirAng float@ #float softnessDirAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setSoftnessDirAng(softnessDirAng) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DSliderConstraint:getPoweredLinMotor() end
---* 
---@param restitutionOrthoAng float@ #float restitutionOrthoAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setRestitutionOrthoAng(restitutionOrthoAng) end
---* 
---@param dampingDirAng float@ #float dampingDirAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setDampingDirAng(dampingDirAng) end
---* set frames for rigid body A and B
---@param frameA mat4_table@ #mat4_table frameA
---@param frameB mat4_table@ #mat4_table frameB
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setFrames(frameA,frameB) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getRestitutionOrthoAng() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getMaxAngMotorForce() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getDampingOrthoLin() end
---* get upper linear limit
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getUpperLinLimit() end
---* 
---@param maxLinMotorForce float@ #float maxLinMotorForce
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setMaxLinMotorForce(maxLinMotorForce) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getRestitutionOrthoLin() end
---* 
---@param targetAngMotorVelocity float@ #float targetAngMotorVelocity
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setTargetAngMotorVelocity(targetAngMotorVelocity) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getSoftnessLimAng() end
---* 
---@param restitutionDirAng float@ #float restitutionDirAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setRestitutionDirAng(restitutionDirAng) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getDampingLimLin() end
---* get lower angular limit
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getLowerAngLimit() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getRestitutionDirAng() end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getTargetAngMotorVelocity() end
---* 
---@param restitutionLimLin float@ #float restitutionLimLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setRestitutionLimLin(restitutionLimLin) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getMaxLinMotorForce() end
---* 
---@param dampingOrthoLin float@ #float dampingOrthoLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setDampingOrthoLin(dampingOrthoLin) end
---* 
---@param softnessOrthoAng float@ #float softnessOrthoAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setSoftnessOrthoAng(softnessOrthoAng) end
---* 
---@param dampingLimLin float@ #float dampingLimLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setDampingLimLin(dampingLimLin) end
---* 
---@param softnessDirLin float@ #float softnessDirLin
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setSoftnessDirLin(softnessDirLin) end
---* 
---@param maxAngMotorForce float@ #float maxAngMotorForce
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setMaxAngMotorForce(maxAngMotorForce) end
---* 
---@return float@ float#float ret (return value: float)
function Physics3DSliderConstraint:getSoftnessDirLin() end
---* 
---@param softnessLimAng float@ #float softnessLimAng
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:setSoftnessLimAng(softnessLimAng) end
---* use A's frame as linear reference
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DSliderConstraint:getUseLinearReferenceFrameA() end
---* create slider constraint<br>
---* param rbA rigid body A<br>
---* param rbB rigid body B<br>
---* param frameInA frame in A's local space<br>
---* param frameInB frame in B's local space<br>
---* param useLinearReferenceFrameA use fixed frame A for linear limits
---@param rbA cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbA
---@param rbB cc.Physics3DRigidBody@ #cc.Physics3DRigidBody rbB
---@param frameInA mat4_table@ #mat4_table frameInA
---@param frameInB mat4_table@ #mat4_table frameInB
---@param useLinearReferenceFrameA boolean@ #bool useLinearReferenceFrameA
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint ret (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:create(rbA,rbB,frameInA,frameInB,useLinearReferenceFrameA) end
---* 
---@return cc.Physics3DSliderConstraint@ Physics3DSliderConstraint#Physics3DSliderConstraint self (return value: cc.Physics3DSliderConstraint)
function Physics3DSliderConstraint:Physics3DSliderConstraint() end


---@class cc.Physics3DWorld :  Ref
local Physics3DWorld={ }
---@class Physics3DWorld : cc.Physics3DWorld
cc.Physics3DWorld=Physics3DWorld


---*  set gravity for the physics world 
---@param gravity vec3_table@ #vec3_table gravity
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:setGravity(gravity) end
---*  Simulate one frame. 
---@param dt float@ #float dt
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:stepSimulate(dt) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DWorld:needCollisionChecking() end
---* 
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:collisionChecking() end
---* 
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:setGhostPairCallback() end
---*  Remove all Physics3DObjects. 
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:removeAllPhysics3DObjects() end
---*  Check debug drawing is enabled. 
---@return boolean@ bool#bool ret (return value: bool)
function Physics3DWorld:isDebugDrawEnabled() end
---*  Remove all Physics3DConstraint. 
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:removeAllPhysics3DConstraints() end
---*  get current gravity 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Physics3DWorld:getGravity() end
---*  Remove a Physics3DConstraint. 
---@param constraint cc.Physics3DConstraint@ #cc.Physics3DConstraint constraint
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:removePhysics3DConstraint(constraint) end
---*  Add a Physics3DObject. 
---@param physicsObj cc.Physics3DObject@ #cc.Physics3DObject physicsObj
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:addPhysics3DObject(physicsObj) end
---*  Enable or disable debug drawing. 
---@param enableDebugDraw boolean@ #bool enableDebugDraw
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:setDebugDrawEnable(enableDebugDraw) end
---*  Remove a Physics3DObject. 
---@param physicsObj cc.Physics3DObject@ #cc.Physics3DObject physicsObj
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:removePhysics3DObject(physicsObj) end
---*  Add a Physics3DConstraint. 
---@param constraint cc.Physics3DConstraint@ #cc.Physics3DConstraint constraint
---@param disableCollisionsBetweenLinkedObjs boolean@ #bool disableCollisionsBetweenLinkedObjs
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:addPhysics3DConstraint(constraint,disableCollisionsBetweenLinkedObjs) end
---*  Internal method, the updater of debug drawing, need called each frame. 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:debugDraw(renderer) end
---* 
---@return cc.Physics3DWorld@ Physics3DWorld#Physics3DWorld self (return value: cc.Physics3DWorld)
function Physics3DWorld:Physics3DWorld() end


---@class cc.PhysicsBody :  Component
local PhysicsBody={ }
---@class PhysicsBody : cc.PhysicsBody
cc.PhysicsBody=PhysicsBody


---*  Whether this physics body is affected by the physics world's gravitational force. 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsBody:isGravityEnabled() end
---* reset all the force applied to body. 
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:resetForces() end
---*  get the max of velocity 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getVelocityLimit() end
---* Set the group of body.<br>
---* Collision groups let you specify an integral group index. You can have all fixtures with the same group index always collide (positive index) or never collide (negative index).<br>
---* It have high priority than bit masks.
---@param group int@ #int group
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setGroup(group) end
---*  Get the body mass. 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getMass() end
---* Return bitmask of first shape.<br>
---* return If there is no shape in body, return default value.(0xFFFFFFFF)
---@return int@ int#int ret (return value: int)
function PhysicsBody:getCollisionBitmask() end
---*  set the body rotation offset 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getRotationOffset() end
---*  get the body rotation. 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getRotation() end
---*  Get the body moment of inertia. 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getMoment() end
---* Applies a immediate force to body.<br>
---* param impulse The impulse is applies to this body.<br>
---* param offset A Vec2 object, it is the offset from the body's center of gravity in world coordinates.
---@param impulse vec2_table@ #vec2_table impulse
---@param offset vec2_table@ #vec2_table offset
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:applyImpulse(impulse,offset) end
---*  set body rotation offset, it's the rotation witch relative to node 
---@param rotation float@ #float rotation
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setRotationOffset(rotation) end
---* Applies a continuous force to body.<br>
---* param force The force is applies to this body.<br>
---* param offset A Vec2 object, it is the offset from the body's center of gravity in world coordinates.
---@param force vec2_table@ #vec2_table force
---@param offset vec2_table@ #vec2_table offset
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:applyForce(force,offset) end
---* brief Add a shape to body.<br>
---* param shape The shape to be added.<br>
---* param addMassAndMoment If this is true, the shape's mass and moment will be added to body. The default is true.<br>
---* return This shape's pointer if added success or nullptr if failed.
---@param shape cc.PhysicsShape@ #cc.PhysicsShape shape
---@param addMassAndMoment boolean@ #bool addMassAndMoment
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape ret (return value: cc.PhysicsShape)
function PhysicsBody:addShape(shape,addMassAndMoment) end
---* Applies a torque force to body.<br>
---* param torque The torque is applies to this body.
---@param torque float@ #float torque
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:applyTorque(torque) end
---*  get the max of angular velocity 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getAngularVelocityLimit() end
---*  set the max of angular velocity 
---@param limit float@ #float limit
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setAngularVelocityLimit(limit) end
---*  Get the velocity of a body. 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsBody:getVelocity() end
---*  get linear damping. 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getLinearDamping() end
---* Remove all shapes.<br>
---* param reduceMassAndMoment If this is true, the body mass and moment will be reduced by shape. The default is true.
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:removeAllShapes() end
---* Set angular damping.<br>
---* It is used to simulate fluid or air friction forces on the body.<br>
---* param damping The value is 0.0f to 1.0f.
---@param damping float@ #float damping
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setAngularDamping(damping) end
---*  set the max of velocity 
---@param limit float@ #float limit
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setVelocityLimit(limit) end
---*  set body to rest 
---@param rest boolean@ #bool rest
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setResting(rest) end
---*  get body position offset. 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsBody:getPositionOffset() end
---* A mask that defines which categories this physics body belongs to.<br>
---* Every physics body in a scene can be assigned to up to 32 different categories, each corresponding to a bit in the bit mask. You define the mask values used in your game. In conjunction with the collisionBitMask and contactTestBitMask properties, you define which physics bodies interact with each other and when your game is notified of these interactions.<br>
---* param bitmask An integer number, the default value is 0xFFFFFFFF (all bits set).
---@param bitmask int@ #int bitmask
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setCategoryBitmask(bitmask) end
---*  get the world body added to. 
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld ret (return value: cc.PhysicsWorld)
function PhysicsBody:getWorld() end
---*  get the angular velocity of a body 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getAngularVelocity() end
---*  get the body position. 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsBody:getPosition() end
---*  Set the body is affected by the physics world's gravitational force or not. 
---@param enable boolean@ #bool enable
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setGravityEnable(enable) end
---* Return group of first shape.<br>
---* return If there is no shape in body, return default value.(0) 
---@return int@ int#int ret (return value: int)
function PhysicsBody:getGroup() end
---* brief Set the body moment of inertia.<br>
---* note If you need add/subtract moment to body, don't use setMoment(getMoment() +/- moment), because the moment of body may be equal to PHYSICS_INFINITY, it will cause some unexpected result, please use addMoment() instead.
---@param moment float@ #float moment
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setMoment(moment) end
---*  Get the body's tag. 
---@return int@ int#int ret (return value: int)
function PhysicsBody:getTag() end
---*  Convert the local point to world. 
---@param point vec2_table@ #vec2_table point
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsBody:local2World(point) end
---* Return bitmask of first shape.<br>
---* return If there is no shape in body, return default value.(0xFFFFFFFF)
---@return int@ int#int ret (return value: int)
function PhysicsBody:getCategoryBitmask() end
---* brief Set dynamic to body.<br>
---* A dynamic body will effect with gravity.
---@param dynamic boolean@ #bool dynamic
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setDynamic(dynamic) end
---* Get the first shape of the body shapes.<br>
---* return The first shape in this body.
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape ret (return value: cc.PhysicsShape)
function PhysicsBody:getFirstShape() end
---* Get the body shapes.<br>
---* return A Vector<PhysicsShape*> object contains PhysicsShape pointer.
---@return array_table@ array_table#array_table ret (return value: array_table)
function PhysicsBody:getShapes() end
---* Return bitmask of first shape.<br>
---* return If there is no shape in body, return default value.(0x00000000)
---@return int@ int#int ret (return value: int)
function PhysicsBody:getContactTestBitmask() end
---* Set the angular velocity of a body.<br>
---* param velocity The angular velocity is set to this body.
---@param velocity float@ #float velocity
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setAngularVelocity(velocity) end
---*  Convert the world point to local. 
---@param point vec2_table@ #vec2_table point
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsBody:world2Local(point) end
---@param shape cc.PhysicsShape@ #cc.PhysicsShape shape
---@param reduceMassAndMoment boolean@ #bool reduceMassAndMoment
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
---@overload fun(unkown0:int,reduceMassAndMoment:boolean):cc.PhysicsBody
---@overload fun(shape:cc.PhysicsShape,reduceMassAndMoment:boolean):cc.PhysicsBody
function PhysicsBody:removeShape(shape,reduceMassAndMoment) end
---* brief Set the body mass.<br>
---* attention If you need add/subtract mass to body, don't use setMass(getMass() +/- mass), because the mass of body may be equal to PHYSICS_INFINITY, it will cause some unexpected result, please use addMass() instead.
---@param mass float@ #float mass
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setMass(mass) end
---* brief Add moment of inertia to body.<br>
---* param moment If _moment(moment of the body) == PHYSICS_INFINITY, it remains.<br>
---* if moment == PHYSICS_INFINITY, _moment will be PHYSICS_INFINITY.<br>
---* if moment == -PHYSICS_INFINITY, _moment will not change.<br>
---* if moment + _moment <= 0, _moment will equal to MASS_DEFAULT(1.0)<br>
---* other wise, moment = moment + _moment;
---@param moment float@ #float moment
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:addMoment(moment) end
---* Set the velocity of a body.<br>
---* param velocity The velocity is set to this body.
---@param velocity vec2_table@ #vec2_table velocity
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setVelocity(velocity) end
---* Set linear damping.<br>
---* it is used to simulate fluid or air friction forces on the body.<br>
---* param damping The value is 0.0f to 1.0f.
---@param damping float@ #float damping
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setLinearDamping(damping) end
---* A mask that defines which categories of physics bodies can collide with this physics body.<br>
---* When two physics bodies contact each other, a collision may occur. This body's collision mask is compared to the other body's category mask by performing a logical AND operation. If the result is a non-zero value, then this body is affected by the collision. Each body independently chooses whether it wants to be affected by the other body. For example, you might use this to avoid collision calculations that would make negligible changes to a body's velocity.<br>
---* param bitmask An integer number, the default value is 0xFFFFFFFF (all bits set).
---@param bitmask int@ #int bitmask
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setCollisionBitmask(bitmask) end
---*  set body position offset, it's the position witch relative to node 
---@param position vec2_table@ #vec2_table position
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setPositionOffset(position) end
---*  Set the body is allow rotation or not 
---@param enable boolean@ #bool enable
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setRotationEnable(enable) end
---*  Whether the body can rotation. 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsBody:isRotationEnabled() end
---*  Get the rigid body of chipmunk. 
---@return cpBody@ cpBody#cpBody ret (return value: cpBody)
function PhysicsBody:getCPBody() end
---*  Get angular damping. 
---@return float@ float#float ret (return value: float)
function PhysicsBody:getAngularDamping() end
---*  Get the angular velocity of a body at a local point.
---@param point vec2_table@ #vec2_table point
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsBody:getVelocityAtLocalPoint(point) end
---*  Whether the body is at rest. 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsBody:isResting() end
---* brief Add mass to body.<br>
---* param mass If _mass(mass of the body) == PHYSICS_INFINITY, it remains.<br>
---* if mass == PHYSICS_INFINITY, _mass will be PHYSICS_INFINITY.<br>
---* if mass == -PHYSICS_INFINITY, _mass will not change.<br>
---* if mass + _mass <= 0, _mass will equal to MASS_DEFAULT(1.0)<br>
---* other wise, mass = mass + _mass;
---@param mass float@ #float mass
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:addMass(mass) end
---* get the shape of the body.<br>
---* param   tag   An integer number that identifies a PhysicsShape object.<br>
---* return A PhysicsShape object pointer or nullptr if no shapes were found.
---@param tag int@ #int tag
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape ret (return value: cc.PhysicsShape)
function PhysicsBody:getShape(tag) end
---*  set the body's tag. 
---@param tag int@ #int tag
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setTag(tag) end
---*  get the angular velocity of a body at a world point 
---@param point vec2_table@ #vec2_table point
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsBody:getVelocityAtWorldPoint(point) end
---* A mask that defines which categories of bodies cause intersection notifications with this physics body.<br>
---* When two bodies share the same space, each body's category mask is tested against the other body's contact mask by performing a logical AND operation. If either comparison results in a non-zero value, an PhysicsContact object is created and passed to the physics world’s delegate. For best performance, only set bits in the contacts mask for interactions you are interested in.<br>
---* param bitmask An integer number, the default value is 0x00000000 (all bits cleared).
---@param bitmask int@ #int bitmask
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setContactTestBitmask(bitmask) end
---*  remove the body from the world it added to 
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:removeFromWorld() end
---* brief Test the body is dynamic or not.<br>
---* A dynamic body will effect with gravity.
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsBody:isDynamic() end
---*  get the node the body set to. 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function PhysicsBody:getNode() end
---* Create a body contains a box shape.<br>
---* param   size Size contains this box's width and height.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   offset A Vec2 object, it is the offset from the body's center of gravity in body local coordinates.<br>
---* return  An autoreleased PhysicsBody object pointer.
---@param size size_table@ #size_table size
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param offset vec2_table@ #vec2_table offset
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsBody:createBox(size,material,offset) end
---* Create a body contains a EdgeSegment shape.<br>
---* param   a It's the edge's begin position.<br>
---* param   b It's the edge's end position.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   border It's a edge's border width.<br>
---* return  An autoreleased PhysicsBody object pointer.
---@param a vec2_table@ #vec2_table a
---@param b vec2_table@ #vec2_table b
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param border float@ #float border
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsBody:createEdgeSegment(a,b,material,border) end
---@param mass float@ #float mass
---@param moment float@ #float moment
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
---@overload fun(mass:float):cc.PhysicsBody
---@overload fun():cc.PhysicsBody
---@overload fun(mass:float,moment:float):cc.PhysicsBody
function PhysicsBody:create(mass,moment) end
---* Create a body contains a EdgeBox shape.<br>
---* param   size Size contains this box's width and height.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   border It's a edge's border width.<br>
---* param   offset A Vec2 object, it is the offset from the body's center of gravity in body local coordinates.<br>
---* return  An autoreleased PhysicsBody object pointer.
---@param size size_table@ #size_table size
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param border float@ #float border
---@param offset vec2_table@ #vec2_table offset
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsBody:createEdgeBox(size,material,border,offset) end
---* Create a body contains a circle.<br>
---* param   radius A float number, it is the circle's radius.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   offset A Vec2 object, it is the offset from the body's center of gravity in body local coordinates.<br>
---* return  An autoreleased PhysicsBody object pointer.
---@param radius float@ #float radius
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param offset vec2_table@ #vec2_table offset
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsBody:createCircle(radius,material,offset) end
---* Set the enable value.<br>
---* If the body it isn't enabled, it will not has simulation by world.
---@param enable boolean@ #bool enable
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:setEnabled(enable) end
---* 
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:onRemove() end
---* 
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:onEnter() end
---* 
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:onExit() end
---* 
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody self (return value: cc.PhysicsBody)
function PhysicsBody:onAdd() end


---@class cc.PhysicsContact :  EventCustom
local PhysicsContact={ }
---@class PhysicsContact : cc.PhysicsContact
cc.PhysicsContact=PhysicsContact


---*  Get contact data. 
---@return cc.PhysicsContactData@ PhysicsContactData#PhysicsContactData ret (return value: cc.PhysicsContactData)
function PhysicsContact:getContactData() end
---*  Get the event code 
---@return int@ int#int ret (return value: int)
function PhysicsContact:getEventCode() end
---*  Get previous contact data 
---@return cc.PhysicsContactData@ PhysicsContactData#PhysicsContactData ret (return value: cc.PhysicsContactData)
function PhysicsContact:getPreContactData() end
---*  Get contact shape A. 
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape ret (return value: cc.PhysicsShape)
function PhysicsContact:getShapeA() end
---*  Get contact shape B. 
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape ret (return value: cc.PhysicsShape)
function PhysicsContact:getShapeB() end


---@class cc.PhysicsContactPostSolve 
local PhysicsContactPostSolve={ }
---@class PhysicsContactPostSolve : cc.PhysicsContactPostSolve
cc.PhysicsContactPostSolve=PhysicsContactPostSolve


---*  Get friction between two bodies.
---@return float@ float#float ret (return value: float)
function PhysicsContactPostSolve:getFriction() end
---*  Get surface velocity between two bodies.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsContactPostSolve:getSurfaceVelocity() end
---*  Get restitution between two bodies.
---@return float@ float#float ret (return value: float)
function PhysicsContactPostSolve:getRestitution() end


---@class cc.PhysicsContactPreSolve 
local PhysicsContactPreSolve={ }
---@class PhysicsContactPreSolve : cc.PhysicsContactPreSolve
cc.PhysicsContactPreSolve=PhysicsContactPreSolve


---*  Get friction between two bodies.
---@return float@ float#float ret (return value: float)
function PhysicsContactPreSolve:getFriction() end
---*  Get restitution between two bodies.
---@return float@ float#float ret (return value: float)
function PhysicsContactPreSolve:getRestitution() end
---*  Set the friction.
---@param friction float@ #float friction
---@return cc.PhysicsContactPreSolve@ PhysicsContactPreSolve#PhysicsContactPreSolve self (return value: cc.PhysicsContactPreSolve)
function PhysicsContactPreSolve:setFriction(friction) end
---*  Ignore the rest of the contact presolve and postsolve callbacks. 
---@return cc.PhysicsContactPreSolve@ PhysicsContactPreSolve#PhysicsContactPreSolve self (return value: cc.PhysicsContactPreSolve)
function PhysicsContactPreSolve:ignore() end
---*  Get surface velocity between two bodies.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsContactPreSolve:getSurfaceVelocity() end
---*  Set the surface velocity.
---@param velocity vec2_table@ #vec2_table velocity
---@return cc.PhysicsContactPreSolve@ PhysicsContactPreSolve#PhysicsContactPreSolve self (return value: cc.PhysicsContactPreSolve)
function PhysicsContactPreSolve:setSurfaceVelocity(velocity) end
---*  Set the restitution.
---@param restitution float@ #float restitution
---@return cc.PhysicsContactPreSolve@ PhysicsContactPreSolve#PhysicsContactPreSolve self (return value: cc.PhysicsContactPreSolve)
function PhysicsContactPreSolve:setRestitution(restitution) end


---@class cc.PhysicsJoint 
local PhysicsJoint={ }
---@class PhysicsJoint : cc.PhysicsJoint
cc.PhysicsJoint=PhysicsJoint


---* Get physics body a connected to this joint.
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsJoint:getBodyA() end
---* Get physics body b connected to this joint.
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsJoint:getBodyB() end
---*  Get the max force setting. 
---@return float@ float#float ret (return value: float)
function PhysicsJoint:getMaxForce() end
---*  Set the max force between two bodies. 
---@param force float@ #float force
---@return cc.PhysicsJoint@ PhysicsJoint#PhysicsJoint self (return value: cc.PhysicsJoint)
function PhysicsJoint:setMaxForce(force) end
---*  Determines if the joint is enable. 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJoint:isEnabled() end
---*  Enable/Disable the joint. 
---@param enable boolean@ #bool enable
---@return cc.PhysicsJoint@ PhysicsJoint#PhysicsJoint self (return value: cc.PhysicsJoint)
function PhysicsJoint:setEnable(enable) end
---*  Enable/disable the collision between two bodies. 
---@param enable boolean@ #bool enable
---@return cc.PhysicsJoint@ PhysicsJoint#PhysicsJoint self (return value: cc.PhysicsJoint)
function PhysicsJoint:setCollisionEnable(enable) end
---* Get the physics world.
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld ret (return value: cc.PhysicsWorld)
function PhysicsJoint:getWorld() end
---* Set this joint's tag.<br>
---* param tag An integer number that identifies a PhysicsJoint.
---@param tag int@ #int tag
---@return cc.PhysicsJoint@ PhysicsJoint#PhysicsJoint self (return value: cc.PhysicsJoint)
function PhysicsJoint:setTag(tag) end
---*  Remove the joint from the world. 
---@return cc.PhysicsJoint@ PhysicsJoint#PhysicsJoint self (return value: cc.PhysicsJoint)
function PhysicsJoint:removeFormWorld() end
---*  Determines if the collision is enable. 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJoint:isCollisionEnabled() end
---* Get this joint's tag.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsJoint:getTag() end


---@class cc.PhysicsJointDistance :  PhysicsJoint
local PhysicsJointDistance={ }
---@class PhysicsJointDistance : cc.PhysicsJointDistance
cc.PhysicsJointDistance=PhysicsJointDistance


---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointDistance:createConstraints() end
---*  Set the distance of the anchor points.
---@param distance float@ #float distance
---@return cc.PhysicsJointDistance@ PhysicsJointDistance#PhysicsJointDistance self (return value: cc.PhysicsJointDistance)
function PhysicsJointDistance:setDistance(distance) end
---*  Get the distance of the anchor points.
---@return float@ float#float ret (return value: float)
function PhysicsJointDistance:getDistance() end
---*  Create a fixed distance joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param anchr1 Anchr1 is the anchor point on body a.<br>
---* param anchr2 Anchr2 is the anchor point on body b.<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param anchr1 vec2_table@ #vec2_table anchr1
---@param anchr2 vec2_table@ #vec2_table anchr2
---@return cc.PhysicsJointDistance@ PhysicsJointDistance#PhysicsJointDistance ret (return value: cc.PhysicsJointDistance)
function PhysicsJointDistance:construct(a,b,anchr1,anchr2) end


---@class cc.PhysicsJointFixed :  PhysicsJoint
local PhysicsJointFixed={ }
---@class PhysicsJointFixed : cc.PhysicsJointFixed
cc.PhysicsJointFixed=PhysicsJointFixed


---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointFixed:createConstraints() end
---*  Create a fixed joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param anchr It's the pivot position.<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param anchr vec2_table@ #vec2_table anchr
---@return cc.PhysicsJointFixed@ PhysicsJointFixed#PhysicsJointFixed ret (return value: cc.PhysicsJointFixed)
function PhysicsJointFixed:construct(a,b,anchr) end


---@class cc.PhysicsJointGear :  PhysicsJoint
local PhysicsJointGear={ }
---@class PhysicsJointGear : cc.PhysicsJointGear
cc.PhysicsJointGear=PhysicsJointGear


---*  Set the ratio.
---@param ratchet float@ #float ratchet
---@return cc.PhysicsJointGear@ PhysicsJointGear#PhysicsJointGear self (return value: cc.PhysicsJointGear)
function PhysicsJointGear:setRatio(ratchet) end
---*  Get the angular offset of the two bodies.
---@return float@ float#float ret (return value: float)
function PhysicsJointGear:getPhase() end
---*  Set the angular offset of the two bodies.
---@param phase float@ #float phase
---@return cc.PhysicsJointGear@ PhysicsJointGear#PhysicsJointGear self (return value: cc.PhysicsJointGear)
function PhysicsJointGear:setPhase(phase) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointGear:createConstraints() end
---*  Get the ratio.
---@return float@ float#float ret (return value: float)
function PhysicsJointGear:getRatio() end
---*  Create a gear joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param phase Phase is the initial angular offset of the two bodies.<br>
---* param ratio Ratio is always measured in absolute terms.<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param phase float@ #float phase
---@param ratio float@ #float ratio
---@return cc.PhysicsJointGear@ PhysicsJointGear#PhysicsJointGear ret (return value: cc.PhysicsJointGear)
function PhysicsJointGear:construct(a,b,phase,ratio) end


---@class cc.PhysicsJointGroove :  PhysicsJoint
local PhysicsJointGroove={ }
---@class PhysicsJointGroove : cc.PhysicsJointGroove
cc.PhysicsJointGroove=PhysicsJointGroove


---*  Set the anchor point on body b.
---@param anchr2 vec2_table@ #vec2_table anchr2
---@return cc.PhysicsJointGroove@ PhysicsJointGroove#PhysicsJointGroove self (return value: cc.PhysicsJointGroove)
function PhysicsJointGroove:setAnchr2(anchr2) end
---*  Set the line begin position
---@param grooveA vec2_table@ #vec2_table grooveA
---@return cc.PhysicsJointGroove@ PhysicsJointGroove#PhysicsJointGroove self (return value: cc.PhysicsJointGroove)
function PhysicsJointGroove:setGrooveA(grooveA) end
---*  Set the line end position
---@param grooveB vec2_table@ #vec2_table grooveB
---@return cc.PhysicsJointGroove@ PhysicsJointGroove#PhysicsJointGroove self (return value: cc.PhysicsJointGroove)
function PhysicsJointGroove:setGrooveB(grooveB) end
---*  Get the line begin position
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsJointGroove:getGrooveA() end
---*  Get the line end position
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsJointGroove:getGrooveB() end
---*  Get the anchor point on body b.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsJointGroove:getAnchr2() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointGroove:createConstraints() end
---*  Create a groove joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param grooveA The line begin position.<br>
---* param grooveB The line end position.<br>
---* param anchr2 Anchr2 is the anchor point on body b.<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param grooveA vec2_table@ #vec2_table grooveA
---@param grooveB vec2_table@ #vec2_table grooveB
---@param anchr2 vec2_table@ #vec2_table anchr2
---@return cc.PhysicsJointGroove@ PhysicsJointGroove#PhysicsJointGroove ret (return value: cc.PhysicsJointGroove)
function PhysicsJointGroove:construct(a,b,grooveA,grooveB,anchr2) end


---@class cc.PhysicsJointLimit :  PhysicsJoint
local PhysicsJointLimit={ }
---@class PhysicsJointLimit : cc.PhysicsJointLimit
cc.PhysicsJointLimit=PhysicsJointLimit


---*  Set the anchor point on body b.
---@param anchr2 vec2_table@ #vec2_table anchr2
---@return cc.PhysicsJointLimit@ PhysicsJointLimit#PhysicsJointLimit self (return value: cc.PhysicsJointLimit)
function PhysicsJointLimit:setAnchr2(anchr2) end
---*  Set the anchor point on body a.
---@param anchr1 vec2_table@ #vec2_table anchr1
---@return cc.PhysicsJointLimit@ PhysicsJointLimit#PhysicsJointLimit self (return value: cc.PhysicsJointLimit)
function PhysicsJointLimit:setAnchr1(anchr1) end
---*  Set the max distance of the anchor points.
---@param max float@ #float max
---@return cc.PhysicsJointLimit@ PhysicsJointLimit#PhysicsJointLimit self (return value: cc.PhysicsJointLimit)
function PhysicsJointLimit:setMax(max) end
---*  Get the anchor point on body b.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsJointLimit:getAnchr2() end
---*  Get the anchor point on body a.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsJointLimit:getAnchr1() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointLimit:createConstraints() end
---*  Get the allowed min distance of the anchor points.
---@return float@ float#float ret (return value: float)
function PhysicsJointLimit:getMin() end
---*  Get the allowed max distance of the anchor points.
---@return float@ float#float ret (return value: float)
function PhysicsJointLimit:getMax() end
---*  Set the min distance of the anchor points.
---@param min float@ #float min
---@return cc.PhysicsJointLimit@ PhysicsJointLimit#PhysicsJointLimit self (return value: cc.PhysicsJointLimit)
function PhysicsJointLimit:setMin(min) end
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param anchr1 vec2_table@ #vec2_table anchr1
---@param anchr2 vec2_table@ #vec2_table anchr2
---@param min float@ #float min
---@param max float@ #float max
---@return cc.PhysicsJointLimit@ PhysicsJointLimit#PhysicsJointLimit ret (return value: cc.PhysicsJointLimit)
---@overload fun(a:cc.PhysicsBody,b:cc.PhysicsBody,anchr1:vec2_table,anchr2:vec2_table,min:float,max:float):cc.PhysicsJointLimit
---@overload fun(a:cc.PhysicsBody,b:cc.PhysicsBody,anchr1:vec2_table,anchr2:vec2_table):cc.PhysicsJointLimit
function PhysicsJointLimit:construct(a,b,anchr1,anchr2,min,max) end


---@class cc.PhysicsJointMotor :  PhysicsJoint
local PhysicsJointMotor={ }
---@class PhysicsJointMotor : cc.PhysicsJointMotor
cc.PhysicsJointMotor=PhysicsJointMotor


---*  Set the relative angular velocity.
---@param rate float@ #float rate
---@return cc.PhysicsJointMotor@ PhysicsJointMotor#PhysicsJointMotor self (return value: cc.PhysicsJointMotor)
function PhysicsJointMotor:setRate(rate) end
---*  Get the relative angular velocity.
---@return float@ float#float ret (return value: float)
function PhysicsJointMotor:getRate() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointMotor:createConstraints() end
---*  Create a motor joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param rate Rate is the desired relative angular velocity.<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param rate float@ #float rate
---@return cc.PhysicsJointMotor@ PhysicsJointMotor#PhysicsJointMotor ret (return value: cc.PhysicsJointMotor)
function PhysicsJointMotor:construct(a,b,rate) end


---@class cc.PhysicsJointPin :  PhysicsJoint
local PhysicsJointPin={ }
---@class PhysicsJointPin : cc.PhysicsJointPin
cc.PhysicsJointPin=PhysicsJointPin


---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointPin:createConstraints() end
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param anchr1 vec2_table@ #vec2_table anchr1
---@param anchr2 vec2_table@ #vec2_table anchr2
---@return cc.PhysicsJointPin@ PhysicsJointPin#PhysicsJointPin ret (return value: cc.PhysicsJointPin)
---@overload fun(a:cc.PhysicsBody,b:cc.PhysicsBody,anchr1:vec2_table,anchr2:vec2_table):cc.PhysicsJointPin
---@overload fun(a:cc.PhysicsBody,b:cc.PhysicsBody,anchr1:vec2_table):cc.PhysicsJointPin
function PhysicsJointPin:construct(a,b,anchr1,anchr2) end


---@class cc.PhysicsJointRatchet :  PhysicsJoint
local PhysicsJointRatchet={ }
---@class PhysicsJointRatchet : cc.PhysicsJointRatchet
cc.PhysicsJointRatchet=PhysicsJointRatchet


---*  Get the ratchet angle.
---@return float@ float#float ret (return value: float)
function PhysicsJointRatchet:getAngle() end
---*  Set the ratchet angle.
---@param angle float@ #float angle
---@return cc.PhysicsJointRatchet@ PhysicsJointRatchet#PhysicsJointRatchet self (return value: cc.PhysicsJointRatchet)
function PhysicsJointRatchet:setAngle(angle) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointRatchet:createConstraints() end
---*  Set the initial offset.
---@param phase float@ #float phase
---@return cc.PhysicsJointRatchet@ PhysicsJointRatchet#PhysicsJointRatchet self (return value: cc.PhysicsJointRatchet)
function PhysicsJointRatchet:setPhase(phase) end
---*  Get the initial offset.
---@return float@ float#float ret (return value: float)
function PhysicsJointRatchet:getPhase() end
---*  Set the distance between "clicks".
---@param ratchet float@ #float ratchet
---@return cc.PhysicsJointRatchet@ PhysicsJointRatchet#PhysicsJointRatchet self (return value: cc.PhysicsJointRatchet)
function PhysicsJointRatchet:setRatchet(ratchet) end
---*  Get the distance between "clicks".
---@return float@ float#float ret (return value: float)
function PhysicsJointRatchet:getRatchet() end
---*  Create a ratchet joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param phase Phase is the initial offset to use when deciding where the ratchet angles are.<br>
---* param ratchet Ratchet is the distance between "clicks".<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param phase float@ #float phase
---@param ratchet float@ #float ratchet
---@return cc.PhysicsJointRatchet@ PhysicsJointRatchet#PhysicsJointRatchet ret (return value: cc.PhysicsJointRatchet)
function PhysicsJointRatchet:construct(a,b,phase,ratchet) end


---@class cc.PhysicsJointRotaryLimit :  PhysicsJoint
local PhysicsJointRotaryLimit={ }
---@class PhysicsJointRotaryLimit : cc.PhysicsJointRotaryLimit
cc.PhysicsJointRotaryLimit=PhysicsJointRotaryLimit


---*  Get the max rotation limit.
---@return float@ float#float ret (return value: float)
function PhysicsJointRotaryLimit:getMax() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointRotaryLimit:createConstraints() end
---*  Set the min rotation limit.
---@param min float@ #float min
---@return cc.PhysicsJointRotaryLimit@ PhysicsJointRotaryLimit#PhysicsJointRotaryLimit self (return value: cc.PhysicsJointRotaryLimit)
function PhysicsJointRotaryLimit:setMin(min) end
---*  Set the max rotation limit.
---@param max float@ #float max
---@return cc.PhysicsJointRotaryLimit@ PhysicsJointRotaryLimit#PhysicsJointRotaryLimit self (return value: cc.PhysicsJointRotaryLimit)
function PhysicsJointRotaryLimit:setMax(max) end
---*  Get the min rotation limit.
---@return float@ float#float ret (return value: float)
function PhysicsJointRotaryLimit:getMin() end
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param min float@ #float min
---@param max float@ #float max
---@return cc.PhysicsJointRotaryLimit@ PhysicsJointRotaryLimit#PhysicsJointRotaryLimit ret (return value: cc.PhysicsJointRotaryLimit)
---@overload fun(a:cc.PhysicsBody,b:cc.PhysicsBody):cc.PhysicsJointRotaryLimit
---@overload fun(a:cc.PhysicsBody,b:cc.PhysicsBody,min:float,max:float):cc.PhysicsJointRotaryLimit
function PhysicsJointRotaryLimit:construct(a,b,min,max) end


---@class cc.PhysicsJointRotarySpring :  PhysicsJoint
local PhysicsJointRotarySpring={ }
---@class PhysicsJointRotarySpring : cc.PhysicsJointRotarySpring
cc.PhysicsJointRotarySpring=PhysicsJointRotarySpring


---*  Get the spring soft constant.
---@return float@ float#float ret (return value: float)
function PhysicsJointRotarySpring:getDamping() end
---*  Set the relative angle in radians from the body a to b.
---@param restAngle float@ #float restAngle
---@return cc.PhysicsJointRotarySpring@ PhysicsJointRotarySpring#PhysicsJointRotarySpring self (return value: cc.PhysicsJointRotarySpring)
function PhysicsJointRotarySpring:setRestAngle(restAngle) end
---*  Get the spring constant.
---@return float@ float#float ret (return value: float)
function PhysicsJointRotarySpring:getStiffness() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointRotarySpring:createConstraints() end
---*  Set the spring constant.
---@param stiffness float@ #float stiffness
---@return cc.PhysicsJointRotarySpring@ PhysicsJointRotarySpring#PhysicsJointRotarySpring self (return value: cc.PhysicsJointRotarySpring)
function PhysicsJointRotarySpring:setStiffness(stiffness) end
---*  Set the spring soft constant.
---@param damping float@ #float damping
---@return cc.PhysicsJointRotarySpring@ PhysicsJointRotarySpring#PhysicsJointRotarySpring self (return value: cc.PhysicsJointRotarySpring)
function PhysicsJointRotarySpring:setDamping(damping) end
---*  Get the relative angle in radians from the body a to b.
---@return float@ float#float ret (return value: float)
function PhysicsJointRotarySpring:getRestAngle() end
---*  Create a damped rotary spring joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param stiffness It's the spring constant.<br>
---* param damping It's how soft to make the damping of the spring.<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param stiffness float@ #float stiffness
---@param damping float@ #float damping
---@return cc.PhysicsJointRotarySpring@ PhysicsJointRotarySpring#PhysicsJointRotarySpring ret (return value: cc.PhysicsJointRotarySpring)
function PhysicsJointRotarySpring:construct(a,b,stiffness,damping) end


---@class cc.PhysicsJointSpring :  PhysicsJoint
local PhysicsJointSpring={ }
---@class PhysicsJointSpring : cc.PhysicsJointSpring
cc.PhysicsJointSpring=PhysicsJointSpring


---*  Set the anchor point on body b.
---@param anchr2 vec2_table@ #vec2_table anchr2
---@return cc.PhysicsJointSpring@ PhysicsJointSpring#PhysicsJointSpring self (return value: cc.PhysicsJointSpring)
function PhysicsJointSpring:setAnchr2(anchr2) end
---*  Set the anchor point on body a.
---@param anchr1 vec2_table@ #vec2_table anchr1
---@return cc.PhysicsJointSpring@ PhysicsJointSpring#PhysicsJointSpring self (return value: cc.PhysicsJointSpring)
function PhysicsJointSpring:setAnchr1(anchr1) end
---*  Get the spring soft constant.
---@return float@ float#float ret (return value: float)
function PhysicsJointSpring:getDamping() end
---*  Set the spring constant.
---@param stiffness float@ #float stiffness
---@return cc.PhysicsJointSpring@ PhysicsJointSpring#PhysicsJointSpring self (return value: cc.PhysicsJointSpring)
function PhysicsJointSpring:setStiffness(stiffness) end
---*  Get the distance of the anchor points.
---@return float@ float#float ret (return value: float)
function PhysicsJointSpring:getRestLength() end
---*  Get the anchor point on body b.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsJointSpring:getAnchr2() end
---*  Get the anchor point on body a.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsJointSpring:getAnchr1() end
---*  Get the spring constant.
---@return float@ float#float ret (return value: float)
function PhysicsJointSpring:getStiffness() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsJointSpring:createConstraints() end
---*  Set the distance of the anchor points.
---@param restLength float@ #float restLength
---@return cc.PhysicsJointSpring@ PhysicsJointSpring#PhysicsJointSpring self (return value: cc.PhysicsJointSpring)
function PhysicsJointSpring:setRestLength(restLength) end
---*  Set the spring soft constant.
---@param damping float@ #float damping
---@return cc.PhysicsJointSpring@ PhysicsJointSpring#PhysicsJointSpring self (return value: cc.PhysicsJointSpring)
function PhysicsJointSpring:setDamping(damping) end
---*  Create a fixed distance joint.<br>
---* param a A is the body to connect.<br>
---* param b B is the body to connect.<br>
---* param anchr1 Anchr1 is the anchor point on body a.<br>
---* param anchr2 Anchr2 is the anchor point on body b.<br>
---* param stiffness It's the spring constant.<br>
---* param damping It's how soft to make the damping of the spring.<br>
---* return A object pointer.
---@param a cc.PhysicsBody@ #cc.PhysicsBody a
---@param b cc.PhysicsBody@ #cc.PhysicsBody b
---@param anchr1 vec2_table@ #vec2_table anchr1
---@param anchr2 vec2_table@ #vec2_table anchr2
---@param stiffness float@ #float stiffness
---@param damping float@ #float damping
---@return cc.PhysicsJointSpring@ PhysicsJointSpring#PhysicsJointSpring ret (return value: cc.PhysicsJointSpring)
function PhysicsJointSpring:construct(a,b,anchr1,anchr2,stiffness,damping) end


---@class cc.PhysicsShape :  Ref
local PhysicsShape={ }
---@class PhysicsShape : cc.PhysicsShape
cc.PhysicsShape=PhysicsShape


---* Get this shape's friction.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShape:getFriction() end
---* Set the group of body.<br>
---* Collision groups let you specify an integral group index. You can have all fixtures with the same group index always collide (positive index) or never collide (negative index).<br>
---* param group An integer number, it have high priority than bit masks.
---@param group int@ #int group
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setGroup(group) end
---* Set this shape's density.<br>
---* It will change the body's mass this shape attaches.<br>
---* param density A float number.
---@param density float@ #float density
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setDensity(density) end
---* Get the mass of this shape.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShape:getMass() end
---* Get this shape's PhysicsMaterial object.<br>
---* return A PhysicsMaterial object reference.
---@return cc.PhysicsMaterial@ PhysicsMaterial#PhysicsMaterial ret (return value: cc.PhysicsMaterial)
function PhysicsShape:getMaterial() end
---* 
---@param sensor boolean@ #bool sensor
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setSensor(sensor) end
---* Get a mask that defines which categories of physics bodies can collide with this physics body.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShape:getCollisionBitmask() end
---* Return this shape's area.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShape:getArea() end
---* Set a mask that defines which categories this physics body belongs to.<br>
---* Every physics body in a scene can be assigned to up to 32 different categories, each corresponding to a bit in the bit mask. You define the mask values used in your game. In conjunction with the collisionBitMask and contactTestBitMask properties, you define which physics bodies interact with each other and when your game is notified of these interactions.<br>
---* param bitmask An integer number, the default value is 0xFFFFFFFF (all bits set).
---@param bitmask int@ #int bitmask
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setCategoryBitmask(bitmask) end
---* Get the group of body.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShape:getGroup() end
---* Set this shape's moment.<br>
---* It will change the body's moment this shape attaches.<br>
---* param moment A float number.
---@param moment float@ #float moment
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setMoment(moment) end
---* Test point is inside this shape or not.<br>
---* param point A Vec2 object.<br>
---* return A bool object.
---@param point vec2_table@ #vec2_table point
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsShape:containsPoint(point) end
---* Get a mask that defines which categories this physics body belongs to.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShape:getCategoryBitmask() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsShape:isSensor() end
---* Return this shape's type.<br>
---* return A Type object.
---@return int@ int#int ret (return value: int)
function PhysicsShape:getType() end
---* Get a mask that defines which categories of bodies cause intersection notifications with this physics body.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShape:getContactTestBitmask() end
---* Get this shape's center position.<br>
---* This function should be overridden in inherit classes.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShape:getCenter() end
---* Get this shape's density.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShape:getDensity() end
---* Set this shape's mass.<br>
---* It will change the body's mass this shape attaches.<br>
---* param mass A float number.
---@param mass float@ #float mass
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setMass(mass) end
---* Get this shape's tag.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShape:getTag() end
---* Calculate the default moment value.<br>
---* This function should be overridden in inherit classes.<br>
---* return A float number, equals 0.0.
---@return float@ float#float ret (return value: float)
function PhysicsShape:calculateDefaultMoment() end
---* A mask that defines which categories of physics bodies can collide with this physics body.<br>
---* When two physics bodies contact each other, a collision may occur. This body's collision mask is compared to the other body's category mask by performing a logical AND operation. If the result is a non-zero value, then this body is affected by the collision. Each body independently chooses whether it wants to be affected by the other body. For example, you might use this to avoid collision calculations that would make negligible changes to a body's velocity.<br>
---* param bitmask An integer number, the default value is 0xFFFFFFFF (all bits set).
---@param bitmask int@ #int bitmask
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setCollisionBitmask(bitmask) end
---* Get this shape's moment.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShape:getMoment() end
---* Get this shape's position offset.<br>
---* This function should be overridden in inherit classes.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShape:getOffset() end
---* Get this shape's restitution.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShape:getRestitution() end
---* Set this shape's friction.<br>
---* It will change the shape's friction.<br>
---* param friction A float number.
---@param friction float@ #float friction
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setFriction(friction) end
---* Set this shape's material.<br>
---* It will change the shape's mass, elasticity and friction.<br>
---* param material A PhysicsMaterial object.
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setMaterial(material) end
---* Set this shape's tag.<br>
---* param tag An integer number that identifies a shape object.
---@param tag int@ #int tag
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setTag(tag) end
---* A mask that defines which categories of bodies cause intersection notifications with this physics body.<br>
---* When two bodies share the same space, each body's category mask is tested against the other body's contact mask by performing a logical AND operation. If either comparison results in a non-zero value, an PhysicsContact object is created and passed to the physics world’s delegate. For best performance, only set bits in the contacts mask for interactions you are interested in.<br>
---* param bitmask An integer number, the default value is 0x00000000 (all bits cleared).
---@param bitmask int@ #int bitmask
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setContactTestBitmask(bitmask) end
---* Set this shape's restitution.<br>
---* It will change the shape's elasticity.<br>
---* param restitution A float number.
---@param restitution float@ #float restitution
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape self (return value: cc.PhysicsShape)
function PhysicsShape:setRestitution(restitution) end
---* Get the body that this shape attaches.<br>
---* return A PhysicsBody object pointer.
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsShape:getBody() end


---@class cc.PhysicsShapeBox :  PhysicsShapePolygon
local PhysicsShapeBox={ }
---@class PhysicsShapeBox : cc.PhysicsShapeBox
cc.PhysicsShapeBox=PhysicsShapeBox


---* Get this box's width and height.<br>
---* return An Size object.
---@return size_table@ size_table#size_table ret (return value: size_table)
function PhysicsShapeBox:getSize() end
---* Creates a PhysicsShapeBox with specified value.<br>
---* param   size Size contains this box's width and height.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   offset A Vec2 object, it is the offset from the body's center of gravity in body local coordinates.<br>
---* return  An autoreleased PhysicsShapeBox object pointer.
---@param size size_table@ #size_table size
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param offset vec2_table@ #vec2_table offset
---@param radius float@ #float radius
---@return cc.PhysicsShapeBox@ PhysicsShapeBox#PhysicsShapeBox ret (return value: cc.PhysicsShapeBox)
function PhysicsShapeBox:create(size,material,offset,radius) end
---* Get this box's position offset.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeBox:getOffset() end


---@class cc.PhysicsShapeCircle :  PhysicsShape
local PhysicsShapeCircle={ }
---@class PhysicsShapeCircle : cc.PhysicsShapeCircle
cc.PhysicsShapeCircle=PhysicsShapeCircle


---* Get the circle's radius.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShapeCircle:getRadius() end
---* Creates a PhysicsShapeCircle with specified value.<br>
---* param   radius A float number, it is the circle's radius.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   offset A Vec2 object, it is the offset from the body's center of gravity in body local coordinates.<br>
---* return  An autoreleased PhysicsShapeCircle object pointer.
---@param radius float@ #float radius
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param offset vec2_table@ #vec2_table offset
---@return cc.PhysicsShapeCircle@ PhysicsShapeCircle#PhysicsShapeCircle ret (return value: cc.PhysicsShapeCircle)
function PhysicsShapeCircle:create(radius,material,offset) end
---* Calculate the area of a circle with specified radius.<br>
---* param radius A float number<br>
---* return A float number
---@param radius float@ #float radius
---@return float@ float#float ret (return value: float)
function PhysicsShapeCircle:calculateArea(radius) end
---* Calculate the moment of a circle with specified value.<br>
---* param mass A float number<br>
---* param radius A float number<br>
---* param offset A Vec2 object, it is the offset from the body's center of gravity in body local coordinates.<br>
---* return A float number
---@param mass float@ #float mass
---@param radius float@ #float radius
---@param offset vec2_table@ #vec2_table offset
---@return float@ float#float ret (return value: float)
function PhysicsShapeCircle:calculateMoment(mass,radius,offset) end
---* Get this circle's position offset.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeCircle:getOffset() end
---* Calculate the moment for a circle.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShapeCircle:calculateDefaultMoment() end


---@class cc.PhysicsShapeEdgeBox :  PhysicsShapeEdgePolygon
local PhysicsShapeEdgeBox={ }
---@class PhysicsShapeEdgeBox : cc.PhysicsShapeEdgeBox
cc.PhysicsShapeEdgeBox=PhysicsShapeEdgeBox


---* Creates a PhysicsShapeEdgeBox with specified value.<br>
---* param   size Size contains this box's width and height.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   border It's a edge's border width.<br>
---* param   offset A Vec2 object, it is the offset from the body's center of gravity in body local coordinates.<br>
---* return  An autoreleased PhysicsShapeEdgeBox object pointer.
---@param size size_table@ #size_table size
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param border float@ #float border
---@param offset vec2_table@ #vec2_table offset
---@return cc.PhysicsShapeEdgeBox@ PhysicsShapeEdgeBox#PhysicsShapeEdgeBox ret (return value: cc.PhysicsShapeEdgeBox)
function PhysicsShapeEdgeBox:create(size,material,border,offset) end
---* Get this box's position offset.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeEdgeBox:getOffset() end


---@class cc.PhysicsShapeEdgeChain :  PhysicsShape
local PhysicsShapeEdgeChain={ }
---@class PhysicsShapeEdgeChain : cc.PhysicsShapeEdgeChain
cc.PhysicsShapeEdgeChain=PhysicsShapeEdgeChain


---* Get this chain's points array count.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShapeEdgeChain:getPointsCount() end
---* Get this chain's center position.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeEdgeChain:getCenter() end


---@class cc.PhysicsShapeEdgePolygon :  PhysicsShape
local PhysicsShapeEdgePolygon={ }
---@class PhysicsShapeEdgePolygon : cc.PhysicsShapeEdgePolygon
cc.PhysicsShapeEdgePolygon=PhysicsShapeEdgePolygon


---* Get this polygon's points array count.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShapeEdgePolygon:getPointsCount() end
---* Get this polygon's center position.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeEdgePolygon:getCenter() end


---@class cc.PhysicsShapeEdgeSegment :  PhysicsShape
local PhysicsShapeEdgeSegment={ }
---@class PhysicsShapeEdgeSegment : cc.PhysicsShapeEdgeSegment
cc.PhysicsShapeEdgeSegment=PhysicsShapeEdgeSegment


---* Get this edge's end position.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeEdgeSegment:getPointB() end
---* Get this edge's begin position.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeEdgeSegment:getPointA() end
---* Creates a PhysicsShapeEdgeSegment with specified value.<br>
---* param   a It's the edge's begin position.<br>
---* param   b It's the edge's end position.<br>
---* param   material A PhysicsMaterial object, the default value is PHYSICSSHAPE_MATERIAL_DEFAULT.<br>
---* param   border It's a edge's border width.<br>
---* return  An autoreleased PhysicsShapeEdgeSegment object pointer.
---@param a vec2_table@ #vec2_table a
---@param b vec2_table@ #vec2_table b
---@param material cc.PhysicsMaterial@ #cc.PhysicsMaterial material
---@param border float@ #float border
---@return cc.PhysicsShapeEdgeSegment@ PhysicsShapeEdgeSegment#PhysicsShapeEdgeSegment ret (return value: cc.PhysicsShapeEdgeSegment)
function PhysicsShapeEdgeSegment:create(a,b,material,border) end
---* Get this edge's center position.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapeEdgeSegment:getCenter() end


---@class cc.PhysicsShapePolygon :  PhysicsShape
local PhysicsShapePolygon={ }
---@class PhysicsShapePolygon : cc.PhysicsShapePolygon
cc.PhysicsShapePolygon=PhysicsShapePolygon


---* Get this polygon's points array count.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsShapePolygon:getPointsCount() end
---* Get a point of this polygon's points array.<br>
---* param i A index of this polygon's points array.<br>
---* return A point value.
---@param i int@ #int i
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapePolygon:getPoint(i) end
---* Calculate the moment for a polygon.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsShapePolygon:calculateDefaultMoment() end
---* Get this polygon's center position.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsShapePolygon:getCenter() end


---@class cc.PhysicsSprite3D :  Sprite3D
local PhysicsSprite3D={ }
---@class PhysicsSprite3D : cc.PhysicsSprite3D
cc.PhysicsSprite3D=PhysicsSprite3D


---*  synchronize node transformation to physics. 
---@return cc.PhysicsSprite3D@ PhysicsSprite3D#PhysicsSprite3D self (return value: cc.PhysicsSprite3D)
function PhysicsSprite3D:syncNodeToPhysics() end
---*  synchronize physics transformation to node. 
---@return cc.PhysicsSprite3D@ PhysicsSprite3D#PhysicsSprite3D self (return value: cc.PhysicsSprite3D)
function PhysicsSprite3D:syncPhysicsToNode() end
---*  Get the Physics3DObject. 
---@return cc.Physics3DObject@ Physics3DObject#Physics3DObject ret (return value: cc.Physics3DObject)
function PhysicsSprite3D:getPhysicsObj() end
---*  Set synchronization flag, see Physics3DComponent. 
---@param syncFlag int@ #int syncFlag
---@return cc.PhysicsSprite3D@ PhysicsSprite3D#PhysicsSprite3D self (return value: cc.PhysicsSprite3D)
function PhysicsSprite3D:setSyncFlag(syncFlag) end
---* 
---@return cc.PhysicsSprite3D@ PhysicsSprite3D#PhysicsSprite3D self (return value: cc.PhysicsSprite3D)
function PhysicsSprite3D:PhysicsSprite3D() end


---@class cc.PhysicsWorld 
local PhysicsWorld={ }
---@class PhysicsWorld : cc.PhysicsWorld
cc.PhysicsWorld=PhysicsWorld


---* set the gravity value of this physics world.<br>
---* param gravity A gravity value of this physics world.
---@param gravity vec2_table@ #vec2_table gravity
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setGravity(gravity) end
---* Get all the bodies that in this physics world.<br>
---* return A Vector<PhysicsBody*>& object contains all bodies in this physics world. 
---@return array_table@ array_table#array_table ret (return value: array_table)
function PhysicsWorld:getAllBodies() end
---* set the number of update of the physics world in a second.<br>
---* 0 - disable fixed step system<br>
---* default value is 0
---@param updatesPerSecond int@ #int updatesPerSecond
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setFixedUpdateRate(updatesPerSecond) end
---* set the number of substeps in an update of the physics world.<br>
---* One physics update will be divided into several substeps to increase its accuracy.<br>
---* param steps An integer number, default value is 1.
---@param steps int@ #int steps
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setSubsteps(steps) end
---* To control the step of physics.<br>
---* If you want control it by yourself( fixed-timestep for example ), you can set this to false and call step by yourself.<br>
---* attention If you set auto step to false, setSpeed setSubsteps and setUpdateRate won't work, you need to control the time step by yourself.<br>
---* param autoStep A bool object, default value is true.
---@param autoStep boolean@ #bool autoStep
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setAutoStep(autoStep) end
---* Adds a joint to this physics world.<br>
---* This joint will be added to this physics world at next frame.<br>
---* attention If this joint is already added to another physics world, it will be removed from that world first and then add to this world.<br>
---* param   joint   A pointer to an existing PhysicsJoint object.
---@param joint cc.PhysicsJoint@ #cc.PhysicsJoint joint
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:addJoint(joint) end
---* Remove all joints from this physics world.<br>
---* attention This function is invoked in the destructor of this physics world, you do not use this api in common.<br>
---* param   destroy   true all joints will be destroyed after remove from this world, false otherwise.
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:removeAllJoints() end
---* Get the debug draw mask.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsWorld:getDebugDrawMask() end
---* set the callback which invoked before update of each object in physics world.
---@param callback function@ #function callback
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setPreUpdateCallback(callback) end
---* Get the auto step of this physics world.<br>
---* return A bool object.
---@return boolean@ bool#bool ret (return value: bool)
function PhysicsWorld:isAutoStep() end
---* set the callback which invoked after update of each object in physics world.
---@param callback function@ #function callback
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setPostUpdateCallback(callback) end
---@param body cc.PhysicsBody@ #cc.PhysicsBody body
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
---@overload fun(unkown0:int):cc.PhysicsWorld
---@overload fun(body:cc.PhysicsBody):cc.PhysicsWorld
function PhysicsWorld:removeBody(body) end
---* Remove a joint from this physics world.<br>
---* If this world is not locked, the joint is removed immediately, otherwise at next frame. <br>
---* If this joint is connected with a body, it will be removed from the body also.<br>
---* param   joint   A pointer to an existing PhysicsJoint object.<br>
---* param   destroy   true this joint will be destroyed after remove from this world, false otherwise.
---@param joint cc.PhysicsJoint@ #cc.PhysicsJoint joint
---@param destroy boolean@ #bool destroy
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:removeJoint(joint,destroy) end
---* Get physics shapes that contains the point. <br>
---* All shapes contains the point will be pushed in a Vector<PhysicsShape*> object.<br>
---* attention The point must lie inside a shape.<br>
---* param   point   A Vec2 object contains the position of the point.<br>
---* return A Vector<PhysicsShape*> object contains all found PhysicsShape pointer.
---@param point vec2_table@ #vec2_table point
---@return array_table@ array_table#array_table ret (return value: array_table)
function PhysicsWorld:getShapes(point) end
---* The step for physics world.<br>
---* The times passing for simulate the physics.<br>
---* attention You need to setAutoStep(false) first before it can work.<br>
---* param   delta   A float number.
---@param delta float@ #float delta
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:step(delta) end
---* Set the debug draw mask of this physics world.<br>
---* This physics world will draw shapes and joints by DrawNode according to mask.<br>
---* param mask Mask has four value:DEBUGDRAW_NONE, DEBUGDRAW_SHAPE, DEBUGDRAW_JOINT, DEBUGDRAW_CONTACT and DEBUGDRAW_ALL, default is DEBUGDRAW_NONE
---@param mask int@ #int mask
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setDebugDrawMask(mask) end
---* Get the gravity value of this physics world.<br>
---* return A Vec2 object.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PhysicsWorld:getGravity() end
---* Set the update rate of this physics world<br>
---* Update rate is the value of EngineUpdateTimes/PhysicsWorldUpdateTimes.<br>
---* Set it higher can improve performance, set it lower can improve accuracy of physics world simulation.<br>
---* attention if you setAutoStep(false), this won't work.<br>
---* param rate An integer number, default value is 1.0.
---@param rate int@ #int rate
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setUpdateRate(rate) end
---*  get the number of substeps 
---@return int@ int#int ret (return value: int)
function PhysicsWorld:getFixedUpdateRate() end
---* Get the number of substeps of this physics world.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsWorld:getSubsteps() end
---* Get the speed of this physics world.<br>
---* return A float number.
---@return float@ float#float ret (return value: float)
function PhysicsWorld:getSpeed() end
---* Get the update rate of this physics world.<br>
---* return An integer number.
---@return int@ int#int ret (return value: int)
function PhysicsWorld:getUpdateRate() end
---* Remove all bodies from physics world. <br>
---* If this world is not locked, those body are removed immediately, otherwise at next frame.
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:removeAllBodies() end
---* Set the speed of this physics world.<br>
---* attention if you setAutoStep(false), this won't work.<br>
---* param speed  A float number. Speed is the rate at which the simulation executes. default value is 1.0.
---@param speed float@ #float speed
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld self (return value: cc.PhysicsWorld)
function PhysicsWorld:setSpeed(speed) end
---* Get the nearest physics shape that contains the point. <br>
---* Query this physics world at point and return the closest shape.<br>
---* param   point   A Vec2 object contains the position of the point.<br>
---* return A PhysicsShape object pointer or nullptr if no shapes were found
---@param point vec2_table@ #vec2_table point
---@return cc.PhysicsShape@ PhysicsShape#PhysicsShape ret (return value: cc.PhysicsShape)
function PhysicsWorld:getShape(point) end
---* Get a body by tag. <br>
---* param   tag   An integer number that identifies a PhysicsBody object. <br>
---* return A PhysicsBody object pointer or nullptr if no shapes were found.
---@param tag int@ #int tag
---@return cc.PhysicsBody@ PhysicsBody#PhysicsBody ret (return value: cc.PhysicsBody)
function PhysicsWorld:getBody(tag) end


---@class cc.Place :  ActionInstant
local Place={ }
---@class Place : cc.Place
cc.Place=Place


---*  Initializes a Place action with a position 
---@param pos vec2_table@ #vec2_table pos
---@return boolean@ bool#bool ret (return value: bool)
function Place:initWithPosition(pos) end
---*  Creates a Place action with a position.<br>
---* param pos  A certain position.<br>
---* return  An autoreleased Place object.
---@param pos vec2_table@ #vec2_table pos
---@return cc.Place@ Place#Place ret (return value: cc.Place)
function Place:create(pos) end
---* 
---@return cc.Place@ Place#Place ret (return value: cc.Place)
function Place:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.Place@ Place#Place self (return value: cc.Place)
function Place:update(time) end
---* 
---@return cc.Place@ Place#Place ret (return value: cc.Place)
function Place:reverse() end
---* 
---@return cc.Place@ Place#Place self (return value: cc.Place)
function Place:Place() end


---@class ccs.PlayableFrame :  Frame
local PlayableFrame={ }
---@class PlayableFrame : ccs.PlayableFrame
ccs.PlayableFrame=PlayableFrame


---* 
---@param playact string@ #string playact
---@return ccs.PlayableFrame@ PlayableFrame#PlayableFrame self (return value: ccs.PlayableFrame)
function PlayableFrame:setPlayableAct(playact) end
---* 
---@return string@ string#string ret (return value: string)
function PlayableFrame:getPlayableAct() end
---* 
---@return ccs.PlayableFrame@ PlayableFrame#PlayableFrame ret (return value: ccs.PlayableFrame)
function PlayableFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function PlayableFrame:clone() end
---* 
---@return ccs.PlayableFrame@ PlayableFrame#PlayableFrame self (return value: ccs.PlayableFrame)
function PlayableFrame:PlayableFrame() end


---@class cc.PointLight :  BaseLight
local PointLight={ }
---@class PointLight : cc.PointLight
cc.PointLight=PointLight


---*  get or set range 
---@return float@ float#float ret (return value: float)
function PointLight:getRange() end
---* 
---@param range float@ #float range
---@return point_table@ point_table#point_table self (return value: point_table)
function PointLight:setRange(range) end
---* Creates a point light.<br>
---* param position The light's position<br>
---* param color The light's color.<br>
---* param range The light's range.<br>
---* return The new point light.
---@param position vec3_table@ #vec3_table position
---@param color color3b_table@ #color3b_table color
---@param range float@ #float range
---@return point_table@ point_table#point_table ret (return value: point_table)
function PointLight:create(position,color,range) end
---* 
---@return int@ int#int ret (return value: int)
function PointLight:getLightType() end
---* 
---@return point_table@ point_table#point_table self (return value: point_table)
function PointLight:PointLight() end


---@class cc.PolygonInfo 
local PolygonInfo={ }
---@class PolygonInfo : cc.PolygonInfo
cc.PolygonInfo=PolygonInfo


---* 
---@return string@ string#string ret (return value: string)
function PolygonInfo:getFilename() end
---* get sum of all triangle area size<br>
---* return sum of all triangle area size
---@return float@ float#float ret (return value: float)
function PolygonInfo:getArea() end
---* 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function PolygonInfo:getRect() end
---* 
---@param filename string@ #string filename
---@return cc.PolygonInfo@ PolygonInfo#PolygonInfo self (return value: cc.PolygonInfo)
function PolygonInfo:setFilename(filename) end
---* set the data to be a pointer to a number of Quads<br>
---* the member verts will not be released when this PolygonInfo destructs<br>
---* as the verts memory are managed by other objects<br>
---* param quad  a pointer to the V3F_C4B_T2F_Quad quads
---@param quads cc.V3F_C4B_T2F_Quad@ #cc.V3F_C4B_T2F_Quad quads
---@param numberOfQuads int@ #int numberOfQuads
---@return cc.PolygonInfo@ PolygonInfo#PolygonInfo self (return value: cc.PolygonInfo)
function PolygonInfo:setQuads(quads,numberOfQuads) end
---* get vertex count<br>
---* return number of vertices
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function PolygonInfo:getVertCount() end
---* get triangles count<br>
---* return number of triangles
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function PolygonInfo:getTrianglesCount() end
---* set the data to be a pointer to a quad<br>
---* the member verts will not be released when this PolygonInfo destructs<br>
---* as the verts memory are managed by other objects<br>
---* param quad  a pointer to the V3F_C4B_T2F_Quad object
---@param quad cc.V3F_C4B_T2F_Quad@ #cc.V3F_C4B_T2F_Quad quad
---@return cc.PolygonInfo@ PolygonInfo#PolygonInfo self (return value: cc.PolygonInfo)
function PolygonInfo:setQuad(quad) end
---* set the data to be a pointer to a triangles<br>
---* the member verts will not be released when this PolygonInfo destructs<br>
---* as the verts memory are managed by other objects<br>
---* param triangles  a pointer to the TrianglesCommand::Triangles object
---@param triangles cc.TrianglesCommand.Triangles@ #cc.TrianglesCommand::Triangles triangles
---@return cc.PolygonInfo@ PolygonInfo#PolygonInfo self (return value: cc.PolygonInfo)
function PolygonInfo:setTriangles(triangles) end
---* 
---@param rect rect_table@ #rect_table rect
---@return cc.PolygonInfo@ PolygonInfo#PolygonInfo self (return value: cc.PolygonInfo)
function PolygonInfo:setRect(rect) end
---* / @name Creators/ @{<br>
---* Creates an empty Polygon info<br>
---* memberof PolygonInfo<br>
---* return PolygonInfo object
---@return cc.PolygonInfo@ PolygonInfo#PolygonInfo self (return value: cc.PolygonInfo)
function PolygonInfo:PolygonInfo() end


---@class ccs.PositionFrame :  Frame
local PositionFrame={ }
---@class PositionFrame : ccs.PositionFrame
ccs.PositionFrame=PositionFrame


---* 
---@return float@ float#float ret (return value: float)
function PositionFrame:getX() end
---* 
---@return float@ float#float ret (return value: float)
function PositionFrame:getY() end
---* 
---@param position vec2_table@ #vec2_table position
---@return ccs.PositionFrame@ PositionFrame#PositionFrame self (return value: ccs.PositionFrame)
function PositionFrame:setPosition(position) end
---* 
---@param x float@ #float x
---@return ccs.PositionFrame@ PositionFrame#PositionFrame self (return value: ccs.PositionFrame)
function PositionFrame:setX(x) end
---* 
---@param y float@ #float y
---@return ccs.PositionFrame@ PositionFrame#PositionFrame self (return value: ccs.PositionFrame)
function PositionFrame:setY(y) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function PositionFrame:getPosition() end
---* 
---@return ccs.PositionFrame@ PositionFrame#PositionFrame ret (return value: ccs.PositionFrame)
function PositionFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function PositionFrame:clone() end
---* 
---@return ccs.PositionFrame@ PositionFrame#PositionFrame self (return value: ccs.PositionFrame)
function PositionFrame:PositionFrame() end


---@class cc.ProgressFromTo :  ActionInterval
local ProgressFromTo={ }
---@class ProgressFromTo : cc.ProgressFromTo
cc.ProgressFromTo=ProgressFromTo


---* brief Initializes the action with a duration, a "from" percentage and a "to" percentage.<br>
---* param duration Specify the duration of the ProgressFromTo action. It's a value in seconds.<br>
---* param fromPercentage Specify the source percentage.<br>
---* param toPercentage Specify the destination percentage.<br>
---* return If the creation success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param fromPercentage float@ #float fromPercentage
---@param toPercentage float@ #float toPercentage
---@return boolean@ bool#bool ret (return value: bool)
function ProgressFromTo:initWithDuration(duration,fromPercentage,toPercentage) end
---* brief Create and initializes the action with a duration, a "from" percentage and a "to" percentage.<br>
---* param duration Specify the duration of the ProgressFromTo action. It's a value in seconds.<br>
---* param fromPercentage Specify the source percentage.<br>
---* param toPercentage Specify the destination percentage.<br>
---* return If the creation success, return a pointer of ProgressFromTo action; otherwise, return nil.
---@param duration float@ #float duration
---@param fromPercentage float@ #float fromPercentage
---@param toPercentage float@ #float toPercentage
---@return cc.ProgressFromTo@ ProgressFromTo#ProgressFromTo ret (return value: cc.ProgressFromTo)
function ProgressFromTo:create(duration,fromPercentage,toPercentage) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ProgressFromTo@ ProgressFromTo#ProgressFromTo self (return value: cc.ProgressFromTo)
function ProgressFromTo:startWithTarget(target) end
---* 
---@return cc.ProgressFromTo@ ProgressFromTo#ProgressFromTo ret (return value: cc.ProgressFromTo)
function ProgressFromTo:clone() end
---* 
---@return cc.ProgressFromTo@ ProgressFromTo#ProgressFromTo ret (return value: cc.ProgressFromTo)
function ProgressFromTo:reverse() end
---* 
---@param time float@ #float time
---@return cc.ProgressFromTo@ ProgressFromTo#ProgressFromTo self (return value: cc.ProgressFromTo)
function ProgressFromTo:update(time) end
---* 
---@return cc.ProgressFromTo@ ProgressFromTo#ProgressFromTo self (return value: cc.ProgressFromTo)
function ProgressFromTo:ProgressFromTo() end


---@class cc.ProgressTimer :  Node
local ProgressTimer={ }
---@class ProgressTimer : cc.ProgressTimer
cc.ProgressTimer=ProgressTimer


---*  Initializes a progress timer with the sprite as the shape the timer goes through 
---@param sp cc.Sprite@ #cc.Sprite sp
---@return boolean@ bool#bool ret (return value: bool)
function ProgressTimer:initWithSprite(sp) end
---*  Return the Reverse direction.<br>
---* return If the direction is Anti-clockwise,it will return true.
---@return boolean@ bool#bool ret (return value: bool)
function ProgressTimer:isReverseDirection() end
---* This allows the bar type to move the component at a specific rate.<br>
---* Set the component to 0 to make sure it stays at 100%.<br>
---* For example you want a left to right bar but not have the height stay 100%.<br>
---* Set the rate to be Vec2(0,1); and set the midpoint to = Vec2(0,.5f).<br>
---* param barChangeRate A Vec2.
---@param barChangeRate vec2_table@ #vec2_table barChangeRate
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setBarChangeRate(barChangeRate) end
---*  Percentages are from 0 to 100.<br>
---* return Percentages.
---@return float@ float#float ret (return value: float)
function ProgressTimer:getPercentage() end
---*  Set the sprite as the shape. <br>
---* param sprite The sprite as the shape.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setSprite(sprite) end
---*  Change the percentage to change progress. <br>
---* return A Type
---@return int@ int#int ret (return value: int)
function ProgressTimer:getType() end
---*  The image to show the progress percentage, retain. <br>
---* return A sprite.
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function ProgressTimer:getSprite() end
---* Midpoint is used to modify the progress start position.<br>
---* If you're using radials type then the midpoint changes the center point.<br>
---* If you're using bar type then the midpoint changes the bar growth.<br>
---* it expands from the center but clamps to the sprites edge so:<br>
---* you want a left to right then set the midpoint all the way to Vec2(0,y).<br>
---* you want a right to left then set the midpoint all the way to Vec2(1,y).<br>
---* you want a bottom to top then set the midpoint all the way to Vec2(x,0).<br>
---* you want a top to bottom then set the midpoint all the way to Vec2(x,1).<br>
---* param point A Vec2 point.
---@param point vec2_table@ #vec2_table point
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setMidpoint(point) end
---*  Returns the BarChangeRate.<br>
---* return A barChangeRate.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ProgressTimer:getBarChangeRate() end
---*  Set the Reverse direction.<br>
---* param value If value is false it will clockwise,if is true it will Anti-clockwise.
---@param value boolean@ #bool value
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setReverseDirection(value) end
---*  Returns the Midpoint. <br>
---* return A Vec2.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ProgressTimer:getMidpoint() end
---*  Set the initial percentage values. <br>
---* param percentage The initial percentage values.
---@param percentage float@ #float percentage
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setPercentage(percentage) end
---*  Set the ProgressTimer type. <br>
---* param type Is an Type.
---@param type int@ #int type
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setType(type) end
---*  Creates a progress timer with the sprite as the shape the timer goes through.<br>
---* param sp The sprite as the shape the timer goes through.<br>
---* return A ProgressTimer.
---@param sp cc.Sprite@ #cc.Sprite sp
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer ret (return value: cc.ProgressTimer)
function ProgressTimer:create(sp) end
---* 
---@param anchorPoint vec2_table@ #vec2_table anchorPoint
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setAnchorPoint(anchorPoint) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:draw(renderer,transform,flags) end
---* 
---@param color color3b_table@ #color3b_table color
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setColor(color) end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function ProgressTimer:getColor() end
---* 
---@param opacity unsigned_char@ #unsigned char opacity
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:setOpacity(opacity) end
---* 
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function ProgressTimer:getOpacity() end
---* js ctor
---@return cc.ProgressTimer@ ProgressTimer#ProgressTimer self (return value: cc.ProgressTimer)
function ProgressTimer:ProgressTimer() end


---@class cc.ProgressTo :  ActionInterval
local ProgressTo={ }
---@class ProgressTo : cc.ProgressTo
cc.ProgressTo=ProgressTo


---* brief Initializes with a duration and destination percentage. <br>
---* param duration Specify the duration of the ProgressTo action. It's a value in seconds.<br>
---* param percent Specify the destination percentage.<br>
---* return If the creation success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param percent float@ #float percent
---@return boolean@ bool#bool ret (return value: bool)
function ProgressTo:initWithDuration(duration,percent) end
---* brief Create and initializes with a duration and a destination percentage.<br>
---* param duration Specify the duration of the ProgressTo action. It's a value in seconds.<br>
---* param percent Specify the destination percentage.<br>
---* return If the creation success, return a pointer of ProgressTo action; otherwise, return nil.
---@param duration float@ #float duration
---@param percent float@ #float percent
---@return cc.ProgressTo@ ProgressTo#ProgressTo ret (return value: cc.ProgressTo)
function ProgressTo:create(duration,percent) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ProgressTo@ ProgressTo#ProgressTo self (return value: cc.ProgressTo)
function ProgressTo:startWithTarget(target) end
---* 
---@return cc.ProgressTo@ ProgressTo#ProgressTo ret (return value: cc.ProgressTo)
function ProgressTo:clone() end
---* 
---@return cc.ProgressTo@ ProgressTo#ProgressTo ret (return value: cc.ProgressTo)
function ProgressTo:reverse() end
---* 
---@param time float@ #float time
---@return cc.ProgressTo@ ProgressTo#ProgressTo self (return value: cc.ProgressTo)
function ProgressTo:update(time) end
---* 
---@return cc.ProgressTo@ ProgressTo#ProgressTo self (return value: cc.ProgressTo)
function ProgressTo:ProgressTo() end


---@class cc.Properties 
local Properties={ }
---@class Properties : cc.Properties
cc.Properties=Properties


---* Returns the value of a variable that is set in this Properties object.<br>
---* Variables take on the format ${name} and are inherited from parent Property objects.<br>
---* param name Name of the variable to get.<br>
---* param defaultValue Value to return if the variable is not found.<br>
---* return The value of the specified variable, or defaultValue if not found.
---@param name char@ #char name
---@param defaultValue char@ #char defaultValue
---@return char@ char#char ret (return value: char)
function Properties:getVariable(name,defaultValue) end
---* Get the value of the given property as a string. This can always be retrieved,<br>
---* whatever the intended type of the property.<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* param defaultValue The default value to return if the specified property does not exist.<br>
---* return The value of the given property as a string, or the empty string if no property with that name exists.
---@return char@ char#char ret (return value: char)
function Properties:getString() end
---* Interpret the value of the given property as a long integer.<br>
---* If the property does not exist, zero will be returned.<br>
---* If the property exists but could not be scanned, an error will be logged and zero will be returned.<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* return The value of the given property interpreted as a long.<br>
---* Zero if the property does not exist or could not be scanned.
---@return long@ long#long ret (return value: long)
function Properties:getLong() end
---@param id char@ #char id
---@param searchNames boolean@ #bool searchNames
---@param recurse boolean@ #bool recurse
---@return cc.Properties@ Properties#Properties ret (return value: cc.Properties)
---@overload fun():cc.Properties
---@overload fun(id:char,searchNames:boolean,recurse:boolean):cc.Properties
function Properties:getNamespace(id,searchNames,recurse) end
---* Gets the file path for the given property if the file exists.<br>
---* This method will first search for the file relative to the working directory.<br>
---* If the file is not found then it will search relative to the directory the bundle file is in.<br>
---* param name The name of the property.<br>
---* param path The string to copy the path to if the file exists.<br>
---* return True if the property exists and the file exists, false otherwise.<br>
---* script{ignore}
---@param name char@ #char name
---@param path string@ #string path
---@return boolean@ bool#bool ret (return value: bool)
function Properties:getPath(name,path) end
---* Interpret the value of the given property as a Matrix.<br>
---* If the property does not exist, out will be set to the identity matrix.<br>
---* If the property exists but could not be scanned, an error will be logged and out will be set<br>
---* to the identity matrix.<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* param out The matrix to set to this property's interpreted value.<br>
---* return True on success, false if the property does not exist or could not be scanned.
---@param name char@ #char name
---@param out mat4_table@ #mat4_table out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:getMat4(name,out) end
---* Check if a property with the given name is specified in this Properties object.<br>
---* param name The name of the property to query.<br>
---* return True if the property exists, false otherwise.
---@param name char@ #char name
---@return boolean@ bool#bool ret (return value: bool)
function Properties:exists(name) end
---* Sets the value of the property with the specified name.<br>
---* If there is no property in this namespace with the current name,<br>
---* one is added. Otherwise, the value of the first property with the<br>
---* specified name is updated.<br>
---* If name is NULL, the value current property (see getNextProperty) is<br>
---* set, unless there is no current property, in which case false<br>
---* is returned.<br>
---* param name The name of the property to set.<br>
---* param value The property value.<br>
---* return True if the property was set, false otherwise.
---@param name char@ #char name
---@param value char@ #char value
---@return boolean@ bool#bool ret (return value: bool)
function Properties:setString(name,value) end
---* Get the ID of this Property's namespace. The ID should be a unique identifier,<br>
---* but its uniqueness is not enforced.<br>
---* return The ID of this Property's namespace.
---@return char@ char#char ret (return value: char)
function Properties:getId() end
---* Rewind the getNextProperty() and getNextNamespace() iterators<br>
---* to the beginning of the file.
---@return cc.Properties@ Properties#Properties self (return value: cc.Properties)
function Properties:rewind() end
---* Sets the value of the specified variable.<br>
---* param name Name of the variable to set.<br>
---* param value The value to set.
---@param name char@ #char name
---@param value char@ #char value
---@return cc.Properties@ Properties#Properties self (return value: cc.Properties)
function Properties:setVariable(name,value) end
---* Interpret the value of the given property as a boolean.<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* param defaultValue the default value to return if the specified property does not exist within the properties file.<br>
---* return true if the property exists and its value is "true", otherwise false.
---@return boolean@ bool#bool ret (return value: bool)
function Properties:getBool() end
---@param name char@ #char name
---@param out vec3_table@ #vec3_table out
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(name:char,unkown1:vec4_table):boolean
---@overload fun(name:char,out:vec3_table):boolean
function Properties:getColor(name,out) end
---* Returns the type of a property.<br>
---* param name The name of the property to interpret, or NULL to return the current property's type.<br>
---* return The type of the property.
---@return int@ int#int ret (return value: int)
function Properties:getType() end
---* Get the next namespace.
---@return cc.Properties@ Properties#Properties ret (return value: cc.Properties)
function Properties:getNextNamespace() end
---* Interpret the value of the given property as an integer.<br>
---* If the property does not exist, zero will be returned.<br>
---* If the property exists but could not be scanned, an error will be logged and zero will be returned.<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* return The value of the given property interpreted as an integer.<br>
---* Zero if the property does not exist or could not be scanned.
---@return int@ int#int ret (return value: int)
function Properties:getInt() end
---* Interpret the value of the given property as a Vector3.<br>
---* If the property does not exist, out will be set to Vector3(0.0f, 0.0f, 0.0f).<br>
---* If the property exists but could not be scanned, an error will be logged and out will be set<br>
---* to Vector3(0.0f, 0.0f, 0.0f).<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* param out The vector to set to this property's interpreted value.<br>
---* return True on success, false if the property does not exist or could not be scanned.
---@param name char@ #char name
---@param out vec3_table@ #vec3_table out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:getVec3(name,out) end
---* Interpret the value of the given property as a Vector2.<br>
---* If the property does not exist, out will be set to Vector2(0.0f, 0.0f).<br>
---* If the property exists but could not be scanned, an error will be logged and out will be set<br>
---* to Vector2(0.0f, 0.0f).<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* param out The vector to set to this property's interpreted value.<br>
---* return True on success, false if the property does not exist or could not be scanned.
---@param name char@ #char name
---@param out vec2_table@ #vec2_table out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:getVec2(name,out) end
---* Interpret the value of the given property as a Vector4.<br>
---* If the property does not exist, out will be set to Vector4(0.0f, 0.0f, 0.0f, 0.0f).<br>
---* If the property exists but could not be scanned, an error will be logged and out will be set<br>
---* to Vector4(0.0f, 0.0f, 0.0f, 0.0f).<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* param out The vector to set to this property's interpreted value.<br>
---* return True on success, false if the property does not exist or could not be scanned.
---@param name char@ #char name
---@param out vec4_table@ #vec4_table out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:getVec4(name,out) end
---* Get the name of the next property.<br>
---* If a valid next property is returned, the value of the property can be<br>
---* retrieved using any of the get methods in this class, passing NULL for the property name.<br>
---* return The name of the next property, or NULL if there are no properties remaining.
---@return char@ char#char ret (return value: char)
function Properties:getNextProperty() end
---* Interpret the value of the given property as a floating-point number.<br>
---* If the property does not exist, zero will be returned.<br>
---* If the property exists but could not be scanned, an error will be logged and zero will be returned.<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* return The value of the given property interpreted as a float.<br>
---* Zero if the property does not exist or could not be scanned.
---@return float@ float#float ret (return value: float)
function Properties:getFloat() end
---* Interpret the value of the given property as a Quaternion specified as an axis angle.<br>
---* If the property does not exist, out will be set to Quaternion().<br>
---* If the property exists but could not be scanned, an error will be logged and out will be set<br>
---* to Quaternion().<br>
---* param name The name of the property to interpret, or NULL to return the current property's value.<br>
---* param out The quaternion to set to this property's interpreted value.<br>
---* return True on success, false if the property does not exist or could not be scanned.
---@param name char@ #char name
---@param out cc.Quaternion@ #cc.Quaternion out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:getQuaternionFromAxisAngle(name,out) end
---@param str char@ #char str
---@param out vec3_table@ #vec3_table out
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(str:char,unkown1:vec4_table):boolean
---@overload fun(str:char,out:vec3_table):boolean
function Properties:parseColor(str,out) end
---* Attempts to parse the specified string as a Vector3 value.<br>
---* On error, false is returned and the output is set to all zero values.<br>
---* param str The string to parse.<br>
---* param out The value to populate if successful.<br>
---* return True if a valid Vector3 was parsed, false otherwise.
---@param str char@ #char str
---@param out vec3_table@ #vec3_table out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:parseVec3(str,out) end
---* Attempts to parse the specified string as an axis-angle value.<br>
---* The specified string is expected to contain four comma-separated<br>
---* values, where the first three values represents the axis and the<br>
---* fourth value represents the angle, in degrees.<br>
---* On error, false is returned and the output is set to all zero values.<br>
---* param str The string to parse.<br>
---* param out A Quaternion populated with the orientation of the axis-angle, if successful.<br>
---* return True if a valid axis-angle was parsed, false otherwise.
---@param str char@ #char str
---@param out cc.Quaternion@ #cc.Quaternion out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:parseAxisAngle(str,out) end
---* Attempts to parse the specified string as a Vector2 value.<br>
---* On error, false is returned and the output is set to all zero values.<br>
---* param str The string to parse.<br>
---* param out The value to populate if successful.<br>
---* return True if a valid Vector2 was parsed, false otherwise.
---@param str char@ #char str
---@param out vec2_table@ #vec2_table out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:parseVec2(str,out) end
---* Attempts to parse the specified string as a Vector4 value.<br>
---* On error, false is returned and the output is set to all zero values.<br>
---* param str The string to parse.<br>
---* param out The value to populate if successful.<br>
---* return True if a valid Vector4 was parsed, false otherwise.
---@param str char@ #char str
---@param out vec4_table@ #vec4_table out
---@return boolean@ bool#bool ret (return value: bool)
function Properties:parseVec4(str,out) end


---@class cc.ProtectedNode :  Node
local ProtectedNode={ }
---@class ProtectedNode : cc.ProtectedNode
cc.ProtectedNode=ProtectedNode


---@param child cc.Node@ #cc.Node child
---@param localZOrder int@ #int localZOrder
---@param tag int@ #int tag
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
---@overload fun(child:cc.Node,localZOrder:int):cc.ProtectedNode
---@overload fun(child:cc.Node):cc.ProtectedNode
---@overload fun(child:cc.Node,localZOrder:int,tag:int):cc.ProtectedNode
function ProtectedNode:addProtectedChild(child,localZOrder,tag) end
---* 
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:disableCascadeColor() end
---* Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter.<br>
---* param tag       An integer number that identifies a child node.<br>
---* param cleanup   true if all running actions and callbacks on the child node will be cleanup, false otherwise.
---@param tag int@ #int tag
---@param cleanup boolean@ #bool cleanup
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:removeProtectedChildByTag(tag,cleanup) end
---* Reorders a child according to a new z value.<br>
---* param child     An already added child node. It MUST be already added.<br>
---* param localZOrder Z order for drawing priority. Please refer to setLocalZOrder(int)
---@param child cc.Node@ #cc.Node child
---@param localZOrder int@ #int localZOrder
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:reorderProtectedChild(child,localZOrder) end
---* Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.<br>
---* param cleanup   true if all running actions on all children nodes should be cleanup, false otherwise.<br>
---* js removeAllChildren<br>
---* lua removeAllChildren
---@param cleanup boolean@ #bool cleanup
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:removeAllProtectedChildrenWithCleanup(cleanup) end
---* 
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:disableCascadeOpacity() end
---* Sorts the children array once before drawing, instead of every time when a child is added or reordered.<br>
---* This approach can improves the performance massively.<br>
---* note Don't call this manually unless a child added needs to be removed in the same frame
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:sortAllProtectedChildren() end
---* Gets a child from the container with its tag.<br>
---* param tag   An identifier to find the child node.<br>
---* return a Node object whose tag equals to the input parameter.
---@param tag int@ #int tag
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ProtectedNode:getProtectedChildByTag(tag) end
---* Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.<br>
---* param child     The child node which will be removed.<br>
---* param cleanup   true if all running actions and callbacks on the child node will be cleanup, false otherwise.
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:removeProtectedChild(child,cleanup) end
---* Removes all children from the container with a cleanup.<br>
---* see `removeAllChildrenWithCleanup(bool)`.
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:removeAllProtectedChildren() end
---* Creates a ProtectedNode with no argument.<br>
---* return A instance of ProtectedNode.
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode ret (return value: cc.ProtectedNode)
function ProtectedNode:create() end
---* 
---@param mask unsigned short@ #unsigned short mask
---@param applyChildren boolean@ #bool applyChildren
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:setCameraMask(mask,applyChildren) end
---* 
---@param globalZOrder float@ #float globalZOrder
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:setGlobalZOrder(globalZOrder) end
---* js NA
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:visit(renderer,parentTransform,parentFlags) end
---* 
---@param parentOpacity unsigned_char@ #unsigned char parentOpacity
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:updateDisplayedOpacity(parentOpacity) end
---* 
---@param parentColor color3b_table@ #color3b_table parentColor
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:updateDisplayedColor(parentColor) end
---* 
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:cleanup() end
---* 
---@return cc.ProtectedNode@ ProtectedNode#ProtectedNode self (return value: cc.ProtectedNode)
function ProtectedNode:ProtectedNode() end


---@class cc.PUParticleSystem3D :  ParticleSystem3D
local PUParticleSystem3D={ }
---@class PUParticleSystem3D : cc.PUParticleSystem3D
cc.PUParticleSystem3D=PUParticleSystem3D


---* 
---@param filePath string@ #string filePath
---@return boolean@ bool#bool ret (return value: bool)
function PUParticleSystem3D:initWithFilePath(filePath) end
---* Returns the velocity scale, defined in the particle system, but passed to the technique for convenience.
---@return float@ float#float ret (return value: float)
function PUParticleSystem3D:getParticleSystemScaleVelocity() end
---* 
---@param quota unsigned_int@ #unsigned int quota
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setEmittedSystemQuota(quota) end
---* default particle depth
---@return float@ float#float ret (return value: float)
function PUParticleSystem3D:getDefaultDepth() end
---* 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function PUParticleSystem3D:getEmittedSystemQuota() end
---* 
---@param filePath string@ #string filePath
---@param materialPath string@ #string materialPath
---@return boolean@ bool#bool ret (return value: bool)
function PUParticleSystem3D:initWithFilePathAndMaterialPath(filePath,materialPath) end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:clearAllParticles() end
---* 
---@return string@ string#string ret (return value: string)
function PUParticleSystem3D:getMaterialName() end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:calulateRotationOffset() end
---* Return the maximum velocity a particle can have, even if the velocity of the particle has been set higher (either by initialisation of the particle or by means of an affector).
---@return float@ float#float ret (return value: float)
function PUParticleSystem3D:getMaxVelocity() end
---* 
---@param delta float@ #float delta
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:forceUpdate(delta) end
---* 
---@return float@ float#float ret (return value: float)
function PUParticleSystem3D:getTimeElapsedSinceStart() end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:removeAllBehaviourTemplate() end
---* 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function PUParticleSystem3D:getEmittedEmitterQuota() end
---*  Forces emission of particles.<br>
---* remarks The number of requested particles are the exact number that are emitted. No down-scaling is applied.
---@param emitter cc.PUEmitter@ #cc.PUEmitter emitter
---@param requested unsigned_int@ #unsigned int requested
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:forceEmission(emitter,requested) end
---* 
---@param listener cc.PUListener@ #cc.PUListener listener
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:addListener(listener) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function PUParticleSystem3D:isMarkedForEmission() end
---* default particle width
---@return float@ float#float ret (return value: float)
function PUParticleSystem3D:getDefaultWidth() end
---* 
---@param quota unsigned_int@ #unsigned int quota
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setEmittedEmitterQuota(quota) end
---* 
---@param isMarked boolean@ #bool isMarked
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setMarkedForEmission(isMarked) end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D ret (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:clone() end
---* add particle affector
---@param emitter cc.PUEmitter@ #cc.PUEmitter emitter
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:addEmitter(emitter) end
---* 
---@param behaviour cc.PUBehaviour@ #cc.PUBehaviour behaviour
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:addBehaviourTemplate(behaviour) end
---* 
---@param width float@ #float width
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setDefaultWidth(width) end
---* 
---@param system cc.PUParticleSystem3D@ #cc.PUParticleSystem3D system
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:copyAttributesTo(system) end
---* 
---@param name string@ #string name
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setMaterialName(name) end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D ret (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:getParentParticleSystem() end
---* 
---@param listener cc.PUListener@ #cc.PUListener listener
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:removeListener(listener) end
---* Set the maximum velocity a particle can have.
---@param maxVelocity float@ #float maxVelocity
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setMaxVelocity(maxVelocity) end
---* default particle height
---@return float@ float#float ret (return value: float)
function PUParticleSystem3D:getDefaultHeight() end
---* 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function PUParticleSystem3D:getDerivedPosition() end
---* If the orientation of the particle system has been changed since the last update, the passed vector is rotated accordingly.
---@param pos vec3_table@ #vec3_table pos
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:rotationOffset(pos) end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:removeAllEmitter() end
---* 
---@param scaleVelocity float@ #float scaleVelocity
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setParticleSystemScaleVelocity(scaleVelocity) end
---* 
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function PUParticleSystem3D:getDerivedScale() end
---* 
---@param height float@ #float height
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setDefaultHeight(height) end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:removeAllListener() end
---* 
---@param filePath string@ #string filePath
---@return boolean@ bool#bool ret (return value: bool)
function PUParticleSystem3D:initSystem(filePath) end
---* 
---@param particle cc.PUParticle3D@ #cc.PUParticle3D particle
---@return boolean@ bool#bool ret (return value: bool)
function PUParticleSystem3D:makeParticleLocal(particle) end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:removerAllObserver() end
---* 
---@param depth float@ #float depth
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:setDefaultDepth(depth) end
---* 
---@param observer cc.PUObserver@ #cc.PUObserver observer
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:addObserver(observer) end
---@param filePath string@ #string filePath
---@param materialPath string@ #string materialPath
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D ret (return value: cc.PUParticleSystem3D)
---@overload fun(filePath:string):cc.PUParticleSystem3D
---@overload fun():cc.PUParticleSystem3D
---@overload fun(filePath:string,materialPath:string):cc.PUParticleSystem3D
function PUParticleSystem3D:create(filePath,materialPath) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:draw(renderer,transform,flags) end
---* particle system play control
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:startParticleSystem() end
---* stop particle
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:stopParticleSystem() end
---* 
---@param delta float@ #float delta
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:update(delta) end
---* pause particle
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:pauseParticleSystem() end
---* resume particle
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:resumeParticleSystem() end
---* 
---@return int@ int#int ret (return value: int)
function PUParticleSystem3D:getAliveParticleCount() end
---* 
---@return cc.PUParticleSystem3D@ PUParticleSystem3D#PUParticleSystem3D self (return value: cc.PUParticleSystem3D)
function PUParticleSystem3D:PUParticleSystem3D() end


---@class ccui.RadioButton :  AbstractCheckButton
local RadioButton={ }
---@class RadioButton : ccui.RadioButton
ccui.RadioButton=RadioButton


---* Add a callback function which would be called when radio button is selected or unselected.<br>
---* param callback A std::function with type @see `ccRadioButtonCallback`
---@param callback function@ #function callback
---@return ccui.RadioButton@ RadioButton#RadioButton self (return value: ccui.RadioButton)
function RadioButton:addEventListener(callback) end
---@param backGround string@ #string backGround
---@param backGroundSelected string@ #string backGroundSelected
---@param cross string@ #string cross
---@param backGroundDisabled string@ #string backGroundDisabled
---@param frontCrossDisabled string@ #string frontCrossDisabled
---@param texType int@ #int texType
---@return ccui.RadioButton@ RadioButton#RadioButton ret (return value: ccui.RadioButton)
---@overload fun(backGround:string,backGroundSelected:string,cross:string,backGroundDisabled:string,frontCrossDisabled:string,texType:int):ccui.RadioButton
---@overload fun():ccui.RadioButton
---@overload fun(backGround:string,backGroundSelected:string,unkown2:int):ccui.RadioButton
function RadioButton:create(backGround,backGroundSelected,cross,backGroundDisabled,frontCrossDisabled,texType) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function RadioButton:createInstance() end
---* 
---@return string@ string#string ret (return value: string)
function RadioButton:getDescription() end
---* Default constructor.<br>
---* lua new
---@return ccui.RadioButton@ RadioButton#RadioButton self (return value: ccui.RadioButton)
function RadioButton:RadioButton() end


---@class ccui.RadioButtonGroup :  Widget
local RadioButtonGroup={ }
---@class RadioButtonGroup : ccui.RadioButtonGroup
ccui.RadioButtonGroup=RadioButtonGroup


---* Remove a radio button from this group.<br>
---* param radio button instance
---@param radioButton ccui.RadioButton@ #ccui.RadioButton radioButton
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
function RadioButtonGroup:removeRadioButton(radioButton) end
---* Query whether no-selection is allowed or not.<br>
---* param true means no-selection is allowed, false means no-selection is not allowed.
---@return boolean@ bool#bool ret (return value: bool)
function RadioButtonGroup:isAllowedNoSelection() end
---* Get the index of selected radio button.<br>
---* return the selected button's index. Returns -1 if no button is selected.
---@return int@ int#int ret (return value: int)
function RadioButtonGroup:getSelectedButtonIndex() end
---* Set a flag for allowing no-selection feature.<br>
---* If it is allowed, no radio button can be selected.<br>
---* If it is not allowed, one radio button must be selected all time except it is empty.<br>
---* Default is not allowed.<br>
---* param true means allowing no-selection, false means disallowing no-selection.
---@param allowedNoSelection boolean@ #bool allowedNoSelection
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
function RadioButtonGroup:setAllowedNoSelection(allowedNoSelection) end
---@param index int@ #int index
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
---@overload fun(unkown0:ccui.RadioButton):ccui.RadioButtonGroup
---@overload fun(index:int):ccui.RadioButtonGroup
function RadioButtonGroup:setSelectedButtonWithoutEvent(index) end
---* Add a callback function which would be called when radio button is selected or unselected.<br>
---* param callback A std::function with type @see `ccRadioButtonGroupCallback`
---@param callback function@ #function callback
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
function RadioButtonGroup:addEventListener(callback) end
---* Remove all radio button from this group.
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
function RadioButtonGroup:removeAllRadioButtons() end
---* Get a radio button in this group by index.<br>
---* param index of the radio button<br>
---* return radio button instance. Returns nullptr if out of index.
---@param index int@ #int index
---@return ccui.RadioButton@ RadioButton#RadioButton ret (return value: ccui.RadioButton)
function RadioButtonGroup:getRadioButtonByIndex(index) end
---* Get the number of radio buttons in this group.<br>
---* return the number of radio buttons in this group
---@return int@ int#int ret (return value: int)
function RadioButtonGroup:getNumberOfRadioButtons() end
---* Add a radio button into this group.<br>
---* param radio button instance
---@param radioButton ccui.RadioButton@ #ccui.RadioButton radioButton
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
function RadioButtonGroup:addRadioButton(radioButton) end
---@param index int@ #int index
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
---@overload fun(unkown0:ccui.RadioButton):ccui.RadioButtonGroup
---@overload fun(index:int):ccui.RadioButtonGroup
function RadioButtonGroup:setSelectedButton(index) end
---* Create and return a empty RadioButtonGroup instance pointer.
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup ret (return value: ccui.RadioButtonGroup)
function RadioButtonGroup:create() end
---* 
---@return string@ string#string ret (return value: string)
function RadioButtonGroup:getDescription() end
---* Default constructor.<br>
---* lua new
---@return ccui.RadioButtonGroup@ RadioButtonGroup#RadioButtonGroup self (return value: ccui.RadioButtonGroup)
function RadioButtonGroup:RadioButtonGroup() end


---@class cc.Ref 
local Ref={ }
---@class Ref : cc.Ref
cc.Ref=Ref


---* Releases the ownership immediately.<br>
---* This decrements the Ref's reference count.<br>
---* If the reference count reaches 0 after the decrement, this Ref is<br>
---* destructed.<br>
---* see retain, autorelease<br>
---* js NA
---@return cc.Ref@ Ref#Ref self (return value: cc.Ref)
function Ref:release() end
---* Retains the ownership.<br>
---* This increases the Ref's reference count.<br>
---* see release, autorelease<br>
---* js NA
---@return cc.Ref@ Ref#Ref self (return value: cc.Ref)
function Ref:retain() end
---* Returns the Ref's current reference count.<br>
---* returns The Ref's reference count.<br>
---* js NA
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Ref:getReferenceCount() end


---@class ccui.RelativeBox :  Layout
local RelativeBox={ }
---@class RelativeBox : ccui.RelativeBox
ccui.RelativeBox=RelativeBox


---* 
---@param size size_table@ #size_table size
---@return boolean@ bool#bool ret (return value: bool)
function RelativeBox:initWithSize(size) end
---@param size size_table@ #size_table size
---@return ccui.RelativeBox@ RelativeBox#RelativeBox ret (return value: ccui.RelativeBox)
---@overload fun(size:size_table):ccui.RelativeBox
---@overload fun():ccui.RelativeBox
function RelativeBox:create(size) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RelativeBox:init() end
---* Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.RelativeBox@ RelativeBox#RelativeBox self (return value: ccui.RelativeBox)
function RelativeBox:RelativeBox() end


---@class ccui.RelativeLayoutParameter :  LayoutParameter
local RelativeLayoutParameter={ }
---@class RelativeLayoutParameter : ccui.RelativeLayoutParameter
ccui.RelativeLayoutParameter=RelativeLayoutParameter


---* Sets RelativeAlign parameter for LayoutParameter.<br>
---* see RelativeAlign<br>
---* param align Relative align in  `RelativeAlign`.
---@param align int@ #int align
---@return ccui.RelativeLayoutParameter@ RelativeLayoutParameter#RelativeLayoutParameter self (return value: ccui.RelativeLayoutParameter)
function RelativeLayoutParameter:setAlign(align) end
---* Set widget name your widget want to relative to.<br>
---* param name Relative widget name.
---@param name string@ #string name
---@return ccui.RelativeLayoutParameter@ RelativeLayoutParameter#RelativeLayoutParameter self (return value: ccui.RelativeLayoutParameter)
function RelativeLayoutParameter:setRelativeToWidgetName(name) end
---* Get a name of LayoutParameter in Relative Layout.<br>
---* return name Relative name in string.
---@return string@ string#string ret (return value: string)
function RelativeLayoutParameter:getRelativeName() end
---* Get the relative widget name.<br>
---* return name A relative widget name in string.
---@return string@ string#string ret (return value: string)
function RelativeLayoutParameter:getRelativeToWidgetName() end
---* Set a name for LayoutParameter in Relative Layout.<br>
---* param name A string name.
---@param name string@ #string name
---@return ccui.RelativeLayoutParameter@ RelativeLayoutParameter#RelativeLayoutParameter self (return value: ccui.RelativeLayoutParameter)
function RelativeLayoutParameter:setRelativeName(name) end
---* Get RelativeAlign parameter for LayoutParameter.<br>
---* see RelativeAlign<br>
---* return  A RelativeAlign variable.
---@return int@ int#int ret (return value: int)
function RelativeLayoutParameter:getAlign() end
---* Create a RelativeLayoutParameter instance.<br>
---* return A initialized LayoutParameter which is marked as "autorelease".
---@return ccui.RelativeLayoutParameter@ RelativeLayoutParameter#RelativeLayoutParameter ret (return value: ccui.RelativeLayoutParameter)
function RelativeLayoutParameter:create() end
---* 
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter ret (return value: ccui.LayoutParameter)
function RelativeLayoutParameter:createCloneInstance() end
---* 
---@param model ccui.LayoutParameter@ #ccui.LayoutParameter model
---@return ccui.RelativeLayoutParameter@ RelativeLayoutParameter#RelativeLayoutParameter self (return value: ccui.RelativeLayoutParameter)
function RelativeLayoutParameter:copyProperties(model) end
---* Default constructor<br>
---* lua new
---@return ccui.RelativeLayoutParameter@ RelativeLayoutParameter#RelativeLayoutParameter self (return value: ccui.RelativeLayoutParameter)
function RelativeLayoutParameter:RelativeLayoutParameter() end


---@class cc.RemoveSelf :  ActionInstant
local RemoveSelf={ }
---@class RemoveSelf : cc.RemoveSelf
cc.RemoveSelf=RemoveSelf


---*  init the action 
---@param isNeedCleanUp boolean@ #bool isNeedCleanUp
---@return boolean@ bool#bool ret (return value: bool)
function RemoveSelf:init(isNeedCleanUp) end
---*  Create the action.<br>
---* param isNeedCleanUp Is need to clean up, the default value is true.<br>
---* return An autoreleased RemoveSelf object.
---@return cc.RemoveSelf@ RemoveSelf#RemoveSelf ret (return value: cc.RemoveSelf)
function RemoveSelf:create() end
---* 
---@return cc.RemoveSelf@ RemoveSelf#RemoveSelf ret (return value: cc.RemoveSelf)
function RemoveSelf:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.RemoveSelf@ RemoveSelf#RemoveSelf self (return value: cc.RemoveSelf)
function RemoveSelf:update(time) end
---* 
---@return cc.RemoveSelf@ RemoveSelf#RemoveSelf ret (return value: cc.RemoveSelf)
function RemoveSelf:reverse() end
---* 
---@return cc.RemoveSelf@ RemoveSelf#RemoveSelf self (return value: cc.RemoveSelf)
function RemoveSelf:RemoveSelf() end


---@class cc.RenderState :  Ref
local RenderState={ }
---@class RenderState : cc.RenderState
cc.RenderState=RenderState


---*  Texture that will use in the CC_Texture0 uniform.<br>
---* Added to be backwards compatible. Use Samplers from .material instead.
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.RenderState@ RenderState#RenderState self (return value: cc.RenderState)
function RenderState:setTexture(texture) end
---* Returns the topmost RenderState in the hierarchy below the given RenderState.
---@param below cc.RenderState@ #cc.RenderState below
---@return cc.RenderState@ RenderState#RenderState ret (return value: cc.RenderState)
function RenderState:getTopmost(below) end
---*  Returns the texture that is going to be used for CC_Texture0.<br>
---* Added to be backwards compatible.
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function RenderState:getTexture() end
---* Binds the render state for this RenderState and any of its parents, top-down,<br>
---* for the given pass.
---@param pass cc.Pass@ #cc.Pass pass
---@return cc.RenderState@ RenderState#RenderState self (return value: cc.RenderState)
function RenderState:bind(pass) end
---* 
---@return string@ string#string ret (return value: string)
function RenderState:getName() end
---* 
---@return cc.RenderState.StateBlock@ RenderState::StateBlock#RenderState::StateBlock ret (return value: cc.RenderState::StateBlock)
function RenderState:getStateBlock() end
---* 
---@param parent cc.RenderState@ #cc.RenderState parent
---@return cc.RenderState@ RenderState#RenderState self (return value: cc.RenderState)
function RenderState:setParent(parent) end
---* Static initializer that is called during game startup.
---@return cc.RenderState@ RenderState#RenderState self (return value: cc.RenderState)
function RenderState:initialize() end


---@class cc.RenderTexture :  Node
local RenderTexture={ }
---@class RenderTexture : cc.RenderTexture
cc.RenderTexture=RenderTexture


---* Used for grab part of screen to a texture. <br>
---* param rtBegin The position of renderTexture on the fullRect.<br>
---* param fullRect The total size of screen.<br>
---* param fullViewport The total viewportSize.
---@param rtBegin vec2_table@ #vec2_table rtBegin
---@param fullRect rect_table@ #rect_table fullRect
---@param fullViewport rect_table@ #rect_table fullViewport
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setVirtualViewport(rtBegin,fullRect,fullViewport) end
---*  Clears the texture with a specified stencil value.<br>
---* param stencilValue A specified stencil value.
---@param stencilValue int@ #int stencilValue
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:clearStencil(stencilValue) end
---*  Value for clearDepth. Valid only when "autoDraw" is true. <br>
---* return Value for clearDepth.
---@return float@ float#float ret (return value: float)
function RenderTexture:getClearDepth() end
---*  Value for clear Stencil. Valid only when "autoDraw" is true.<br>
---* return Value for clear Stencil.
---@return int@ int#int ret (return value: int)
function RenderTexture:getClearStencil() end
---*  Set Value for clear Stencil.<br>
---* param clearStencil Value for clear Stencil.
---@param clearStencil int@ #int clearStencil
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setClearStencil(clearStencil) end
---*  Sets the Sprite being used. <br>
---* param sprite A Sprite.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setSprite(sprite) end
---*  Gets the Sprite being used. <br>
---* return A Sprite.
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function RenderTexture:getSprite() end
---*  When enabled, it will render its children into the texture automatically. Disabled by default for compatibility reasons.<br>
---* Will be enabled in the future.<br>
---* return Return the autoDraw value.
---@return boolean@ bool#bool ret (return value: bool)
function RenderTexture:isAutoDraw() end
---*  Flag: Use stack matrix computed from scene hierarchy or generate new modelView and projection matrix.<br>
---* param keepMatrix Whether or not use stack matrix computed from scene hierarchy or generate new modelView and projection matrix.<br>
---* js NA
---@param keepMatrix boolean@ #bool keepMatrix
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setKeepMatrix(keepMatrix) end
---*  Set flags.<br>
---* param clearFlags Valid flags: GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_STENCIL_BUFFER_BIT.
---@param clearFlags unsigned_int@ #unsigned int clearFlags
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setClearFlags(clearFlags) end
---*  Starts grabbing. 
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:begin() end
---@param filename string@ #string filename
---@param format int@ #int format
---@param isRGBA boolean@ #bool isRGBA
---@param callback function@ #function callback
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(filename:string,format:int,isRGBA:boolean,callback:function):boolean
---@overload fun(filename:string,unkown1:boolean,unkown2:function):boolean
function RenderTexture:saveToFile(filename,format,isRGBA,callback) end
---*  Set a valve to control whether or not render its children into the texture automatically. <br>
---* param isAutoDraw Whether or not render its children into the texture automatically.
---@param isAutoDraw boolean@ #bool isAutoDraw
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setAutoDraw(isAutoDraw) end
---*  Set color value. <br>
---* param clearColor Color value.
---@param clearColor color4f_table@ #color4f_table clearColor
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setClearColor(clearColor) end
---*  Ends grabbing.<br>
---* lua endToLua
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:endToLua() end
---@param r float@ #float r
---@param g float@ #float g
---@param b float@ #float b
---@param a float@ #float a
---@param depthValue float@ #float depthValue
---@param stencilValue int@ #int stencilValue
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
---@overload fun(r:float,g:float,b:float,a:float,depthValue:float):cc.RenderTexture
---@overload fun(r:float,g:float,b:float,a:float):cc.RenderTexture
---@overload fun(r:float,g:float,b:float,a:float,depthValue:float,stencilValue:int):cc.RenderTexture
function RenderTexture:beginWithClear(r,g,b,a,depthValue,stencilValue) end
---*  Clears the texture with a specified depth value. <br>
---* param depthValue A specified depth value.
---@param depthValue float@ #float depthValue
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:clearDepth(depthValue) end
---*  Clear color value. Valid only when "autoDraw" is true. <br>
---* return Color value.
---@return color4f_table@ color4f_table#color4f_table ret (return value: color4f_table)
function RenderTexture:getClearColor() end
---*  Clears the texture with a color. <br>
---* param r Red.<br>
---* param g Green.<br>
---* param b Blue.<br>
---* param a Alpha.
---@param r float@ #float r
---@param g float@ #float g
---@param b float@ #float b
---@param a float@ #float a
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:clear(r,g,b,a) end
---*  Valid flags: GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_STENCIL_BUFFER_BIT. They can be OR'ed. Valid when "autoDraw" is true. <br>
---* return Clear flags.
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function RenderTexture:getClearFlags() end
---* 
---@return cc.Image@ Image#Image ret (return value: cc.Image)
function RenderTexture:newImage() end
---*  Set Value for clearDepth.<br>
---* param clearDepth Value for clearDepth.
---@param clearDepth float@ #float clearDepth
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:setClearDepth(clearDepth) end
---@param w int@ #int w
---@param h int@ #int h
---@param format int@ #int format
---@param depthStencilFormat unsigned_int@ #unsigned int depthStencilFormat
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(w:int,h:int,format:int,depthStencilFormat:unsigned_int):boolean
---@overload fun(w:int,h:int,format:int):boolean
function RenderTexture:initWithWidthAndHeight(w,h,format,depthStencilFormat) end
---@param w int@ #int w
---@param h int@ #int h
---@param format int@ #int format
---@param depthStencilFormat unsigned_int@ #unsigned int depthStencilFormat
---@return cc.RenderTexture@ RenderTexture#RenderTexture ret (return value: cc.RenderTexture)
---@overload fun(w:int,h:int,format:int):cc.RenderTexture
---@overload fun(w:int,h:int,format:int,depthStencilFormat:unsigned_int):cc.RenderTexture
---@overload fun(w:int,h:int):cc.RenderTexture
function RenderTexture:create(w,h,format,depthStencilFormat) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:draw(renderer,transform,flags) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:visit(renderer,parentTransform,parentFlags) end
---*  FIXME: should be protected.<br>
---* but due to a bug in PowerVR + Android,<br>
---* the constructor is public again.<br>
---* js ctor
---@return cc.RenderTexture@ RenderTexture#RenderTexture self (return value: cc.RenderTexture)
function RenderTexture:RenderTexture() end


---@class cc.Repeat :  ActionInterval
local Repeat={ }
---@class Repeat : cc.Repeat
cc.Repeat=Repeat


---*  Sets the inner action.<br>
---* param action The inner action.
---@param action cc.FiniteTimeAction@ #cc.FiniteTimeAction action
---@return cc.Repeat@ Repeat#Repeat self (return value: cc.Repeat)
function Repeat:setInnerAction(action) end
---*  initializes a Repeat action. Times is an unsigned integer between 1 and pow(2,30) 
---@param pAction cc.FiniteTimeAction@ #cc.FiniteTimeAction pAction
---@param times unsigned_int@ #unsigned int times
---@return boolean@ bool#bool ret (return value: bool)
function Repeat:initWithAction(pAction,times) end
---*  Gets the inner action.<br>
---* return The inner action.
---@return cc.FiniteTimeAction@ FiniteTimeAction#FiniteTimeAction ret (return value: cc.FiniteTimeAction)
function Repeat:getInnerAction() end
---*  Creates a Repeat action. Times is an unsigned integer between 1 and pow(2,30).<br>
---* param action The action needs to repeat.<br>
---* param times The repeat times.<br>
---* return An autoreleased Repeat object.
---@param action cc.FiniteTimeAction@ #cc.FiniteTimeAction action
---@param times unsigned_int@ #unsigned int times
---@return cc.Repeat@ Repeat#Repeat ret (return value: cc.Repeat)
function Repeat:create(action,times) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.Repeat@ Repeat#Repeat self (return value: cc.Repeat)
function Repeat:startWithTarget(target) end
---* 
---@return cc.Repeat@ Repeat#Repeat ret (return value: cc.Repeat)
function Repeat:reverse() end
---* 
---@return cc.Repeat@ Repeat#Repeat ret (return value: cc.Repeat)
function Repeat:clone() end
---* 
---@return cc.Repeat@ Repeat#Repeat self (return value: cc.Repeat)
function Repeat:stop() end
---* param dt In seconds.
---@param dt float@ #float dt
---@return cc.Repeat@ Repeat#Repeat self (return value: cc.Repeat)
function Repeat:update(dt) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Repeat:isDone() end
---* 
---@return cc.Repeat@ Repeat#Repeat self (return value: cc.Repeat)
function Repeat:Repeat() end


---@class cc.RepeatForever :  ActionInterval
local RepeatForever={ }
---@class RepeatForever : cc.RepeatForever
cc.RepeatForever=RepeatForever


---*  Sets the inner action.<br>
---* param action The inner action.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.RepeatForever@ RepeatForever#RepeatForever self (return value: cc.RepeatForever)
function RepeatForever:setInnerAction(action) end
---*  initializes the action 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return boolean@ bool#bool ret (return value: bool)
function RepeatForever:initWithAction(action) end
---*  Gets the inner action.<br>
---* return The inner action.
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function RepeatForever:getInnerAction() end
---*  Creates the action.<br>
---* param action The action need to repeat forever.<br>
---* return An autoreleased RepeatForever object.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.RepeatForever@ RepeatForever#RepeatForever ret (return value: cc.RepeatForever)
function RepeatForever:create(action) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.RepeatForever@ RepeatForever#RepeatForever self (return value: cc.RepeatForever)
function RepeatForever:startWithTarget(target) end
---* 
---@return cc.RepeatForever@ RepeatForever#RepeatForever ret (return value: cc.RepeatForever)
function RepeatForever:clone() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RepeatForever:isDone() end
---* 
---@return cc.RepeatForever@ RepeatForever#RepeatForever ret (return value: cc.RepeatForever)
function RepeatForever:reverse() end
---* param dt In seconds.
---@param dt float@ #float dt
---@return cc.RepeatForever@ RepeatForever#RepeatForever self (return value: cc.RepeatForever)
function RepeatForever:step(dt) end
---* 
---@return cc.RepeatForever@ RepeatForever#RepeatForever self (return value: cc.RepeatForever)
function RepeatForever:RepeatForever() end


---@class cc.ReuseGrid :  ActionInstant
local ReuseGrid={ }
---@class ReuseGrid : cc.ReuseGrid
cc.ReuseGrid=ReuseGrid


---* brief Initializes an action with the number of times that the current grid will be reused.<br>
---* param times Specify times the grid will be reused.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param times int@ #int times
---@return boolean@ bool#bool ret (return value: bool)
function ReuseGrid:initWithTimes(times) end
---* brief Create an action with the number of times that the current grid will be reused.<br>
---* param times Specify times the grid will be reused.<br>
---* return Return a pointer of ReuseGrid. When the creation failed, return nil.
---@param times int@ #int times
---@return cc.ReuseGrid@ ReuseGrid#ReuseGrid ret (return value: cc.ReuseGrid)
function ReuseGrid:create(times) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ReuseGrid@ ReuseGrid#ReuseGrid self (return value: cc.ReuseGrid)
function ReuseGrid:startWithTarget(target) end
---* 
---@return cc.ReuseGrid@ ReuseGrid#ReuseGrid ret (return value: cc.ReuseGrid)
function ReuseGrid:clone() end
---* 
---@return cc.ReuseGrid@ ReuseGrid#ReuseGrid ret (return value: cc.ReuseGrid)
function ReuseGrid:reverse() end
---* 
---@return cc.ReuseGrid@ ReuseGrid#ReuseGrid self (return value: cc.ReuseGrid)
function ReuseGrid:ReuseGrid() end


---@class ccui.RichElement :  Ref
local RichElement={ }
---@class RichElement : ccui.RichElement
ccui.RichElement=RichElement


---* 
---@param type int@ #int type
---@return boolean@ bool#bool ret (return value: bool)
function RichElement:equalType(type) end
---* brief Initialize a rich element with different arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in @see `Color3B`.<br>
---* param opacity A opacity value in `GLubyte`.<br>
---* return True if initialize success, false otherwise.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@return boolean@ bool#bool ret (return value: bool)
function RichElement:init(tag,color,opacity) end
---* 
---@param color color3b_table@ #color3b_table color
---@return ccui.RichElement@ RichElement#RichElement self (return value: ccui.RichElement)
function RichElement:setColor(color) end
---* brief Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.RichElement@ RichElement#RichElement self (return value: ccui.RichElement)
function RichElement:RichElement() end


---@class ccui.RichElementCustomNode :  RichElement
local RichElementCustomNode={ }
---@class RichElementCustomNode : ccui.RichElementCustomNode
ccui.RichElementCustomNode=RichElementCustomNode


---* brief Initialize a RichElementCustomNode with various arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in Color3B.<br>
---* param opacity A opacity in GLubyte.<br>
---* param customNode A custom node pointer.<br>
---* return True if initialize success, false otherwise.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@param customNode cc.Node@ #cc.Node customNode
---@return boolean@ bool#bool ret (return value: bool)
function RichElementCustomNode:init(tag,color,opacity,customNode) end
---* brief Create a RichElementCustomNode with various arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in Color3B.<br>
---* param opacity A opacity in GLubyte.<br>
---* param customNode A custom node pointer.<br>
---* return A RichElementCustomNode instance.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@param customNode cc.Node@ #cc.Node customNode
---@return ccui.RichElementCustomNode@ RichElementCustomNode#RichElementCustomNode ret (return value: ccui.RichElementCustomNode)
function RichElementCustomNode:create(tag,color,opacity,customNode) end
---* brief Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.RichElementCustomNode@ RichElementCustomNode#RichElementCustomNode self (return value: ccui.RichElementCustomNode)
function RichElementCustomNode:RichElementCustomNode() end


---@class ccui.RichElementImage :  RichElement
local RichElementImage={ }
---@class RichElementImage : ccui.RichElementImage
ccui.RichElementImage=RichElementImage


---* 
---@param height int@ #int height
---@return ccui.RichElementImage@ RichElementImage#RichElementImage self (return value: ccui.RichElementImage)
function RichElementImage:setHeight(height) end
---* brief Initialize a RichElementImage with various arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in Color3B.<br>
---* param opacity A opacity in GLubyte.<br>
---* param filePath A image file name.<br>
---* param url uniform resource locator<br>
---* param texType texture type, may be a valid file path, or a sprite frame name<br>
---* return True if initialize success, false otherwise.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@param filePath string@ #string filePath
---@param url string@ #string url
---@param texType int@ #int texType
---@return boolean@ bool#bool ret (return value: bool)
function RichElementImage:init(tag,color,opacity,filePath,url,texType) end
---* 
---@param width int@ #int width
---@return ccui.RichElementImage@ RichElementImage#RichElementImage self (return value: ccui.RichElementImage)
function RichElementImage:setWidth(width) end
---* 
---@param url string@ #string url
---@return ccui.RichElementImage@ RichElementImage#RichElementImage self (return value: ccui.RichElementImage)
function RichElementImage:setUrl(url) end
---* brief Create a RichElementImage with various arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in Color3B.<br>
---* param opacity A opacity in GLubyte.<br>
---* param filePath A image file name.<br>
---* param url uniform resource locator<br>
---* param texType texture type, may be a valid file path, or a sprite frame name<br>
---* return A RichElementImage instance.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@param filePath string@ #string filePath
---@param url string@ #string url
---@param texType int@ #int texType
---@return ccui.RichElementImage@ RichElementImage#RichElementImage ret (return value: ccui.RichElementImage)
function RichElementImage:create(tag,color,opacity,filePath,url,texType) end
---* brief Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.RichElementImage@ RichElementImage#RichElementImage self (return value: ccui.RichElementImage)
function RichElementImage:RichElementImage() end


---@class ccui.RichElementNewLine :  RichElement
local RichElementNewLine={ }
---@class RichElementNewLine : ccui.RichElementNewLine
ccui.RichElementNewLine=RichElementNewLine


---* brief Create a RichElementNewLine with various arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in Color3B.<br>
---* param opacity A opacity in GLubyte.<br>
---* return A RichElementNewLine instance.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@return ccui.RichElementNewLine@ RichElementNewLine#RichElementNewLine ret (return value: ccui.RichElementNewLine)
function RichElementNewLine:create(tag,color,opacity) end
---* brief Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.RichElementNewLine@ RichElementNewLine#RichElementNewLine self (return value: ccui.RichElementNewLine)
function RichElementNewLine:RichElementNewLine() end


---@class ccui.RichElementText :  RichElement
local RichElementText={ }
---@class RichElementText : ccui.RichElementText
ccui.RichElementText=RichElementText


---* brief Initialize a RichElementText with various arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in Color3B.<br>
---* param opacity A opacity in GLubyte.<br>
---* param text Content string.<br>
---* param fontName Content font name.<br>
---* param fontSize Content font size.<br>
---* param flags italics, bold, underline, strikethrough, url, outline, shadow or glow<br>
---* param url uniform resource locator<br>
---* param outlineColor the color of the outline<br>
---* param outlineSize the outline effect size value<br>
---* param shadowColor the shadow effect color value<br>
---* param shadowOffset shadow effect offset value<br>
---* param shadowBlurRadius the shadow effect blur radius<br>
---* param glowColor glow color<br>
---* return True if initialize success, false otherwise.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@param text string@ #string text
---@param fontName string@ #string fontName
---@param fontSize float@ #float fontSize
---@param flags unsigned_int@ #unsigned int flags
---@param url string@ #string url
---@param outlineColor color3b_table@ #color3b_table outlineColor
---@param outlineSize int@ #int outlineSize
---@param shadowColor color3b_table@ #color3b_table shadowColor
---@param shadowOffset size_table@ #size_table shadowOffset
---@param shadowBlurRadius int@ #int shadowBlurRadius
---@param glowColor color3b_table@ #color3b_table glowColor
---@return boolean@ bool#bool ret (return value: bool)
function RichElementText:init(tag,color,opacity,text,fontName,fontSize,flags,url,outlineColor,outlineSize,shadowColor,shadowOffset,shadowBlurRadius,glowColor) end
---* brief Create a RichElementText with various arguments.<br>
---* param tag A integer tag value.<br>
---* param color A color in Color3B.<br>
---* param opacity A opacity in GLubyte.<br>
---* param text Content string.<br>
---* param fontName Content font name.<br>
---* param fontSize Content font size.<br>
---* param flags italics, bold, underline, strikethrough, url, outline, shadow or glow<br>
---* param url uniform resource locator<br>
---* param outlineColor the color of the outline<br>
---* param outlineSize the outline effect size value<br>
---* param shadowColor the shadow effect color value<br>
---* param shadowOffset shadow effect offset value<br>
---* param shadowBlurRadius the shadow effect blur radius<br>
---* param glowColor glow color<br>
---* return RichElementText instance.
---@param tag int@ #int tag
---@param color color3b_table@ #color3b_table color
---@param opacity unsigned_char@ #unsigned char opacity
---@param text string@ #string text
---@param fontName string@ #string fontName
---@param fontSize float@ #float fontSize
---@param flags unsigned_int@ #unsigned int flags
---@param url string@ #string url
---@param outlineColor color3b_table@ #color3b_table outlineColor
---@param outlineSize int@ #int outlineSize
---@param shadowColor color3b_table@ #color3b_table shadowColor
---@param shadowOffset size_table@ #size_table shadowOffset
---@param shadowBlurRadius int@ #int shadowBlurRadius
---@param glowColor color3b_table@ #color3b_table glowColor
---@return ccui.RichElementText@ RichElementText#RichElementText ret (return value: ccui.RichElementText)
function RichElementText:create(tag,color,opacity,text,fontName,fontSize,flags,url,outlineColor,outlineSize,shadowColor,shadowOffset,shadowBlurRadius,glowColor) end
---* brief Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.RichElementText@ RichElementText#RichElementText self (return value: ccui.RichElementText)
function RichElementText:RichElementText() end


---@class ccui.RichText :  Widget
local RichText={ }
---@class RichText : ccui.RichText
ccui.RichText=RichText


---* brief Insert a RichElement at a given index.<br>
---* param element A RichElement type.<br>
---* param index A given index.
---@param element ccui.RichElement@ #ccui.RichElement element
---@param index int@ #int index
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:insertElement(element,index) end
---*  @brief enable the outline of a-tag 
---@param enable boolean@ #bool enable
---@param outlineColor color3b_table@ #color3b_table outlineColor
---@param outlineSize int@ #int outlineSize
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorTextOutline(enable,outlineColor,outlineSize) end
---* 
---@return float@ float#float ret (return value: float)
function RichText:getFontSize() end
---* brief Add a RichElement at the end of RichText.<br>
---* param element A RichElement instance.
---@param element ccui.RichElement@ #ccui.RichElement element
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:pushBackElement(element) end
---* 
---@param enable boolean@ #bool enable
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorTextBold(enable) end
---* 
---@return string@ string#string ret (return value: string)
function RichText:getAnchorFontColor() end
---* 
---@return int@ int#int ret (return value: int)
function RichText:getAnchorTextShadowBlurRadius() end
---*  @brief enable the shadow of a-tag 
---@param enable boolean@ #bool enable
---@param shadowColor color3b_table@ #color3b_table shadowColor
---@param offset size_table@ #size_table offset
---@param blurRadius int@ #int blurRadius
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorTextShadow(enable,shadowColor,offset,blurRadius) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:isAnchorTextItalicEnabled() end
---* 
---@param color string@ #string color
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorFontColor(color) end
---* 
---@param face string@ #string face
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setFontFace(face) end
---* 
---@param enable boolean@ #bool enable
---@param glowColor color3b_table@ #color3b_table glowColor
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorTextGlow(enable,glowColor) end
---* 
---@return int@ int#int ret (return value: int)
function RichText:getHorizontalAlignment() end
---* 
---@param a int@ #int a
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setHorizontalAlignment(a) end
---* 
---@param enable boolean@ #bool enable
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorTextDel(enable) end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function RichText:getAnchorTextOutlineColor3B() end
---* 
---@param color4b color4b_table@ #color4b_table color4b
---@return string@ string#string ret (return value: string)
function RichText:stringWithColor4B(color4b) end
---* 
---@param xml string@ #string xml
---@param defaults map_table@ #map_table defaults
---@param handleOpenUrl function@ #function handleOpenUrl
---@return boolean@ bool#bool ret (return value: bool)
function RichText:initWithXML(xml,defaults,handleOpenUrl) end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function RichText:getAnchorFontColor3B() end
---* brief Rearrange all RichElement in the RichText.<br>
---* It's usually called internally.
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:formatText() end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function RichText:getAnchorTextGlowColor3B() end
---* 
---@param url string@ #string url
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:openUrl(url) end
---* 
---@return string@ string#string ret (return value: string)
function RichText:getFontFace() end
---* 
---@param color string@ #string color
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setFontColor(color) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:isAnchorTextGlowEnabled() end
---* 
---@return map_table@ map_table#map_table ret (return value: map_table)
function RichText:getDefaults() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:isAnchorTextUnderlineEnabled() end
---* 
---@return string@ string#string ret (return value: string)
function RichText:getFontColor() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:isAnchorTextShadowEnabled() end
---* 
---@return int@ int#int ret (return value: int)
function RichText:getAnchorTextOutlineSize() end
---* brief Set vertical space between each RichElement.<br>
---* param space Point in float.
---@param space float@ #float space
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setVerticalSpace(space) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:isAnchorTextDelEnabled() end
---* 
---@param defaults map_table@ #map_table defaults
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setDefaults(defaults) end
---* 
---@param wrapMode int@ #int wrapMode
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setWrapMode(wrapMode) end
---* 
---@param size float@ #float size
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setFontSize(size) end
---@param index int@ #int index
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
---@overload fun(unkown0:ccui.RichElement):ccui.RichText
---@overload fun(index:int):ccui.RichText
function RichText:removeElement(index) end
---* 
---@param enable boolean@ #bool enable
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorTextItalic(enable) end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function RichText:getAnchorTextShadowOffset() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:isAnchorTextBoldEnabled() end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function RichText:getAnchorTextShadowColor3B() end
---* 
---@param color3b color3b_table@ #color3b_table color3b
---@return string@ string#string ret (return value: string)
function RichText:stringWithColor3B(color3b) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:isAnchorTextOutlineEnabled() end
---* 
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function RichText:getFontColor3B() end
---* 
---@return int@ int#int ret (return value: int)
function RichText:getWrapMode() end
---* 
---@param enable boolean@ #bool enable
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:setAnchorTextUnderline(enable) end
---* 
---@param color string@ #string color
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function RichText:color3BWithString(color) end
---* brief Create a empty RichText.<br>
---* return RichText instance.
---@return ccui.RichText@ RichText#RichText ret (return value: ccui.RichText)
function RichText:create() end
---* brief Create a RichText from an XML<br>
---* return RichText instance.
---@param xml string@ #string xml
---@param defaults map_table@ #map_table defaults
---@param handleOpenUrl function@ #function handleOpenUrl
---@return ccui.RichText@ RichText#RichText ret (return value: ccui.RichText)
function RichText:createWithXML(xml,defaults,handleOpenUrl) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function RichText:init() end
---* 
---@return string@ string#string ret (return value: string)
function RichText:getDescription() end
---* 
---@param ignore boolean@ #bool ignore
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:ignoreContentAdaptWithSize(ignore) end
---* brief Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.RichText@ RichText#RichText self (return value: ccui.RichText)
function RichText:RichText() end


---@class cc.Ripple3D :  Grid3DAction
local Ripple3D={ }
---@class Ripple3D : cc.Ripple3D
cc.Ripple3D=Ripple3D


---* brief Set the amplitude rate of ripple effect.<br>
---* param fAmplitudeRate The amplitude rate of ripple effect.
---@param fAmplitudeRate float@ #float fAmplitudeRate
---@return cc.Ripple3D@ Ripple3D#Ripple3D self (return value: cc.Ripple3D)
function Ripple3D:setAmplitudeRate(fAmplitudeRate) end
---* brief Initializes the action with center position, radius, number of waves, amplitude, a grid size and duration.<br>
---* param duration Specify the duration of the Ripple3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param position Specify the center position of the ripple effect.<br>
---* param radius Specify the radius of the ripple effect.<br>
---* param waves Specify the waves count of the ripple effect.<br>
---* param amplitude Specify the amplitude of the ripple effect.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param position vec2_table@ #vec2_table position
---@param radius float@ #float radius
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return boolean@ bool#bool ret (return value: bool)
function Ripple3D:initWithDuration(duration,gridSize,position,radius,waves,amplitude) end
---* brief Get the amplitude rate of ripple effect.<br>
---* return The amplitude rate of ripple effect.
---@return float@ float#float ret (return value: float)
function Ripple3D:getAmplitudeRate() end
---* brief Set the amplitude of ripple effect.<br>
---* param fAmplitude The amplitude of ripple effect.
---@param fAmplitude float@ #float fAmplitude
---@return cc.Ripple3D@ Ripple3D#Ripple3D self (return value: cc.Ripple3D)
function Ripple3D:setAmplitude(fAmplitude) end
---* brief Get the amplitude of ripple effect.<br>
---* return The amplitude of ripple effect.
---@return float@ float#float ret (return value: float)
function Ripple3D:getAmplitude() end
---* brief Set the center position of ripple effect.<br>
---* param position The center position of ripple effect will be set.
---@param position vec2_table@ #vec2_table position
---@return cc.Ripple3D@ Ripple3D#Ripple3D self (return value: cc.Ripple3D)
function Ripple3D:setPosition(position) end
---* brief Get the center position of ripple effect.<br>
---* return The center position of ripple effect.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Ripple3D:getPosition() end
---* brief Create the action with center position, radius, number of waves, amplitude, a grid size and duration.<br>
---* param duration Specify the duration of the Ripple3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param position Specify the center position of the ripple effect.<br>
---* param radius Specify the radius of the ripple effect.<br>
---* param waves Specify the waves count of the ripple effect.<br>
---* param amplitude Specify the amplitude of the ripple effect.<br>
---* return If the creation success, return a pointer of Ripple3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param position vec2_table@ #vec2_table position
---@param radius float@ #float radius
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return cc.Ripple3D@ Ripple3D#Ripple3D ret (return value: cc.Ripple3D)
function Ripple3D:create(duration,gridSize,position,radius,waves,amplitude) end
---* 
---@return cc.Ripple3D@ Ripple3D#Ripple3D ret (return value: cc.Ripple3D)
function Ripple3D:clone() end
---* 
---@param time float@ #float time
---@return cc.Ripple3D@ Ripple3D#Ripple3D self (return value: cc.Ripple3D)
function Ripple3D:update(time) end
---* 
---@return cc.Ripple3D@ Ripple3D#Ripple3D self (return value: cc.Ripple3D)
function Ripple3D:Ripple3D() end


---@class cc.RotateBy :  ActionInterval
local RotateBy={ }
---@class RotateBy : cc.RotateBy
cc.RotateBy=RotateBy


---@param duration float@ #float duration
---@param deltaAngleZ_X float@ #float deltaAngleZ_X
---@param deltaAngleZ_Y float@ #float deltaAngleZ_Y
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(duration:float,deltaAngleZ_X:float,deltaAngleZ_Y:float):boolean
---@overload fun(duration:float,deltaAngleZ_X:float):boolean
---@overload fun(duration:float,unkown1:vec3_table):boolean
function RotateBy:initWithDuration(duration,deltaAngleZ_X,deltaAngleZ_Y) end
---@param duration float@ #float duration
---@param deltaAngleZ_X float@ #float deltaAngleZ_X
---@param deltaAngleZ_Y float@ #float deltaAngleZ_Y
---@return cc.RotateBy@ RotateBy#RotateBy ret (return value: cc.RotateBy)
---@overload fun(duration:float,deltaAngleZ_X:float,deltaAngleZ_Y:float):cc.RotateBy
---@overload fun(duration:float,deltaAngleZ_X:float):cc.RotateBy
---@overload fun(duration:float,unkown1:vec3_table):cc.RotateBy
function RotateBy:create(duration,deltaAngleZ_X,deltaAngleZ_Y) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.RotateBy@ RotateBy#RotateBy self (return value: cc.RotateBy)
function RotateBy:startWithTarget(target) end
---* 
---@return cc.RotateBy@ RotateBy#RotateBy ret (return value: cc.RotateBy)
function RotateBy:clone() end
---* 
---@return cc.RotateBy@ RotateBy#RotateBy ret (return value: cc.RotateBy)
function RotateBy:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.RotateBy@ RotateBy#RotateBy self (return value: cc.RotateBy)
function RotateBy:update(time) end
---* 
---@return cc.RotateBy@ RotateBy#RotateBy self (return value: cc.RotateBy)
function RotateBy:RotateBy() end


---@class cc.RotateTo :  ActionInterval
local RotateTo={ }
---@class RotateTo : cc.RotateTo
cc.RotateTo=RotateTo


---@param duration float@ #float duration
---@param dstAngleX float@ #float dstAngleX
---@param dstAngleY float@ #float dstAngleY
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(duration:float,unkown1:vec3_table):boolean
---@overload fun(duration:float,dstAngleX:float,dstAngleY:float):boolean
function RotateTo:initWithDuration(duration,dstAngleX,dstAngleY) end
---@param duration float@ #float duration
---@param dstAngleX float@ #float dstAngleX
---@param dstAngleY float@ #float dstAngleY
---@return cc.RotateTo@ RotateTo#RotateTo ret (return value: cc.RotateTo)
---@overload fun(duration:float,dstAngleX:float):cc.RotateTo
---@overload fun(duration:float,dstAngleX:float,dstAngleY:float):cc.RotateTo
---@overload fun(duration:float,unkown1:vec3_table):cc.RotateTo
function RotateTo:create(duration,dstAngleX,dstAngleY) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.RotateTo@ RotateTo#RotateTo self (return value: cc.RotateTo)
function RotateTo:startWithTarget(target) end
---* 
---@return cc.RotateTo@ RotateTo#RotateTo ret (return value: cc.RotateTo)
function RotateTo:clone() end
---* 
---@return cc.RotateTo@ RotateTo#RotateTo ret (return value: cc.RotateTo)
function RotateTo:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.RotateTo@ RotateTo#RotateTo self (return value: cc.RotateTo)
function RotateTo:update(time) end
---* 
---@return cc.RotateTo@ RotateTo#RotateTo self (return value: cc.RotateTo)
function RotateTo:RotateTo() end


---@class ccs.RotationFrame :  Frame
local RotationFrame={ }
---@class RotationFrame : ccs.RotationFrame
ccs.RotationFrame=RotationFrame


---* 
---@param rotation float@ #float rotation
---@return ccs.RotationFrame@ RotationFrame#RotationFrame self (return value: ccs.RotationFrame)
function RotationFrame:setRotation(rotation) end
---* 
---@return float@ float#float ret (return value: float)
function RotationFrame:getRotation() end
---* 
---@return ccs.RotationFrame@ RotationFrame#RotationFrame ret (return value: ccs.RotationFrame)
function RotationFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function RotationFrame:clone() end
---* 
---@return ccs.RotationFrame@ RotationFrame#RotationFrame self (return value: ccs.RotationFrame)
function RotationFrame:RotationFrame() end


---@class ccs.RotationSkewFrame :  SkewFrame
local RotationSkewFrame={ }
---@class RotationSkewFrame : ccs.RotationSkewFrame
ccs.RotationSkewFrame=RotationSkewFrame


---* 
---@return ccs.RotationSkewFrame@ RotationSkewFrame#RotationSkewFrame ret (return value: ccs.RotationSkewFrame)
function RotationSkewFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function RotationSkewFrame:clone() end
---* 
---@return ccs.RotationSkewFrame@ RotationSkewFrame#RotationSkewFrame self (return value: ccs.RotationSkewFrame)
function RotationSkewFrame:RotationSkewFrame() end


---@class ccui.Scale9Sprite :  Sprite
local Scale9Sprite={ }
---@class Scale9Sprite : ccui.Scale9Sprite
ccui.Scale9Sprite=Scale9Sprite


---@param sprite cc.Sprite@ #cc.Sprite sprite
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@param offset vec2_table@ #vec2_table offset
---@param originalSize size_table@ #size_table originalSize
---@param capInsets rect_table@ #rect_table capInsets
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(sprite:cc.Sprite,rect:rect_table,rotated:boolean,offset:vec2_table,originalSize:size_table,capInsets:rect_table):boolean
---@overload fun(sprite:cc.Sprite,rect:rect_table,rotated:boolean,unkown3:rect_table):boolean
function Scale9Sprite:updateWithSprite(sprite,rect,rotated,offset,originalSize,capInsets) end
---* Creates and returns a new sprite object with the specified cap insets.<br>
---* You use this method to add cap insets to a sprite or to change the existing<br>
---* cap insets of a sprite. In both cases, you get back a new image and the<br>
---* original sprite remains untouched.<br>
---* param capInsets The values to use for the cap insets.<br>
---* return A Scale9Sprite instance.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
function Scale9Sprite:resizableSpriteWithCapInsets(capInsets) end
---* Returns the Cap Insets
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Scale9Sprite:getCapInsets() end
---* Change the state of 9-slice sprite.<br>
---* see `State`<br>
---* param state A enum value in State.<br>
---* since v3.4
---@param state int@ #int state
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setState(state) end
---* brief Change the bottom sprite's cap inset.<br>
---* param bottomInset The values to use for the cap inset.
---@param bottomInset float@ #float bottomInset
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setInsetBottom(bottomInset) end
---* Initializes a 9-slice sprite with an sprite frame name and with the specified<br>
---* cap insets.<br>
---* Once the sprite is created, you can then call its "setContentSize:" method<br>
---* to resize the sprite will all it's 9-slice goodness interact.<br>
---* It respects the anchorPoint too.<br>
---* param spriteFrameName The sprite frame name.<br>
---* param capInsets The values to use for the cap insets.<br>
---* return True if initializes success, false otherwise.
---@param spriteFrameName string@ #string spriteFrameName
---@param capInsets rect_table@ #rect_table capInsets
---@return boolean@ bool#bool ret (return value: bool)
function Scale9Sprite:initWithSpriteFrameName(spriteFrameName,capInsets) end
---* brief Get the original no 9-sliced sprite<br>
---* return A sprite instance.
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Scale9Sprite:getSprite() end
---* brief Change the top sprite's cap inset.<br>
---* param topInset The values to use for the cap inset.
---@param topInset float@ #float topInset
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setInsetTop(topInset) end
---* Set the slice sprite rendering type.<br>
---* When setting to SIMPLE, only 4 vertexes is used to rendering.<br>
---* otherwise 16 vertexes will be used to rendering.<br>
---* see RenderingType
---@param type int@ #int type
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setRenderingType(type) end
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@param offset vec2_table@ #vec2_table offset
---@param originalSize size_table@ #size_table originalSize
---@param capInsets rect_table@ #rect_table capInsets
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(sprite:cc.Sprite,rect:rect_table,unkown2:rect_table):boolean
---@overload fun(sprite:cc.Sprite,rect:rect_table,rotated:boolean,unkown3:rect_table):boolean
---@overload fun(sprite:cc.Sprite,rect:rect_table,rotated:boolean,offset:vec2_table,originalSize:size_table,capInsets:rect_table):boolean
function Scale9Sprite:init(sprite,rect,rotated,offset,originalSize,capInsets) end
---* brief Change the preferred size of Scale9Sprite.<br>
---* param size A delimitation zone.
---@param size size_table@ #size_table size
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setPreferredSize(size) end
---* brief copies self to copy
---@param copy ccui.Scale9Sprite@ #ccui.Scale9Sprite copy
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:copyTo(copy) end
---* brief Change inner sprite's sprite frame.<br>
---* param spriteFrame A sprite frame pointer.<br>
---* param capInsets The values to use for the cap insets.
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setSpriteFrame(spriteFrame,capInsets) end
---* Query the current bright state.<br>
---* return @see `State`<br>
---* since v3.7
---@return int@ int#int ret (return value: int)
function Scale9Sprite:getState() end
---* brief Query the bottom sprite's cap inset.<br>
---* return The bottom sprite's cap inset.
---@return float@ float#float ret (return value: float)
function Scale9Sprite:getInsetBottom() end
---* brief Toggle 9-slice feature.<br>
---* If Scale9Sprite is 9-slice disabled, the Scale9Sprite will rendered as a normal sprite.<br>
---* warning: Don't use setScale9Enabled(false), use setRenderingType(RenderingType::SIMPLE) instead.<br>
---* The setScale9Enabled(false) is kept only for back back compatibility.<br>
---* param enabled True to enable 9-slice, false otherwise.<br>
---* js NA
---@param enabled boolean@ #bool enabled
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setScale9Enabled(enabled) end
---* brief Query whether the Scale9Sprite is enable 9-slice or not.<br>
---* return True if 9-slice is enabled, false otherwise.<br>
---* js NA
---@return boolean@ bool#bool ret (return value: bool)
function Scale9Sprite:isScale9Enabled() end
---* 
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:resetRender() end
---* Return the slice sprite rendering type.
---@return int@ int#int ret (return value: int)
function Scale9Sprite:getRenderingType() end
---* brief Query the right sprite's cap inset.<br>
---* return The right sprite's cap inset.
---@return float@ float#float ret (return value: float)
function Scale9Sprite:getInsetRight() end
---* brief Query the sprite's original size.<br>
---* return Sprite size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Scale9Sprite:getOriginalSize() end
---@param file string@ #string file
---@param rect rect_table@ #rect_table rect
---@param capInsets rect_table@ #rect_table capInsets
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(unkown0:rect_table,unkown1:string):boolean
---@overload fun(file:string,rect:rect_table,capInsets:rect_table):boolean
function Scale9Sprite:initWithFile(file,rect,capInsets) end
---* brief Query the top sprite's cap inset.<br>
---* return The top sprite's cap inset.
---@return float@ float#float ret (return value: float)
function Scale9Sprite:getInsetTop() end
---* brief Change the left sprite's cap inset.<br>
---* param leftInset The values to use for the cap inset.
---@param leftInset float@ #float leftInset
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setInsetLeft(leftInset) end
---* Initializes a 9-slice sprite with an sprite frame and with the specified<br>
---* cap insets.<br>
---* Once the sprite is created, you can then call its "setContentSize:" method<br>
---* to resize the sprite will all it's 9-slice goodness interact.<br>
---* It respects the anchorPoint too.<br>
---* param spriteFrame The sprite frame object.<br>
---* param capInsets The values to use for the cap insets.<br>
---* return True if initializes success, false otherwise.
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@param capInsets rect_table@ #rect_table capInsets
---@return boolean@ bool#bool ret (return value: bool)
function Scale9Sprite:initWithSpriteFrame(spriteFrame,capInsets) end
---* brief Query the Scale9Sprite's preferred size.<br>
---* return Scale9Sprite's preferred size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Scale9Sprite:getPreferredSize() end
---* Set the Cap Insets in Points using the untrimmed size as reference
---@param insets rect_table@ #rect_table insets
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setCapInsets(insets) end
---* brief Query the left sprite's cap inset.<br>
---* return The left sprite's cap inset.
---@return float@ float#float ret (return value: float)
function Scale9Sprite:getInsetLeft() end
---* brief Change the right sprite's cap inset.<br>
---* param rightInset The values to use for the cap inset.
---@param rightInset float@ #float rightInset
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:setInsetRight(rightInset) end
---@param file string@ #string file
---@param rect rect_table@ #rect_table rect
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
---@overload fun(file:string,rect:rect_table,capInsets:rect_table):ccui.Scale9Sprite
---@overload fun():ccui.Scale9Sprite
---@overload fun(unkown0:rect_table,unkown1:string):ccui.Scale9Sprite
---@overload fun(file:string,rect:rect_table):ccui.Scale9Sprite
---@overload fun(file:string):ccui.Scale9Sprite
function Scale9Sprite:create(file,rect,capInsets) end
---@param spriteFrameName string@ #string spriteFrameName
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
---@overload fun(spriteFrameName:string,capInsets:rect_table):ccui.Scale9Sprite
---@overload fun(spriteFrameName:string):ccui.Scale9Sprite
function Scale9Sprite:createWithSpriteFrameName(spriteFrameName,capInsets) end
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite ret (return value: ccui.Scale9Sprite)
---@overload fun(spriteFrame:cc.SpriteFrame,capInsets:rect_table):ccui.Scale9Sprite
---@overload fun(spriteFrame:cc.SpriteFrame):ccui.Scale9Sprite
function Scale9Sprite:createWithSpriteFrame(spriteFrame,capInsets) end
---* Initializes a 9-slice sprite with an sprite frame name.<br>
---* Once the sprite is created, you can then call its "setContentSize:" method<br>
---* to resize the sprite will all it's 9-slice goodness interact.<br>
---* It respects the anchorPoint too.<br>
---* param spriteFrameName The sprite frame name.<br>
---* return True if initializes success, false otherwise.
---@param spriteFrameName string@ #string spriteFrameName
---@return boolean@ bool#bool ret (return value: bool)
function Scale9Sprite:initWithSpriteFrameName(spriteFrameName) end
---@param file string@ #string file
---@param rect rect_table@ #rect_table rect
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(file:string):boolean
---@overload fun(file:string,rect:rect_table):boolean
function Scale9Sprite:initWithFile(file,rect) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Scale9Sprite:init() end
---* Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.Scale9Sprite@ Scale9Sprite#Scale9Sprite self (return value: ccui.Scale9Sprite)
function Scale9Sprite:Scale9Sprite() end


---@class cc.ScaleBy :  ScaleTo
local ScaleBy={ }
---@class ScaleBy : cc.ScaleBy
cc.ScaleBy=ScaleBy


---@param duration float@ #float duration
---@param sx float@ #float sx
---@param sy float@ #float sy
---@param sz float@ #float sz
---@return cc.ScaleBy@ ScaleBy#ScaleBy ret (return value: cc.ScaleBy)
---@overload fun(duration:float,sx:float,sy:float):cc.ScaleBy
---@overload fun(duration:float,sx:float):cc.ScaleBy
---@overload fun(duration:float,sx:float,sy:float,sz:float):cc.ScaleBy
function ScaleBy:create(duration,sx,sy,sz) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ScaleBy@ ScaleBy#ScaleBy self (return value: cc.ScaleBy)
function ScaleBy:startWithTarget(target) end
---* 
---@return cc.ScaleBy@ ScaleBy#ScaleBy ret (return value: cc.ScaleBy)
function ScaleBy:clone() end
---* 
---@return cc.ScaleBy@ ScaleBy#ScaleBy ret (return value: cc.ScaleBy)
function ScaleBy:reverse() end
---* 
---@return cc.ScaleBy@ ScaleBy#ScaleBy self (return value: cc.ScaleBy)
function ScaleBy:ScaleBy() end


---@class ccs.ScaleFrame :  Frame
local ScaleFrame={ }
---@class ScaleFrame : ccs.ScaleFrame
ccs.ScaleFrame=ScaleFrame


---* 
---@param scaleY float@ #float scaleY
---@return ccs.ScaleFrame@ ScaleFrame#ScaleFrame self (return value: ccs.ScaleFrame)
function ScaleFrame:setScaleY(scaleY) end
---* 
---@param scaleX float@ #float scaleX
---@return ccs.ScaleFrame@ ScaleFrame#ScaleFrame self (return value: ccs.ScaleFrame)
function ScaleFrame:setScaleX(scaleX) end
---* 
---@return float@ float#float ret (return value: float)
function ScaleFrame:getScaleY() end
---* 
---@return float@ float#float ret (return value: float)
function ScaleFrame:getScaleX() end
---* 
---@param scale float@ #float scale
---@return ccs.ScaleFrame@ ScaleFrame#ScaleFrame self (return value: ccs.ScaleFrame)
function ScaleFrame:setScale(scale) end
---* 
---@return ccs.ScaleFrame@ ScaleFrame#ScaleFrame ret (return value: ccs.ScaleFrame)
function ScaleFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function ScaleFrame:clone() end
---* 
---@return ccs.ScaleFrame@ ScaleFrame#ScaleFrame self (return value: ccs.ScaleFrame)
function ScaleFrame:ScaleFrame() end


---@class cc.ScaleTo :  ActionInterval
local ScaleTo={ }
---@class ScaleTo : cc.ScaleTo
cc.ScaleTo=ScaleTo


---@param duration float@ #float duration
---@param sx float@ #float sx
---@param sy float@ #float sy
---@param sz float@ #float sz
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(duration:float,sx:float,sy:float):boolean
---@overload fun(duration:float,sx:float):boolean
---@overload fun(duration:float,sx:float,sy:float,sz:float):boolean
function ScaleTo:initWithDuration(duration,sx,sy,sz) end
---@param duration float@ #float duration
---@param sx float@ #float sx
---@param sy float@ #float sy
---@param sz float@ #float sz
---@return cc.ScaleTo@ ScaleTo#ScaleTo ret (return value: cc.ScaleTo)
---@overload fun(duration:float,sx:float,sy:float):cc.ScaleTo
---@overload fun(duration:float,sx:float):cc.ScaleTo
---@overload fun(duration:float,sx:float,sy:float,sz:float):cc.ScaleTo
function ScaleTo:create(duration,sx,sy,sz) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ScaleTo@ ScaleTo#ScaleTo self (return value: cc.ScaleTo)
function ScaleTo:startWithTarget(target) end
---* 
---@return cc.ScaleTo@ ScaleTo#ScaleTo ret (return value: cc.ScaleTo)
function ScaleTo:clone() end
---* 
---@return cc.ScaleTo@ ScaleTo#ScaleTo ret (return value: cc.ScaleTo)
function ScaleTo:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.ScaleTo@ ScaleTo#ScaleTo self (return value: cc.ScaleTo)
function ScaleTo:update(time) end
---* 
---@return cc.ScaleTo@ ScaleTo#ScaleTo self (return value: cc.ScaleTo)
function ScaleTo:ScaleTo() end


---@class cc.Scene :  Node
local Scene={ }
---@class Scene : cc.Scene
cc.Scene=Scene


---* 
---@return boolean@ bool#bool ret (return value: bool)
function Scene:initWithPhysics() end
---* 
---@return cc.Scene@ Scene#Scene self (return value: cc.Scene)
function Scene:setCameraOrderDirty() end
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param eyeTransforms mat4_table@ #mat4_table eyeTransforms
---@param eyeProjections mat4_table@ #mat4_table eyeProjections
---@param multiViewCount unsigned_int@ #unsigned int multiViewCount
---@return cc.Scene@ Scene#Scene self (return value: cc.Scene)
---@overload fun(renderer:cc.Renderer,eyeTransforms:mat4_table,eyeProjections:mat4_table,multiViewCount:unsigned_int):cc.Scene
---@overload fun(renderer:cc.Renderer,eyeTransforms:mat4_table,eyeProjections:mat4_table):cc.Scene
function Scene:render(renderer,eyeTransforms,eyeProjections,multiViewCount) end
---* 
---@param deltaTime float@ #float deltaTime
---@return cc.Scene@ Scene#Scene self (return value: cc.Scene)
function Scene:stepPhysicsAndNavigation(deltaTime) end
---* 
---@param event cc.EventCustom@ #cc.EventCustom event
---@return cc.Scene@ Scene#Scene self (return value: cc.Scene)
function Scene:onProjectionChanged(event) end
---*  Get the physics world of the scene.<br>
---* return The physics world of the scene.<br>
---* js NA
---@return cc.PhysicsWorld@ PhysicsWorld#PhysicsWorld ret (return value: cc.PhysicsWorld)
function Scene:getPhysicsWorld() end
---* 
---@param size size_table@ #size_table size
---@return boolean@ bool#bool ret (return value: bool)
function Scene:initWithSize(size) end
---*  Get the default camera.<br>
---* js NA<br>
---* return The default camera of scene.
---@return cc.Camera@ Camera#Camera ret (return value: cc.Camera)
function Scene:getDefaultCamera() end
---*  Creates a new Scene object with a predefined Size. <br>
---* param size The predefined size of scene.<br>
---* return An autoreleased Scene object.<br>
---* js NA
---@param size size_table@ #size_table size
---@return cc.Scene@ Scene#Scene ret (return value: cc.Scene)
function Scene:createWithSize(size) end
---*  Creates a new Scene object. <br>
---* return An autoreleased Scene object.
---@return cc.Scene@ Scene#Scene ret (return value: cc.Scene)
function Scene:create() end
---*  Create a scene with physics.<br>
---* return An autoreleased Scene object with physics.<br>
---* js NA
---@return cc.Scene@ Scene#Scene ret (return value: cc.Scene)
function Scene:createWithPhysics() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Scene:init() end
---* 
---@return string@ string#string ret (return value: string)
function Scene:getDescription() end
---*  override function 
---@return cc.Scene@ Scene#Scene self (return value: cc.Scene)
function Scene:removeAllChildren() end
---* 
---@return cc.Scene@ Scene#Scene self (return value: cc.Scene)
function Scene:Scene() end


---@class ccs.SceneReader 
local SceneReader={ }
---@class SceneReader : ccs.SceneReader
ccs.SceneReader=SceneReader


---* 
---@param selector function@ #function selector
---@return ccs.SceneReader@ SceneReader#SceneReader self (return value: ccs.SceneReader)
function SceneReader:setTarget(selector) end
---* 
---@param fileName string@ #string fileName
---@param attachComponent int@ #int attachComponent
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function SceneReader:createNodeWithSceneFile(fileName,attachComponent) end
---* 
---@return int@ int#int ret (return value: int)
function SceneReader:getAttachComponentType() end
---* 
---@param nTag int@ #int nTag
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function SceneReader:getNodeByTag(nTag) end
---* js purge<br>
---* lua destroySceneReader
---@return ccs.SceneReader@ SceneReader#SceneReader self (return value: ccs.SceneReader)
function SceneReader:destroyInstance() end
---* 
---@return char@ char#char ret (return value: char)
function SceneReader:sceneReaderVersion() end
---* 
---@return ccs.SceneReader@ SceneReader#SceneReader ret (return value: ccs.SceneReader)
function SceneReader:getInstance() end


---@class cc.Scheduler :  Ref
local Scheduler={ }
---@class Scheduler : cc.Scheduler
cc.Scheduler=Scheduler


---*  Modifies the time of all scheduled callbacks.<br>
---* You can use this property to create a 'slow motion' or 'fast forward' effect.<br>
---* Default is 1.0. To create a 'slow motion' effect, use values below 1.0.<br>
---* To create a 'fast forward' effect, use values higher than 1.0.<br>
---* since v0.8<br>
---* warning It will affect EVERY scheduled selector / action.
---@param timeScale float@ #float timeScale
---@return cc.Scheduler@ Scheduler#Scheduler self (return value: cc.Scheduler)
function Scheduler:setTimeScale(timeScale) end
---* Remove all pending functions queued to be performed with Scheduler::performFunctionInCocosThread<br>
---* Functions unscheduled in this manner will not be executed<br>
---* This function is thread safe<br>
---* since v3.14<br>
---* js NA
---@return cc.Scheduler@ Scheduler#Scheduler self (return value: cc.Scheduler)
function Scheduler:removeAllFunctionsToBePerformedInCocosThread() end
---* Gets the time scale of schedule callbacks.<br>
---* see Scheduler::setTimeScale()
---@return float@ float#float ret (return value: float)
function Scheduler:getTimeScale() end
---* Constructor<br>
---* js ctor
---@return cc.Scheduler@ Scheduler#Scheduler self (return value: cc.Scheduler)
function Scheduler:Scheduler() end


---@class ccui.ScrollView :  Layout
local ScrollView={ }
---@class ScrollView : ccui.ScrollView
ccui.ScrollView=ScrollView


---* Scroll inner container to top boundary of scrollview.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToTop(timeInSec,attenuated) end
---* Scroll inner container to horizontal percent position of scrollview.<br>
---* param percent A value between 0 and 100.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param percent float@ #float percent
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToPercentHorizontal(percent,timeInSec,attenuated) end
---* brief Set the scroll bar's opacity<br>
---* param the scroll bar's opacity
---@param opacity unsigned_char@ #unsigned char opacity
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarOpacity(opacity) end
---* brief Toggle scroll bar enabled.<br>
---* param enabled True if enable scroll bar, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarEnabled(enabled) end
---* brief Query inertia scroll state.<br>
---* return True if inertia is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function ScrollView:isInertiaScrollEnabled() end
---* Scroll inner container to bottom boundary of scrollview.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToBottom(timeInSec,attenuated) end
---* return How far the scroll view is scrolled in both axes, combined as a Vec2
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ScrollView:getScrolledPercentBothDirection() end
---* Query scroll direction of scrollview.<br>
---* see `Direction`      Direction::VERTICAL means vertical scroll, Direction::HORIZONTAL means horizontal scroll<br>
---* return Scrollview scroll direction.
---@return int@ int#int ret (return value: int)
function ScrollView:getDirection() end
---* brief Set the scroll bar's color<br>
---* param the scroll bar's color
---@param color color3b_table@ #color3b_table color
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarColor(color) end
---* Scroll inner container to bottom and left boundary of scrollview.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToBottomLeft(timeInSec,attenuated) end
---* Get inner container of scrollview.<br>
---* Inner container is a child of scrollview.<br>
---* return Inner container pointer.
---@return ccui.Layout@ Layout#Layout ret (return value: ccui.Layout)
function ScrollView:getInnerContainer() end
---* Move inner container to bottom boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToBottom() end
---* Set inner container position<br>
---* param pos Inner container position.
---@param pos vec2_table@ #vec2_table pos
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setInnerContainerPosition(pos) end
---* Changes scroll direction of scrollview.<br>
---* see `Direction`<br>
---* param dir Scroll direction enum.
---@param dir int@ #int dir
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setDirection(dir) end
---* Scroll inner container to top and left boundary of scrollview.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToTopLeft(timeInSec,attenuated) end
---* Move inner container to top and right boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToTopRight() end
---* Scroll inner container to both direction percent position of scrollview.<br>
---* param percent A value between 0 and 100.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param percent vec2_table@ #vec2_table percent
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToPercentBothDirection(percent,timeInSec,attenuated) end
---* Change inner container size of scrollview.<br>
---* Inner container size must be larger than or equal scrollview's size.<br>
---* param size Inner container size.
---@param size size_table@ #size_table size
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setInnerContainerSize(size) end
---* Get inner container position<br>
---* return The inner container position.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ScrollView:getInnerContainerPosition() end
---* Move inner container to top boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToTop() end
---* return How far the scroll view is scrolled in the vertical axis
---@return float@ float#float ret (return value: float)
function ScrollView:getScrolledPercentVertical() end
---* brief Query bounce state.<br>
---* return True if bounce is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function ScrollView:isBounceEnabled() end
---* Move inner container to vertical percent position of scrollview.<br>
---* param percent A value between 0 and 100.
---@param percent float@ #float percent
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToPercentVertical(percent) end
---* Add callback function which will be called  when scrollview event triggered.<br>
---* param callback A callback function with type of `ccScrollViewCallback`.
---@param callback function@ #function callback
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:addEventListener(callback) end
---* brief Set scroll bar auto hide time<br>
---* param scroll bar auto hide time
---@param autoHideTime float@ #float autoHideTime
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarAutoHideTime(autoHideTime) end
---* Immediately stops inner container scroll (auto scrolling is not affected).
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:stopScroll() end
---* brief Set the horizontal scroll bar position from left-bottom corner.<br>
---* param positionFromCorner The position from left-bottom corner
---@param positionFromCorner vec2_table@ #vec2_table positionFromCorner
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarPositionFromCornerForHorizontal(positionFromCorner) end
---* brief Toggle whether enable scroll inertia while scrolling.<br>
---* param enabled True if enable inertia, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setInertiaScrollEnabled(enabled) end
---* brief Set scroll bar auto hide state<br>
---* param scroll bar auto hide state
---@param autoHideEnabled boolean@ #bool autoHideEnabled
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarAutoHideEnabled(autoHideEnabled) end
---* brief Get the scroll bar's color<br>
---* return the scroll bar's color
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function ScrollView:getScrollBarColor() end
---* Move inner container to top and left boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToTopLeft() end
---* brief Query scroll bar state.<br>
---* return True if scroll bar is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function ScrollView:isScrollBarEnabled() end
---* return Whether the ScrollView is currently scrolling because of a bounceback or inertia slowdown.
---@return boolean@ bool#bool ret (return value: bool)
function ScrollView:isAutoScrolling() end
---* Move inner container to bottom and right boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToBottomRight() end
---* brief Set the touch total time threshold<br>
---* param the touch total time threshold
---@param touchTotalTimeThreshold float@ #float touchTotalTimeThreshold
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setTouchTotalTimeThreshold(touchTotalTimeThreshold) end
---* brief Get the touch total time threshold<br>
---* return the touch total time threshold
---@return float@ float#float ret (return value: float)
function ScrollView:getTouchTotalTimeThreshold() end
---* brief Get the horizontal scroll bar's position from right-top corner.<br>
---* return positionFromCorner
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ScrollView:getScrollBarPositionFromCornerForHorizontal() end
---* return How far the scroll view is scrolled in the horizontal axis
---@return float@ float#float ret (return value: float)
function ScrollView:getScrolledPercentHorizontal() end
---* brief Toggle bounce enabled when scroll to the edge.<br>
---* param enabled True if enable bounce, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setBounceEnabled(enabled) end
---* Immediately stops inner container scroll initiated by any of the "scrollTo*" member functions
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:stopAutoScroll() end
---* Scroll inner container to top and right boundary of scrollview.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToTopRight(timeInSec,attenuated) end
---* return Whether the user is currently dragging the ScrollView to scroll it
---@return boolean@ bool#bool ret (return value: bool)
function ScrollView:isScrolling() end
---* Scroll inner container to left boundary of scrollview.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToLeft(timeInSec,attenuated) end
---* Move inner container to both direction percent position of scrollview.<br>
---* param percent   A value between 0 and 100.
---@param percent vec2_table@ #vec2_table percent
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToPercentBothDirection(percent) end
---* Immediately stops inner container scroll if any.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:stopOverallScroll() end
---* Scroll inner container to vertical percent position of scrollview.<br>
---* param percent A value between 0 and 100.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param percent float@ #float percent
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToPercentVertical(percent,timeInSec,attenuated) end
---* brief Set the scroll bar's width<br>
---* param width The scroll bar's width
---@param width float@ #float width
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarWidth(width) end
---* brief Get the scroll bar's opacity<br>
---* return the scroll bar's opacity
---@return unsigned_char@ unsigned char#unsigned char ret (return value: unsigned char)
function ScrollView:getScrollBarOpacity() end
---* Scroll inner container to bottom and right boundary of scrollview.<br>
---* param timeInSec Time in seconds<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToBottomRight(timeInSec,attenuated) end
---* brief Set the scroll bar positions from the left-bottom corner (horizontal) and right-top corner (vertical).<br>
---* param positionFromCorner The position from the left-bottom corner (horizontal) and right-top corner (vertical).
---@param positionFromCorner vec2_table@ #vec2_table positionFromCorner
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarPositionFromCorner(positionFromCorner) end
---* brief Set the vertical scroll bar position from right-top corner.<br>
---* param positionFromCorner The position from right-top corner
---@param positionFromCorner vec2_table@ #vec2_table positionFromCorner
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setScrollBarPositionFromCornerForVertical(positionFromCorner) end
---* brief Get the scroll bar's auto hide time<br>
---* return the scroll bar's auto hide time
---@return float@ float#float ret (return value: float)
function ScrollView:getScrollBarAutoHideTime() end
---* Move inner container to left boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToLeft() end
---* Scroll inner container to right boundary of scrollview.<br>
---* param timeInSec Time in seconds.<br>
---* param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float@ #float timeInSec
---@param attenuated boolean@ #bool attenuated
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:scrollToRight(timeInSec,attenuated) end
---* brief Get the vertical scroll bar's position from right-top corner.<br>
---* return positionFromCorner
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function ScrollView:getScrollBarPositionFromCornerForVertical() end
---* brief Get the scroll bar's width<br>
---* return the scroll bar's width
---@return float@ float#float ret (return value: float)
function ScrollView:getScrollBarWidth() end
---* brief Query scroll bar auto hide state<br>
---* return True if scroll bar auto hide is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function ScrollView:isScrollBarAutoHideEnabled() end
---* Move inner container to bottom and left boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToBottomLeft() end
---* Move inner container to right boundary of scrollview.
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToRight() end
---* Get inner container size of scrollview.<br>
---* Inner container size must be larger than or equal scrollview's size.<br>
---* return The inner container size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function ScrollView:getInnerContainerSize() end
---* Move inner container to horizontal percent position of scrollview.<br>
---* param percent   A value between 0 and 100.
---@param percent float@ #float percent
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:jumpToPercentHorizontal(percent) end
---* Create an empty ScrollView.<br>
---* return A ScrollView instance.
---@return ccui.ScrollView@ ScrollView#ScrollView ret (return value: ccui.ScrollView)
function ScrollView:create() end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function ScrollView:createInstance() end
---@param child cc.Node@ #cc.Node child
---@param localZOrder int@ #int localZOrder
---@param name string@ #string name
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
---@overload fun(child:cc.Node,localZOrder:int):ccui.ScrollView
---@overload fun(child:cc.Node):ccui.ScrollView
---@overload fun(child:cc.Node,localZOrder:int,unkown2:int):ccui.ScrollView
---@overload fun(child:cc.Node,localZOrder:int,name:string):ccui.ScrollView
function ScrollView:addChild(child,localZOrder,name) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function ScrollView:init() end
---* 
---@param name string@ #string name
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ScrollView:getChildByName(name) end
---* Return the "class name" of widget.
---@return string@ string#string ret (return value: string)
function ScrollView:getDescription() end
---* 
---@param dt float@ #float dt
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:update(dt) end
---* Get the layout type for scrollview.<br>
---* see `Layout::Type`<br>
---* return LayoutType
---@return int@ int#int ret (return value: int)
function ScrollView:getLayoutType() end
---* 
---@param cleanup boolean@ #bool cleanup
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:removeAllChildrenWithCleanup(cleanup) end
---* 
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:removeAllChildren() end
---* When a widget is in a layout, you could call this method to get the next focused widget within a specified direction.<br>
---* If the widget is not in a layout, it will return itself<br>
---* param direction the direction to look for the next focused widget in a layout<br>
---* param current  the current focused widget<br>
---* return the next focused widget in a layout
---@param direction int@ #int direction
---@param current ccui.Widget@ #ccui.Widget current
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function ScrollView:findNextFocusedWidget(direction,current) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:removeChild(child,cleanup) end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function ScrollView:getChildren() end
---* 
---@param tag int@ #int tag
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function ScrollView:getChildByTag(tag) end
---* 
---@return int@ int#int ret (return value: int)
function ScrollView:getChildrenCount() end
---* Set layout type for scrollview.<br>
---* see `Layout::Type`<br>
---* param type  Layout type enum.
---@param type int@ #int type
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:setLayoutType(type) end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.ScrollView@ ScrollView#ScrollView self (return value: ccui.ScrollView)
function ScrollView:ScrollView() end


---@class cc.Sequence :  ActionInterval
local Sequence={ }
---@class Sequence : cc.Sequence
cc.Sequence=Sequence


---* 
---@param arrayOfActions array_table@ #array_table arrayOfActions
---@return boolean@ bool#bool ret (return value: bool)
function Sequence:init(arrayOfActions) end
---*  initializes the action 
---@param pActionOne cc.FiniteTimeAction@ #cc.FiniteTimeAction pActionOne
---@param pActionTwo cc.FiniteTimeAction@ #cc.FiniteTimeAction pActionTwo
---@return boolean@ bool#bool ret (return value: bool)
function Sequence:initWithTwoActions(pActionOne,pActionTwo) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.Sequence@ Sequence#Sequence self (return value: cc.Sequence)
function Sequence:startWithTarget(target) end
---* 
---@return cc.Sequence@ Sequence#Sequence ret (return value: cc.Sequence)
function Sequence:reverse() end
---* 
---@return cc.Sequence@ Sequence#Sequence ret (return value: cc.Sequence)
function Sequence:clone() end
---* 
---@return cc.Sequence@ Sequence#Sequence self (return value: cc.Sequence)
function Sequence:stop() end
---* param t In seconds.
---@param t float@ #float t
---@return cc.Sequence@ Sequence#Sequence self (return value: cc.Sequence)
function Sequence:update(t) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Sequence:isDone() end
---* 
---@return cc.Sequence@ Sequence#Sequence self (return value: cc.Sequence)
function Sequence:Sequence() end


---@class cc.Shaky3D :  Grid3DAction
local Shaky3D={ }
---@class Shaky3D : cc.Shaky3D
cc.Shaky3D=Shaky3D


---* brief Initializes the action with a range, shake Z vertices, grid size and duration.<br>
---* param duration Specify the duration of the Shaky3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param range Specify the range of the shaky effect.<br>
---* param shakeZ Specify whether shake on the z axis.<br>
---* return If the Initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param range int@ #int range
---@param shakeZ boolean@ #bool shakeZ
---@return boolean@ bool#bool ret (return value: bool)
function Shaky3D:initWithDuration(duration,gridSize,range,shakeZ) end
---* brief Create the action with a range, shake Z vertices, a grid and duration.<br>
---* param initWithDuration Specify the duration of the Shaky3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param range Specify the range of the shaky effect.<br>
---* param shakeZ Specify whether shake on the z axis.<br>
---* return If the creation success, return a pointer of Shaky3D action; otherwise, return nil.
---@param initWithDuration float@ #float initWithDuration
---@param gridSize size_table@ #size_table gridSize
---@param range int@ #int range
---@param shakeZ boolean@ #bool shakeZ
---@return cc.Shaky3D@ Shaky3D#Shaky3D ret (return value: cc.Shaky3D)
function Shaky3D:create(initWithDuration,gridSize,range,shakeZ) end
---* 
---@return cc.Shaky3D@ Shaky3D#Shaky3D ret (return value: cc.Shaky3D)
function Shaky3D:clone() end
---* 
---@param time float@ #float time
---@return cc.Shaky3D@ Shaky3D#Shaky3D self (return value: cc.Shaky3D)
function Shaky3D:update(time) end
---* 
---@return cc.Shaky3D@ Shaky3D#Shaky3D self (return value: cc.Shaky3D)
function Shaky3D:Shaky3D() end


---@class cc.ShakyTiles3D :  TiledGrid3DAction
local ShakyTiles3D={ }
---@class ShakyTiles3D : cc.ShakyTiles3D
cc.ShakyTiles3D=ShakyTiles3D


---* brief Initializes the action with a range, shake Z vertices, grid size and duration.<br>
---* param duration Specify the duration of the ShakyTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param range Specify the range of the shaky effect.<br>
---* param shakeZ Specify whether shake on the z axis.<br>
---* return If the Initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param range int@ #int range
---@param shakeZ boolean@ #bool shakeZ
---@return boolean@ bool#bool ret (return value: bool)
function ShakyTiles3D:initWithDuration(duration,gridSize,range,shakeZ) end
---* brief Create the action with a range, shake Z vertices, a grid and duration.<br>
---* param duration Specify the duration of the ShakyTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param range Specify the range of the shaky effect.<br>
---* param shakeZ Specify whether shake on the z axis.<br>
---* return If the creation success, return a pointer of ShakyTiles3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param range int@ #int range
---@param shakeZ boolean@ #bool shakeZ
---@return cc.ShakyTiles3D@ ShakyTiles3D#ShakyTiles3D ret (return value: cc.ShakyTiles3D)
function ShakyTiles3D:create(duration,gridSize,range,shakeZ) end
---* 
---@return cc.ShakyTiles3D@ ShakyTiles3D#ShakyTiles3D ret (return value: cc.ShakyTiles3D)
function ShakyTiles3D:clone() end
---* 
---@param time float@ #float time
---@return cc.ShakyTiles3D@ ShakyTiles3D#ShakyTiles3D self (return value: cc.ShakyTiles3D)
function ShakyTiles3D:update(time) end
---* 
---@return cc.ShakyTiles3D@ ShakyTiles3D#ShakyTiles3D self (return value: cc.ShakyTiles3D)
function ShakyTiles3D:ShakyTiles3D() end


---@class cc.ShatteredTiles3D :  TiledGrid3DAction
local ShatteredTiles3D={ }
---@class ShatteredTiles3D : cc.ShatteredTiles3D
cc.ShatteredTiles3D=ShatteredTiles3D


---* brief Initializes the action with a range, shatter Z vertices, grid size and duration.<br>
---* param duration Specify the duration of the ShatteredTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param range Specify the range of the shatter effect.<br>
---* param shatterZ Specify whether shake on the z axis.<br>
---* return If the Initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param range int@ #int range
---@param shatterZ boolean@ #bool shatterZ
---@return boolean@ bool#bool ret (return value: bool)
function ShatteredTiles3D:initWithDuration(duration,gridSize,range,shatterZ) end
---* brief Create the action with a range, whether of not to shatter Z vertices, grid size and duration.<br>
---* param duration Specify the duration of the ShatteredTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param range Specify the range of the shatter effect.<br>
---* param shatterZ Specify whether shatter on the z axis.<br>
---* return If the creation success, return a pointer of ShatteredTiles3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param range int@ #int range
---@param shatterZ boolean@ #bool shatterZ
---@return cc.ShatteredTiles3D@ ShatteredTiles3D#ShatteredTiles3D ret (return value: cc.ShatteredTiles3D)
function ShatteredTiles3D:create(duration,gridSize,range,shatterZ) end
---* 
---@return cc.ShatteredTiles3D@ ShatteredTiles3D#ShatteredTiles3D ret (return value: cc.ShatteredTiles3D)
function ShatteredTiles3D:clone() end
---* 
---@param time float@ #float time
---@return cc.ShatteredTiles3D@ ShatteredTiles3D#ShatteredTiles3D self (return value: cc.ShatteredTiles3D)
function ShatteredTiles3D:update(time) end
---* 
---@return cc.ShatteredTiles3D@ ShatteredTiles3D#ShatteredTiles3D self (return value: cc.ShatteredTiles3D)
function ShatteredTiles3D:ShatteredTiles3D() end


---@class cc.Show :  ActionInstant
local Show={ }
---@class Show : cc.Show
cc.Show=Show


---*  Allocates and initializes the action.<br>
---* return  An autoreleased Show object.
---@return cc.Show@ Show#Show ret (return value: cc.Show)
function Show:create() end
---* 
---@return cc.Show@ Show#Show ret (return value: cc.Show)
function Show:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.Show@ Show#Show self (return value: cc.Show)
function Show:update(time) end
---* 
---@return cc.ActionInstant@ ActionInstant#ActionInstant ret (return value: cc.ActionInstant)
function Show:reverse() end
---* 
---@return cc.Show@ Show#Show self (return value: cc.Show)
function Show:Show() end


---@class cc.ShuffleTiles :  TiledGrid3DAction
local ShuffleTiles={ }
---@class ShuffleTiles : cc.ShuffleTiles
cc.ShuffleTiles=ShuffleTiles


---* brief Initializes the action with grid size, random seed and duration.<br>
---* param duration Specify the duration of the ShuffleTiles action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param seed Specify the random seed.<br>
---* return If the Initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param seed unsigned_int@ #unsigned int seed
---@return boolean@ bool#bool ret (return value: bool)
function ShuffleTiles:initWithDuration(duration,gridSize,seed) end
---* 
---@param pos size_table@ #size_table pos
---@return size_table@ size_table#size_table ret (return value: size_table)
function ShuffleTiles:getDelta(pos) end
---* brief Create the action with grid size, random seed and duration.<br>
---* param duration Specify the duration of the ShuffleTiles action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param seed Specify the random seed.<br>
---* return If the creation success, return a pointer of ShuffleTiles action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param seed unsigned_int@ #unsigned int seed
---@return cc.ShuffleTiles@ ShuffleTiles#ShuffleTiles ret (return value: cc.ShuffleTiles)
function ShuffleTiles:create(duration,gridSize,seed) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.ShuffleTiles@ ShuffleTiles#ShuffleTiles self (return value: cc.ShuffleTiles)
function ShuffleTiles:startWithTarget(target) end
---* 
---@return cc.ShuffleTiles@ ShuffleTiles#ShuffleTiles ret (return value: cc.ShuffleTiles)
function ShuffleTiles:clone() end
---* 
---@param time float@ #float time
---@return cc.ShuffleTiles@ ShuffleTiles#ShuffleTiles self (return value: cc.ShuffleTiles)
function ShuffleTiles:update(time) end
---* 
---@return cc.ShuffleTiles@ ShuffleTiles#ShuffleTiles self (return value: cc.ShuffleTiles)
function ShuffleTiles:ShuffleTiles() end


---@class cc.SimpleAudioEngine 
local SimpleAudioEngine={ }
---@class SimpleAudioEngine : cc.SimpleAudioEngine
cc.SimpleAudioEngine=SimpleAudioEngine


---* Preload background music.<br>
---* param filePath The path of the background music file.<br>
---* js NA<br>
---* lua preloadMusic
---@param filePath char@ #char filePath
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:preloadBackgroundMusic(filePath) end
---* Stop playing background music.<br>
---* param releaseData If release the background music data or not.As default value is false.<br>
---* js stopMusic<br>
---* lua stopMusic
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:stopBackgroundMusic() end
---* Stop all playing sound effects.
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:stopAllEffects() end
---* The volume of the background music within the range of 0.0 as the minimum and 1.0 as the maximum.<br>
---* js getMusicVolume<br>
---* lua getMusicVolume
---@return float@ float#float ret (return value: float)
function SimpleAudioEngine:getBackgroundMusicVolume() end
---* Resume playing background music.<br>
---* js resumeMusic<br>
---* lua resumeMusic
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:resumeBackgroundMusic() end
---* Set the volume of background music.<br>
---* param volume must be within the range of 0.0 as the minimum and 1.0 as the maximum.<br>
---* js setMusicVolume<br>
---* lua setMusicVolume
---@param volume float@ #float volume
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:setBackgroundMusicVolume(volume) end
---* Preload a compressed audio file.<br>
---* The compressed audio will be decoded to wave, then written into an internal buffer in SimpleAudioEngine.<br>
---* param filePath The path of the effect file.<br>
---* js NA
---@param filePath char@ #char filePath
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:preloadEffect(filePath) end
---* Indicates whether the background music is playing.<br>
---* return <i>true</i> if the background music is playing, otherwise <i>false</i>.<br>
---* js isMusicPlaying<br>
---* lua isMusicPlaying
---@return boolean@ bool#bool ret (return value: bool)
function SimpleAudioEngine:isBackgroundMusicPlaying() end
---* The volume of the effects within the range of 0.0 as the minimum and 1.0 as the maximum.
---@return float@ float#float ret (return value: float)
function SimpleAudioEngine:getEffectsVolume() end
---* Indicates whether any background music can be played or not.<br>
---* return <i>true</i> if background music can be played, otherwise <i>false</i>.<br>
---* js willPlayMusic<br>
---* lua willPlayMusic
---@return boolean@ bool#bool ret (return value: bool)
function SimpleAudioEngine:willPlayBackgroundMusic() end
---* Pause playing sound effect.<br>
---* param soundId The return value of function playEffect.
---@param soundId unsigned_int@ #unsigned int soundId
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:pauseEffect(soundId) end
---* Play sound effect with a file path, pitch, pan and gain.<br>
---* param filePath The path of the effect file.<br>
---* param loop Determines whether to loop the effect playing or not. The default value is false.<br>
---* param pitch Frequency, normal value is 1.0. Will also change effect play time.<br>
---* param pan   Stereo effect, in the range of [-1..1] where -1 enables only left channel.<br>
---* param gain  Volume, in the range of [0..1]. The normal value is 1.<br>
---* return The sound id.<br>
---* note Full support is under development, now there are limitations:<br>
---* - no pitch effect on Samsung Galaxy S2 with OpenSL backend enabled;<br>
---* - no pitch/pan/gain on win32.
---@param filePath char@ #char filePath
---@param loop boolean@ #bool loop
---@param pitch float@ #float pitch
---@param pan float@ #float pan
---@param gain float@ #float gain
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function SimpleAudioEngine:playEffect(filePath,loop,pitch,pan,gain) end
---* Rewind playing background music.<br>
---* js rewindMusic<br>
---* lua rewindMusic
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:rewindBackgroundMusic() end
---* Play background music.<br>
---* param filePath The path of the background music file,or the FileName of T_SoundResInfo.<br>
---* param loop Whether the background music loop or not.<br>
---* js playMusic<br>
---* lua playMusic
---@param filePath char@ #char filePath
---@param loop boolean@ #bool loop
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:playBackgroundMusic(filePath,loop) end
---* Resume all playing sound effect.
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:resumeAllEffects() end
---* Set the volume of sound effects.<br>
---* param volume must be within the range of 0.0 as the minimum and 1.0 as the maximum.
---@param volume float@ #float volume
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:setEffectsVolume(volume) end
---* Stop playing sound effect.<br>
---* param soundId The return value of function playEffect.
---@param soundId unsigned_int@ #unsigned int soundId
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:stopEffect(soundId) end
---* Pause playing background music.<br>
---* js pauseMusic<br>
---* lua pauseMusic
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:pauseBackgroundMusic() end
---* Pause all playing sound effect.
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:pauseAllEffects() end
---* Unload the preloaded effect from internal buffer.<br>
---* param filePath The path of the effect file.
---@param filePath char@ #char filePath
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:unloadEffect(filePath) end
---* Resume playing sound effect.<br>
---* param soundId The return value of function playEffect.
---@param soundId unsigned_int@ #unsigned int soundId
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:resumeEffect(soundId) end
---* Release the shared Engine object.<br>
---* warning It must be called before the application exit, or it will lead to memory leaks.<br>
---* lua destroyInstance
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine self (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:endToLua() end
---* Returns a shared instance of the SimpleAudioEngine.<br>
---* js NA
---@return cc.SimpleAudioEngine@ SimpleAudioEngine#SimpleAudioEngine ret (return value: cc.SimpleAudioEngine)
function SimpleAudioEngine:getInstance() end


---@class cc.Skeleton3D :  Ref
local Skeleton3D={ }
---@class Skeleton3D : cc.Skeleton3D
cc.Skeleton3D=Skeleton3D


---* remove all bones
---@return cc.Skeleton3D@ Skeleton3D#Skeleton3D self (return value: cc.Skeleton3D)
function Skeleton3D:removeAllBones() end
---* add bone
---@param bone cc.Bone3D@ #cc.Bone3D bone
---@return cc.Skeleton3D@ Skeleton3D#Skeleton3D self (return value: cc.Skeleton3D)
function Skeleton3D:addBone(bone) end
---* 
---@param id string@ #string id
---@return cc.Bone3D@ Bone3D#Bone3D ret (return value: cc.Bone3D)
function Skeleton3D:getBoneByName(id) end
---* 
---@param index int@ #int index
---@return cc.Bone3D@ Bone3D#Bone3D ret (return value: cc.Bone3D)
function Skeleton3D:getRootBone(index) end
---* refresh bone world matrix
---@return cc.Skeleton3D@ Skeleton3D#Skeleton3D self (return value: cc.Skeleton3D)
function Skeleton3D:updateBoneMatrix() end
---* get bone
---@param index unsigned_int@ #unsigned int index
---@return cc.Bone3D@ Bone3D#Bone3D ret (return value: cc.Bone3D)
function Skeleton3D:getBoneByIndex(index) end
---* get & set root bone
---@return int@ int#int ret (return value: int)
function Skeleton3D:getRootCount() end
---* get bone index
---@param bone cc.Bone3D@ #cc.Bone3D bone
---@return int@ int#int ret (return value: int)
function Skeleton3D:getBoneIndex(bone) end
---* get total bone count
---@return int@ int#int ret (return value: int)
function Skeleton3D:getBoneCount() end
---* 
---@return cc.Skeleton3D@ Skeleton3D#Skeleton3D self (return value: cc.Skeleton3D)
function Skeleton3D:Skeleton3D() end


---@class sp.SkeletonAnimation :  SkeletonRenderer
local SkeletonAnimation={ }
---@class SkeletonAnimation : sp.SkeletonAnimation
sp.SkeletonAnimation=SkeletonAnimation


---* 
---@param entry spTrackEntry@ #spTrackEntry entry
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setTrackCompleteListener(entry,listener) end
---* 
---@param name string@ #string name
---@return spAnimation@ spAnimation#spAnimation ret (return value: spAnimation)
function SkeletonAnimation:findAnimation(name) end
---* 
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setCompleteListener(listener) end
---* 
---@param fromAnimation string@ #string fromAnimation
---@param toAnimation string@ #string toAnimation
---@param duration float@ #float duration
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setMix(fromAnimation,toAnimation,duration) end
---* 
---@param entry spTrackEntry@ #spTrackEntry entry
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setTrackStartListener(entry,listener) end
---* 
---@param trackIndex int@ #int trackIndex
---@param mixDuration float@ #float mixDuration
---@param delay float@ #float delay
---@return spTrackEntry@ spTrackEntry#spTrackEntry ret (return value: spTrackEntry)
function SkeletonAnimation:addEmptyAnimation(trackIndex,mixDuration,delay) end
---* 
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setDisposeListener(listener) end
---* 
---@param entry spTrackEntry@ #spTrackEntry entry
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setTrackInterruptListener(entry,listener) end
---* 
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setEndListener(listener) end
---* 
---@param entry spTrackEntry@ #spTrackEntry entry
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setTrackDisposeListener(entry,listener) end
---* 
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setEventListener(listener) end
---* 
---@param trackIndex int@ #int trackIndex
---@param mixDuration float@ #float mixDuration
---@return spTrackEntry@ spTrackEntry#spTrackEntry ret (return value: spTrackEntry)
function SkeletonAnimation:setEmptyAnimation(trackIndex,mixDuration) end
---* 
---@param entry spTrackEntry@ #spTrackEntry entry
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setTrackEventListener(entry,listener) end
---* 
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:clearTrack() end
---* 
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setInterruptListener(listener) end
---* 
---@param mixDuration float@ #float mixDuration
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setEmptyAnimations(mixDuration) end
---* 
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:clearTracks() end
---* 
---@param entry spTrackEntry@ #spTrackEntry entry
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setTrackEndListener(entry,listener) end
---* 
---@param listener function@ #function listener
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:setStartListener(listener) end
---@param skeletonBinaryFile string@ #string skeletonBinaryFile
---@param atlas spAtlas@ #spAtlas atlas
---@param scale float@ #float scale
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation ret (return value: sp.SkeletonAnimation)
---@overload fun(skeletonBinaryFile:string,unkown1:string,scale:float):sp.SkeletonAnimation
---@overload fun(skeletonBinaryFile:string,atlas:spAtlas,scale:float):sp.SkeletonAnimation
function SkeletonAnimation:createWithBinaryFile(skeletonBinaryFile,atlas,scale) end
---* 
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation ret (return value: sp.SkeletonAnimation)
function SkeletonAnimation:create() end
---@param skeletonJsonFile string@ #string skeletonJsonFile
---@param atlas spAtlas@ #spAtlas atlas
---@param scale float@ #float scale
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation ret (return value: sp.SkeletonAnimation)
---@overload fun(skeletonJsonFile:string,unkown1:string,scale:float):sp.SkeletonAnimation
---@overload fun(skeletonJsonFile:string,atlas:spAtlas,scale:float):sp.SkeletonAnimation
function SkeletonAnimation:createWithJsonFile(skeletonJsonFile,atlas,scale) end
---* 
---@return sp.SkeletonAnimation@ SkeletonAnimation#SkeletonAnimation self (return value: sp.SkeletonAnimation)
function SkeletonAnimation:initialize() end


---@class ccs.SkeletonNode :  BoneNode
local SkeletonNode={ }
---@class SkeletonNode : ccs.SkeletonNode
ccs.SkeletonNode=SkeletonNode


---* get bonenode in skeleton node by bone name
---@param boneName string@ #string boneName
---@return ccs.BoneNode@ BoneNode#BoneNode ret (return value: ccs.BoneNode)
function SkeletonNode:getBoneNode(boneName) end
---@param boneSkinNameMap map_table@ #map_table boneSkinNameMap
---@return ccs.SkeletonNode@ SkeletonNode#SkeletonNode self (return value: ccs.SkeletonNode)
---@overload fun(unkown0:string):ccs.SkeletonNode
---@overload fun(boneSkinNameMap:map_table):ccs.SkeletonNode
function SkeletonNode:changeSkins(boneSkinNameMap) end
---* brief: add a boneSkinNameMap as a SkinGroup named groupName<br>
---* param: groupName, key<br>
---* param: boneSkinNameMap, map <name of bone, name of skin to display which added to bone>
---@param groupName string@ #string groupName
---@param boneSkinNameMap map_table@ #map_table boneSkinNameMap
---@return ccs.SkeletonNode@ SkeletonNode#SkeletonNode self (return value: ccs.SkeletonNode)
function SkeletonNode:addSkinGroup(groupName,boneSkinNameMap) end
---* get All bones in this skeleton, <bone's name, BoneNode>
---@return map_table@ map_table#map_table ret (return value: map_table)
function SkeletonNode:getAllSubBonesMap() end
---* 
---@return ccs.SkeletonNode@ SkeletonNode#SkeletonNode ret (return value: ccs.SkeletonNode)
function SkeletonNode:create() end
---* 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function SkeletonNode:getBoundingBox() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function SkeletonNode:init() end
---* 
---@return ccs.SkeletonNode@ SkeletonNode#SkeletonNode self (return value: ccs.SkeletonNode)
function SkeletonNode:SkeletonNode() end


---@class sp.SkeletonRenderer :  Node@BlendProtocol
local SkeletonRenderer={ }
---@class SkeletonRenderer : sp.SkeletonRenderer
sp.SkeletonRenderer=SkeletonRenderer


---* 
---@param scale float@ #float scale
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setTimeScale(scale) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function SkeletonRenderer:getDebugSlotsEnabled() end
---* 
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setBonesToSetupPose() end
---* 
---@param skeletonData spSkeletonData@ #spSkeletonData skeletonData
---@param ownsSkeletonData boolean@ #bool ownsSkeletonData
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:initWithData(skeletonData,ownsSkeletonData) end
---* 
---@param enabled boolean@ #bool enabled
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setDebugSlotsEnabled(enabled) end
---@param skeletonDataFile string@ #string skeletonDataFile
---@param atlas spAtlas@ #spAtlas atlas
---@param scale float@ #float scale
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
---@overload fun(skeletonDataFile:string,unkown1:string,scale:float):sp.SkeletonRenderer
---@overload fun(skeletonDataFile:string,atlas:spAtlas,scale:float):sp.SkeletonRenderer
function SkeletonRenderer:initWithJsonFile(skeletonDataFile,atlas,scale) end
---* 
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setSlotsToSetupPose() end
---@param skeletonDataFile string@ #string skeletonDataFile
---@param atlas spAtlas@ #spAtlas atlas
---@param scale float@ #float scale
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
---@overload fun(skeletonDataFile:string,unkown1:string,scale:float):sp.SkeletonRenderer
---@overload fun(skeletonDataFile:string,atlas:spAtlas,scale:float):sp.SkeletonRenderer
function SkeletonRenderer:initWithBinaryFile(skeletonDataFile,atlas,scale) end
---* 
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setToSetupPose() end
---* 
---@param enabled boolean@ #bool enabled
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setDebugMeshesEnabled(enabled) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function SkeletonRenderer:isTwoColorTint() end
---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function SkeletonRenderer:getBlendFunc() end
---* 
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:initialize() end
---* 
---@param enabled boolean@ #bool enabled
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setDebugBonesEnabled(enabled) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function SkeletonRenderer:getDebugBonesEnabled() end
---* 
---@return float@ float#float ret (return value: float)
function SkeletonRenderer:getTimeScale() end
---* 
---@param enabled boolean@ #bool enabled
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setTwoColorTint(enabled) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function SkeletonRenderer:getDebugMeshesEnabled() end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setBlendFunc(blendFunc) end
---* 
---@param effect spVertexEffect@ #spVertexEffect effect
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setVertexEffect(effect) end
---@param skinName string@ #string skinName
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(unkown0:char):boolean
---@overload fun(skinName:string):boolean
function SkeletonRenderer:setSkin(skinName) end
---* 
---@return spSkeleton@ spSkeleton#spSkeleton ret (return value: spSkeleton)
function SkeletonRenderer:getSkeleton() end
---@param skeletonDataFile string@ #string skeletonDataFile
---@param atlas spAtlas@ #spAtlas atlas
---@param scale float@ #float scale
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer ret (return value: sp.SkeletonRenderer)
---@overload fun(skeletonDataFile:string,unkown1:string,scale:float):sp.SkeletonRenderer
---@overload fun(skeletonDataFile:string,atlas:spAtlas,scale:float):sp.SkeletonRenderer
function SkeletonRenderer:createWithFile(skeletonDataFile,atlas,scale) end
---* 
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer ret (return value: sp.SkeletonRenderer)
function SkeletonRenderer:create() end
---* 
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:onEnter() end
---* 
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:onExit() end
---* 
---@param value boolean@ #bool value
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
function SkeletonRenderer:setOpacityModifyRGB(value) end
---* 
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function SkeletonRenderer:getBoundingBox() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function SkeletonRenderer:isOpacityModifyRGB() end
---@param skeletonDataFile string@ #string skeletonDataFile
---@param atlasFile string@ #string atlasFile
---@param scale float@ #float scale
---@return sp.SkeletonRenderer@ SkeletonRenderer#SkeletonRenderer self (return value: sp.SkeletonRenderer)
---@overload fun(unkown0:spSkeletonData,unkown1:boolean):sp.SkeletonRenderer
---@overload fun():sp.SkeletonRenderer
---@overload fun(skeletonDataFile:string,unkown1:spAtlas,scale:float):sp.SkeletonRenderer
---@overload fun(skeletonDataFile:string,atlasFile:string,scale:float):sp.SkeletonRenderer
function SkeletonRenderer:SkeletonRenderer(skeletonDataFile,atlasFile,scale) end


---@class cc.SkewBy :  SkewTo
local SkewBy={ }
---@class SkewBy : cc.SkewBy
cc.SkewBy=SkewBy


---* param t In seconds.
---@param t float@ #float t
---@param sx float@ #float sx
---@param sy float@ #float sy
---@return boolean@ bool#bool ret (return value: bool)
function SkewBy:initWithDuration(t,sx,sy) end
---* Creates the action.<br>
---* param t Duration time, in seconds.<br>
---* param deltaSkewX Skew x delta angle.<br>
---* param deltaSkewY Skew y delta angle.<br>
---* return An autoreleased SkewBy object.
---@param t float@ #float t
---@param deltaSkewX float@ #float deltaSkewX
---@param deltaSkewY float@ #float deltaSkewY
---@return cc.SkewBy@ SkewBy#SkewBy ret (return value: cc.SkewBy)
function SkewBy:create(t,deltaSkewX,deltaSkewY) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.SkewBy@ SkewBy#SkewBy self (return value: cc.SkewBy)
function SkewBy:startWithTarget(target) end
---* 
---@return cc.SkewBy@ SkewBy#SkewBy ret (return value: cc.SkewBy)
function SkewBy:clone() end
---* 
---@return cc.SkewBy@ SkewBy#SkewBy ret (return value: cc.SkewBy)
function SkewBy:reverse() end
---* 
---@return cc.SkewBy@ SkewBy#SkewBy self (return value: cc.SkewBy)
function SkewBy:SkewBy() end


---@class ccs.SkewFrame :  Frame
local SkewFrame={ }
---@class SkewFrame : ccs.SkewFrame
ccs.SkewFrame=SkewFrame


---* 
---@return float@ float#float ret (return value: float)
function SkewFrame:getSkewY() end
---* 
---@param skewx float@ #float skewx
---@return ccs.SkewFrame@ SkewFrame#SkewFrame self (return value: ccs.SkewFrame)
function SkewFrame:setSkewX(skewx) end
---* 
---@param skewy float@ #float skewy
---@return ccs.SkewFrame@ SkewFrame#SkewFrame self (return value: ccs.SkewFrame)
function SkewFrame:setSkewY(skewy) end
---* 
---@return float@ float#float ret (return value: float)
function SkewFrame:getSkewX() end
---* 
---@return ccs.SkewFrame@ SkewFrame#SkewFrame ret (return value: ccs.SkewFrame)
function SkewFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function SkewFrame:clone() end
---* 
---@return ccs.SkewFrame@ SkewFrame#SkewFrame self (return value: ccs.SkewFrame)
function SkewFrame:SkewFrame() end


---@class cc.SkewTo :  ActionInterval
local SkewTo={ }
---@class SkewTo : cc.SkewTo
cc.SkewTo=SkewTo


---* param t In seconds.
---@param t float@ #float t
---@param sx float@ #float sx
---@param sy float@ #float sy
---@return boolean@ bool#bool ret (return value: bool)
function SkewTo:initWithDuration(t,sx,sy) end
---* Creates the action.<br>
---* param t Duration time, in seconds.<br>
---* param sx Skew x angle.<br>
---* param sy Skew y angle.<br>
---* return An autoreleased SkewTo object.
---@param t float@ #float t
---@param sx float@ #float sx
---@param sy float@ #float sy
---@return cc.SkewTo@ SkewTo#SkewTo ret (return value: cc.SkewTo)
function SkewTo:create(t,sx,sy) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.SkewTo@ SkewTo#SkewTo self (return value: cc.SkewTo)
function SkewTo:startWithTarget(target) end
---* 
---@return cc.SkewTo@ SkewTo#SkewTo ret (return value: cc.SkewTo)
function SkewTo:clone() end
---* 
---@return cc.SkewTo@ SkewTo#SkewTo ret (return value: cc.SkewTo)
function SkewTo:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.SkewTo@ SkewTo#SkewTo self (return value: cc.SkewTo)
function SkewTo:update(time) end
---* 
---@return cc.SkewTo@ SkewTo#SkewTo self (return value: cc.SkewTo)
function SkewTo:SkewTo() end


---@class ccs.Skin :  Sprite
local Skin={ }
---@class Skin : ccs.Skin
ccs.Skin=Skin


---* 
---@return ccs.Bone@ Bone#Bone ret (return value: ccs.Bone)
function Skin:getBone() end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Skin:getNodeToWorldTransformAR() end
---* 
---@return string@ string#string ret (return value: string)
function Skin:getDisplayName() end
---* 
---@return ccs.Skin@ Skin#Skin self (return value: ccs.Skin)
function Skin:updateArmatureTransform() end
---* 
---@param bone ccs.Bone@ #ccs.Bone bone
---@return ccs.Skin@ Skin#Skin self (return value: ccs.Skin)
function Skin:setBone(bone) end
---@param pszFileName string@ #string pszFileName
---@return ccs.Skin@ Skin#Skin ret (return value: ccs.Skin)
---@overload fun(pszFileName:string):ccs.Skin
---@overload fun():ccs.Skin
function Skin:create(pszFileName) end
---* 
---@param pszSpriteFrameName string@ #string pszSpriteFrameName
---@return ccs.Skin@ Skin#Skin ret (return value: ccs.Skin)
function Skin:createWithSpriteFrameName(pszSpriteFrameName) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return ccs.Skin@ Skin#Skin self (return value: ccs.Skin)
function Skin:draw(renderer,transform,flags) end
---* 
---@return mat4_table@ mat4_table#mat4_table ret (return value: mat4_table)
function Skin:getNodeToWorldTransform() end
---* 
---@param spriteFrameName string@ #string spriteFrameName
---@return boolean@ bool#bool ret (return value: bool)
function Skin:initWithSpriteFrameName(spriteFrameName) end
---* 
---@param filename string@ #string filename
---@return boolean@ bool#bool ret (return value: bool)
function Skin:initWithFile(filename) end
---* 
---@return ccs.Skin@ Skin#Skin self (return value: ccs.Skin)
function Skin:updateTransform() end
---* js ctor
---@return ccs.Skin@ Skin#Skin self (return value: ccs.Skin)
function Skin:Skin() end


---@class cc.Skybox :  Node
local Skybox={ }
---@class Skybox : cc.Skybox
cc.Skybox=Skybox


---*  reload sky box after GLESContext reconstructed.
---@return cc.Skybox@ Skybox#Skybox self (return value: cc.Skybox)
function Skybox:reload() end
---* initialize with texture path
---@param positive_x string@ #string positive_x
---@param negative_x string@ #string negative_x
---@param positive_y string@ #string positive_y
---@param negative_y string@ #string negative_y
---@param positive_z string@ #string positive_z
---@param negative_z string@ #string negative_z
---@return boolean@ bool#bool ret (return value: bool)
function Skybox:init(positive_x,negative_x,positive_y,negative_y,positive_z,negative_z) end
---* texture getter and setter
---@param e cc.TextureCub@ #cc.TextureCube 
---@return cc.Skybox@ Skybox#Skybox self (return value: cc.Skybox)
function Skybox:setTexture(e) end
---@param positive_x string@ #string positive_x
---@param negative_x string@ #string negative_x
---@param positive_y string@ #string positive_y
---@param negative_y string@ #string negative_y
---@param positive_z string@ #string positive_z
---@param negative_z string@ #string negative_z
---@return cc.Skybox@ Skybox#Skybox ret (return value: cc.Skybox)
---@overload fun(positive_x:string,negative_x:string,positive_y:string,negative_y:string,positive_z:string,negative_z:string):cc.Skybox
---@overload fun():cc.Skybox
function Skybox:create(positive_x,negative_x,positive_y,negative_y,positive_z,negative_z) end
---*  draw Skybox object 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Skybox@ Skybox#Skybox self (return value: cc.Skybox)
function Skybox:draw(renderer,transform,flags) end
---* init Skybox.
---@return boolean@ bool#bool ret (return value: bool)
function Skybox:init() end
---* Constructor.
---@return cc.Skybox@ Skybox#Skybox self (return value: cc.Skybox)
function Skybox:Skybox() end


---@class ccui.Slider :  Widget
local Slider={ }
---@class Slider : ccui.Slider
ccui.Slider=Slider


---* Changes the progress direction of slider.<br>
---* param percent  Percent value from 1 to 100.
---@param percent int@ #int percent
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:setPercent(percent) end
---* Query the maximum percent of Slider. The default value is 100.<br>
---* since v3.7<br>
---* return The maximum percent of the Slider.
---@return int@ int#int ret (return value: int)
function Slider:getMaxPercent() end
---* Load normal state texture for slider ball.<br>
---* param normal    Normal state texture.<br>
---* param resType    @see TextureResType .
---@param normal string@ #string normal
---@param resType int@ #int resType
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:loadSlidBallTextureNormal(normal,resType) end
---* Load dark state texture for slider progress bar.<br>
---* param fileName   File path of texture.<br>
---* param resType    @see TextureResType .
---@param fileName string@ #string fileName
---@param resType int@ #int resType
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:loadProgressBarTexture(fileName,resType) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Slider:getBallNormalFile() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Slider:getSlidBallDisabledRenderer() end
---* Sets if slider is using scale9 renderer.<br>
---* param able True that using scale9 renderer, false otherwise.
---@param able boolean@ #bool able
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:setScale9Enabled(able) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Slider:getBallPressedFile() end
---* brief Return a zoom scale<br>
---* since v3.3
---@return float@ float#float ret (return value: float)
function Slider:getZoomScale() end
---* Sets capinsets for progress bar slider, if slider is using scale9 renderer.<br>
---* param capInsets Capinsets for progress bar slider.<br>
---* js NA
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:setCapInsetProgressBarRenderer(capInsets) end
---* Load textures for slider ball.<br>
---* param normal     Normal state texture.<br>
---* param pressed    Pressed state texture.<br>
---* param disabled    Disabled state texture.<br>
---* param texType    @see TextureResType .
---@param normal string@ #string normal
---@param pressed string@ #string pressed
---@param disabled string@ #string disabled
---@param texType int@ #int texType
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:loadSlidBallTextures(normal,pressed,disabled,texType) end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Slider:getSlidBallRenderer() end
---* Add call back function called when slider's percent has changed to slider.<br>
---* param callback An given call back function called when slider's percent has changed to slider.
---@param callback function@ #function callback
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:addEventListener(callback) end
---* Set a large value could give more control to the precision.<br>
---* since v3.7<br>
---* param percent The max percent of Slider.
---@param percent int@ #int percent
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:setMaxPercent(percent) end
---* Load texture for slider bar.<br>
---* param fileName   File name of texture.<br>
---* param resType    @see TextureResType .
---@param fileName string@ #string fileName
---@param resType int@ #int resType
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:loadBarTexture(fileName,resType) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Slider:getProgressBarFile() end
---* Gets capinsets for bar slider, if slider is using scale9 renderer.<br>
---* return capInsets Capinsets for bar slider.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Slider:getCapInsetsBarRenderer() end
---* Updates the visual elements of the slider.
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:updateVisualSlider() end
---* Gets capinsets for progress bar slider, if slider is using scale9 renderer.<br>
---* return Capinsets for progress bar slider.<br>
---* js NA
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Slider:getCapInsetsProgressBarRenderer() end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Slider:getSlidBallPressedRenderer() end
---* Load pressed state texture for slider ball.<br>
---* param pressed    Pressed state texture.<br>
---* param resType    @see TextureResType .
---@param pressed string@ #string pressed
---@param resType int@ #int resType
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:loadSlidBallTexturePressed(pressed,resType) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Slider:getBackFile() end
---* Gets If slider is using scale9 renderer.<br>
---* return True that using scale9 renderer, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Slider:isScale9Enabled() end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function Slider:getBallDisabledFile() end
---* Sets capinsets for bar slider, if slider is using scale9 renderer.<br>
---* param capInsets Capinsets for bar slider.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:setCapInsetsBarRenderer(capInsets) end
---* Gets the progress direction of slider.<br>
---* return percent Percent value from 1 to 100.
---@return int@ int#int ret (return value: int)
function Slider:getPercent() end
---* Sets capinsets for slider, if slider is using scale9 renderer.<br>
---* param capInsets Capinsets for slider.
---@param capInsets rect_table@ #rect_table capInsets
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:setCapInsets(capInsets) end
---* Load disabled state texture for slider ball.<br>
---* param disabled   Disabled state texture.<br>
---* param resType    @see TextureResType .
---@param disabled string@ #string disabled
---@param resType int@ #int resType
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:loadSlidBallTextureDisabled(disabled,resType) end
---* 
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Slider:getSlidBallNormalRenderer() end
---*  When user pressed the button, the button will zoom to a scale.<br>
---* The final scale of the button  equals (button original scale + _zoomScale)<br>
---* since v3.3
---@param scale float@ #float scale
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:setZoomScale(scale) end
---@param barTextureName string@ #string barTextureName
---@param normalBallTextureName string@ #string normalBallTextureName
---@param resType int@ #int resType
---@return ccui.Slider@ Slider#Slider ret (return value: ccui.Slider)
---@overload fun(barTextureName:string,normalBallTextureName:string,resType:int):ccui.Slider
---@overload fun():ccui.Slider
function Slider:create(barTextureName,normalBallTextureName,resType) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function Slider:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Slider:getVirtualRenderer() end
---* 
---@param ignore boolean@ #bool ignore
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:ignoreContentAdaptWithSize(ignore) end
---* Returns the "class name" of widget.
---@return string@ string#string ret (return value: string)
function Slider:getDescription() end
---* 
---@param pt vec2_table@ #vec2_table pt
---@param camera cc.Camera@ #cc.Camera camera
---@param p vec3_table@ #vec3_table p
---@return boolean@ bool#bool ret (return value: bool)
function Slider:hitTest(pt,camera,p) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Slider:init() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Slider:getVirtualRendererSize() end
---* Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.Slider@ Slider#Slider self (return value: ccui.Slider)
function Slider:Slider() end


---@class cc.Spawn :  ActionInterval
local Spawn={ }
---@class Spawn : cc.Spawn
cc.Spawn=Spawn


---* 
---@param arrayOfActions array_table@ #array_table arrayOfActions
---@return boolean@ bool#bool ret (return value: bool)
function Spawn:init(arrayOfActions) end
---*  initializes the Spawn action with the 2 actions to spawn 
---@param action1 cc.FiniteTimeAction@ #cc.FiniteTimeAction action1
---@param action2 cc.FiniteTimeAction@ #cc.FiniteTimeAction action2
---@return boolean@ bool#bool ret (return value: bool)
function Spawn:initWithTwoActions(action1,action2) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.Spawn@ Spawn#Spawn self (return value: cc.Spawn)
function Spawn:startWithTarget(target) end
---* 
---@return cc.Spawn@ Spawn#Spawn ret (return value: cc.Spawn)
function Spawn:clone() end
---* 
---@return cc.Spawn@ Spawn#Spawn self (return value: cc.Spawn)
function Spawn:stop() end
---* 
---@return cc.Spawn@ Spawn#Spawn ret (return value: cc.Spawn)
function Spawn:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.Spawn@ Spawn#Spawn self (return value: cc.Spawn)
function Spawn:update(time) end
---* 
---@return cc.Spawn@ Spawn#Spawn self (return value: cc.Spawn)
function Spawn:Spawn() end


---@class cc.Speed :  Action
local Speed={ }
---@class Speed : cc.Speed
cc.Speed=Speed


---*  Replace the interior action.<br>
---* param action The new action, it will replace the running action.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.Speed@ Speed#Speed self (return value: cc.Speed)
function Speed:setInnerAction(action) end
---*  Return the speed.<br>
---* return The action speed.
---@return float@ float#float ret (return value: float)
function Speed:getSpeed() end
---*  Alter the speed of the inner function in runtime. <br>
---* param speed Alter the speed of the inner function in runtime.
---@param speed float@ #float speed
---@return cc.Speed@ Speed#Speed self (return value: cc.Speed)
function Speed:setSpeed(speed) end
---*  Initializes the action. 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param speed float@ #float speed
---@return boolean@ bool#bool ret (return value: bool)
function Speed:initWithAction(action,speed) end
---*  Return the interior action.<br>
---* return The interior action.
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function Speed:getInnerAction() end
---*  Create the action and set the speed.<br>
---* param action An action.<br>
---* param speed The action speed.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@param speed float@ #float speed
---@return cc.Speed@ Speed#Speed ret (return value: cc.Speed)
function Speed:create(action,speed) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.Speed@ Speed#Speed self (return value: cc.Speed)
function Speed:startWithTarget(target) end
---* 
---@return cc.Speed@ Speed#Speed ret (return value: cc.Speed)
function Speed:reverse() end
---* 
---@return cc.Speed@ Speed#Speed ret (return value: cc.Speed)
function Speed:clone() end
---* 
---@return cc.Speed@ Speed#Speed self (return value: cc.Speed)
function Speed:stop() end
---* param dt in seconds.
---@param dt float@ #float dt
---@return cc.Speed@ Speed#Speed self (return value: cc.Speed)
function Speed:step(dt) end
---*  Return true if the action has finished.<br>
---* return Is true if the action has finished.
---@return boolean@ bool#bool ret (return value: bool)
function Speed:isDone() end
---* 
---@return cc.Speed@ Speed#Speed self (return value: cc.Speed)
function Speed:Speed() end


---@class cc.SplitCols :  TiledGrid3DAction
local SplitCols={ }
---@class SplitCols : cc.SplitCols
cc.SplitCols=SplitCols


---* brief Initializes the action with the number columns and the duration.<br>
---* param duration Specify the duration of the SplitCols action. It's a value in seconds.<br>
---* param cols Specify the columns count should be split.<br>
---* return If the creation success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param cols unsigned_int@ #unsigned int cols
---@return boolean@ bool#bool ret (return value: bool)
function SplitCols:initWithDuration(duration,cols) end
---* brief Create the action with the number of columns and the duration.<br>
---* param duration Specify the duration of the SplitCols action. It's a value in seconds.<br>
---* param cols Specify the columns count should be split.<br>
---* return If the creation success, return a pointer of SplitCols action; otherwise, return nil.
---@param duration float@ #float duration
---@param cols unsigned_int@ #unsigned int cols
---@return cc.SplitCols@ SplitCols#SplitCols ret (return value: cc.SplitCols)
function SplitCols:create(duration,cols) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.SplitCols@ SplitCols#SplitCols self (return value: cc.SplitCols)
function SplitCols:startWithTarget(target) end
---* 
---@return cc.SplitCols@ SplitCols#SplitCols ret (return value: cc.SplitCols)
function SplitCols:clone() end
---* param time in seconds
---@param time float@ #float time
---@return cc.SplitCols@ SplitCols#SplitCols self (return value: cc.SplitCols)
function SplitCols:update(time) end
---* 
---@return cc.SplitCols@ SplitCols#SplitCols self (return value: cc.SplitCols)
function SplitCols:SplitCols() end


---@class cc.SplitRows :  TiledGrid3DAction
local SplitRows={ }
---@class SplitRows : cc.SplitRows
cc.SplitRows=SplitRows


---* brief Initializes the action with the number rows and the duration.<br>
---* param duration Specify the duration of the SplitRows action. It's a value in seconds.<br>
---* param rows Specify the rows count should be split.<br>
---* return If the creation success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param rows unsigned_int@ #unsigned int rows
---@return boolean@ bool#bool ret (return value: bool)
function SplitRows:initWithDuration(duration,rows) end
---* brief Create the action with the number of rows and the duration.<br>
---* param duration Specify the duration of the SplitRows action. It's a value in seconds.<br>
---* param rows Specify the rows count should be split.<br>
---* return If the creation success, return a pointer of SplitRows action; otherwise, return nil.
---@param duration float@ #float duration
---@param rows unsigned_int@ #unsigned int rows
---@return cc.SplitRows@ SplitRows#SplitRows ret (return value: cc.SplitRows)
function SplitRows:create(duration,rows) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.SplitRows@ SplitRows#SplitRows self (return value: cc.SplitRows)
function SplitRows:startWithTarget(target) end
---* 
---@return cc.SplitRows@ SplitRows#SplitRows ret (return value: cc.SplitRows)
function SplitRows:clone() end
---* 
---@param time float@ #float time
---@return cc.SplitRows@ SplitRows#SplitRows self (return value: cc.SplitRows)
function SplitRows:update(time) end
---* 
---@return cc.SplitRows@ SplitRows#SplitRows self (return value: cc.SplitRows)
function SplitRows:SplitRows() end


---@class cc.SpotLight :  BaseLight
local SpotLight={ }
---@class SpotLight : cc.SpotLight
cc.SpotLight=SpotLight


---* Returns the range of point or spot light.<br>
---* return The range of the point or spot light.
---@return float@ float#float ret (return value: float)
function SpotLight:getRange() end
---* Sets the Direction in parent.<br>
---* param dir The Direction in parent.
---@param dir vec3_table@ #vec3_table dir
---@return cc.SpotLight@ SpotLight#SpotLight self (return value: cc.SpotLight)
function SpotLight:setDirection(dir) end
---*  get cos innerAngle 
---@return float@ float#float ret (return value: float)
function SpotLight:getCosInnerAngle() end
---* Returns the outer angle of the spot light (in radians).
---@return float@ float#float ret (return value: float)
function SpotLight:getOuterAngle() end
---* Returns the inner angle the spot light (in radians).
---@return float@ float#float ret (return value: float)
function SpotLight:getInnerAngle() end
---* Returns the Direction in parent.
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function SpotLight:getDirection() end
---*  get cos outAngle 
---@return float@ float#float ret (return value: float)
function SpotLight:getCosOuterAngle() end
---* Sets the outer angle of a spot light (in radians).<br>
---* param outerAngle The angle of spot light (in radians).
---@param outerAngle float@ #float outerAngle
---@return cc.SpotLight@ SpotLight#SpotLight self (return value: cc.SpotLight)
function SpotLight:setOuterAngle(outerAngle) end
---* Sets the inner angle of a spot light (in radians).<br>
---* param angle The angle of spot light (in radians).
---@param angle float@ #float angle
---@return cc.SpotLight@ SpotLight#SpotLight self (return value: cc.SpotLight)
function SpotLight:setInnerAngle(angle) end
---* Returns direction in world.
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function SpotLight:getDirectionInWorld() end
---* Sets the range of point or spot light.<br>
---* param range The range of point or spot light.
---@param range float@ #float range
---@return cc.SpotLight@ SpotLight#SpotLight self (return value: cc.SpotLight)
function SpotLight:setRange(range) end
---* Creates a spot light.<br>
---* param direction The light's direction<br>
---* param position The light's position<br>
---* param color The light's color.<br>
---* param innerAngle The light's inner angle (in radians).<br>
---* param outerAngle The light's outer angle (in radians).<br>
---* param range The light's range.<br>
---* return The new spot light.
---@param direction vec3_table@ #vec3_table direction
---@param position vec3_table@ #vec3_table position
---@param color color3b_table@ #color3b_table color
---@param innerAngle float@ #float innerAngle
---@param outerAngle float@ #float outerAngle
---@param range float@ #float range
---@return cc.SpotLight@ SpotLight#SpotLight ret (return value: cc.SpotLight)
function SpotLight:create(direction,position,color,innerAngle,outerAngle,range) end
---* 
---@return int@ int#int ret (return value: int)
function SpotLight:getLightType() end
---* 
---@return cc.SpotLight@ SpotLight#SpotLight self (return value: cc.SpotLight)
function SpotLight:SpotLight() end


---@class cc.Sprite :  Node@TextureProtocol
local Sprite={ }
---@class Sprite : cc.Sprite
cc.Sprite=Sprite


---@param spriteFrameName string@ #string spriteFrameName
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
---@overload fun(unkown0:cc.SpriteFrame):cc.Sprite
---@overload fun(spriteFrameName:string):cc.Sprite
function Sprite:setSpriteFrame(spriteFrameName) end
---@param filename string@ #string filename
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
---@overload fun(unkown0:cc.Texture2D):cc.Sprite
---@overload fun(filename:string):cc.Sprite
function Sprite:setTexture(filename) end
---*  Returns the Texture2D object used by the sprite. 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function Sprite:getTexture() end
---* Sets whether the sprite should be flipped vertically or not.<br>
---* param flippedY true if the sprite should be flipped vertically, false otherwise.
---@param flippedY boolean@ #bool flippedY
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setFlippedY(flippedY) end
---* Sets whether the sprite should be flipped horizontally or not.<br>
---* param flippedX true if the sprite should be flipped horizontally, false otherwise.
---@param flippedX boolean@ #bool flippedX
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setFlippedX(flippedX) end
---* / @}
---@return int@ int#int ret (return value: int)
function Sprite:getResourceType() end
---* / @{/ @name Animation methods<br>
---* Changes the display frame with animation name and index.<br>
---* The animation name will be get from the AnimationCache.
---@param animationName string@ #string animationName
---@param frameIndex int@ #int frameIndex
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setDisplayFrameWithAnimationName(animationName,frameIndex) end
---* Returns the batch node object if this sprite is rendered by SpriteBatchNode.<br>
---* return The SpriteBatchNode object if this sprite is rendered by SpriteBatchNode,<br>
---* nullptr if the sprite isn't used batch node.
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode ret (return value: cc.SpriteBatchNode)
function Sprite:getBatchNode() end
---* Gets the offset position of the sprite. Calculated automatically by editors like Zwoptex.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Sprite:getOffsetPosition() end
---* brief Returns the Cap Insets rect<br>
---* return Scale9Sprite's cap inset.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Sprite:getCenterRect() end
---* 
---@param cleanup boolean@ #bool cleanup
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:removeAllChildrenWithCleanup(cleanup) end
---* setCenterRectNormalized<br>
---* Useful to implement "9 sliced" sprites.<br>
---* The default value is (0,0) - (1,1), which means that only one "slice" will be used: From top-left (0,0) to bottom-right (1,1).<br>
---* If the value is different than (0,0), (1,1), then the sprite will be sliced into a 3 x 3 grid. The four corners of this grid are applied without<br>
---* performing any scaling. The upper- and lower-middle parts are scaled horizontally, and the left- and right-middle parts are scaled vertically.<br>
---* The center is scaled in both directions.<br>
---* Important: The scaling is based the Sprite's trimmed size.<br>
---* Limitations: Does not work when the sprite is part of `SpriteBatchNode`.
---@param rect rect_table@ #rect_table rect
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setCenterRectNormalized(rect) end
---*  returns whether or not contentSize stretches the sprite's texture 
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:isStretchEnabled() end
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@param untrimmedSize size_table@ #size_table untrimmedSize
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
---@overload fun(rect:rect_table,rotated:boolean,untrimmedSize:size_table):cc.Sprite
---@overload fun(rect:rect_table):cc.Sprite
function Sprite:setTextureRect(rect,rotated,untrimmedSize) end
---* Initializes a sprite with an sprite frame name.<br>
---* A SpriteFrame will be fetched from the SpriteFrameCache by name.<br>
---* If the SpriteFrame doesn't exist it will raise an exception.<br>
---* param   spriteFrameName  A key string that can fetched a valid SpriteFrame from SpriteFrameCache.<br>
---* return  True if the sprite is initialized properly, false otherwise.
---@param spriteFrameName string@ #string spriteFrameName
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:initWithSpriteFrameName(spriteFrameName) end
---*  whether or not contentSize stretches the sprite's texture 
---@param enabled boolean@ #bool enabled
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setStretchEnabled(enabled) end
---* Returns whether or not a SpriteFrame is being displayed.
---@param frame cc.SpriteFrame@ #cc.SpriteFrame frame
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:isFrameDisplayed(frame) end
---* Returns the index used on the TextureAtlas.
---@return int@ int#int ret (return value: int)
function Sprite:getAtlasIndex() end
---* Sets the batch node to sprite.<br>
---* warning This method is not recommended for game developers. Sample code for using batch node<br>
---* code<br>
---* SpriteBatchNode *batch = SpriteBatchNode::create("Images/grossini_dance_atlas.png", 15);<br>
---* Sprite *sprite = Sprite::createWithTexture(batch->getTexture(), Rect(0, 0, 57, 57));<br>
---* batch->addChild(sprite);<br>
---* layer->addChild(batch);<br>
---* endcode
---@param spriteBatchNode cc.SpriteBatchNode@ #cc.SpriteBatchNode spriteBatchNode
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setBatchNode(spriteBatchNode) end
---* js  NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function Sprite:getBlendFunc() end
---* 
---@param rect rect_table@ #rect_table rect
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setCenterRect(rect) end
---* Sets the weak reference of the TextureAtlas when the sprite is rendered using via SpriteBatchNode.
---@param textureAtlas cc.TextureAtlas@ #cc.TextureAtlas textureAtlas
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setTextureAtlas(textureAtlas) end
---* Returns the current displayed frame.
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame ret (return value: cc.SpriteFrame)
function Sprite:getSpriteFrame() end
---* 
---@return string@ string#string ret (return value: string)
function Sprite:getResourceName() end
---* Whether or not the Sprite needs to be updated in the Atlas.<br>
---* return True if the sprite needs to be updated in the Atlas, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:isDirty() end
---* getCenterRectNormalized<br>
---* Returns the CenterRect in normalized coordinates
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Sprite:getCenterRectNormalized() end
---* Sets the index used on the TextureAtlas.<br>
---* warning Don't modify this value unless you know what you are doing.
---@param atlasIndex int@ #int atlasIndex
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setAtlasIndex(atlasIndex) end
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(texture:cc.Texture2D,rect:rect_table):boolean
---@overload fun(texture:cc.Texture2D):boolean
---@overload fun(texture:cc.Texture2D,rect:rect_table,rotated:boolean):boolean
function Sprite:initWithTexture(texture,rect,rotated) end
---* Makes the Sprite to be updated in the Atlas.
---@param dirty boolean@ #bool dirty
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setDirty(dirty) end
---* Returns whether or not the texture rectangle is rotated.
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:isTextureRectRotated() end
---* Returns the rect of the Sprite in points.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Sprite:getTextureRect() end
---@param filename string@ #string filename
---@param rect rect_table@ #rect_table rect
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(filename:string,rect:rect_table):boolean
---@overload fun(filename:string):boolean
function Sprite:initWithFile(filename,rect) end
---* / @{/ @name Functions inherited from TextureProtocol.<br>
---* code<br>
---* When this function bound into js or lua,the parameter will be changed.<br>
---* In js: var setBlendFunc(var src, var dst).<br>
---* In lua: local setBlendFunc(local src, local dst).<br>
---* endcode
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setBlendFunc(blendFunc) end
---* Gets the weak reference of the TextureAtlas when the sprite is rendered using via SpriteBatchNode.
---@return cc.TextureAtlas@ TextureAtlas#TextureAtlas ret (return value: cc.TextureAtlas)
function Sprite:getTextureAtlas() end
---* Initializes a sprite with an SpriteFrame. The texture and rect in SpriteFrame will be applied on this sprite.<br>
---* param   spriteFrame  A SpriteFrame object. It should includes a valid texture and a rect.<br>
---* return  True if the sprite is initialized properly, false otherwise.
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:initWithSpriteFrame(spriteFrame) end
---* Returns the flag which indicates whether the sprite is flipped horizontally or not.<br>
---* It only flips the texture of the sprite, and not the texture of the sprite's children.<br>
---* Also, flipping the texture doesn't alter the anchorPoint.<br>
---* If you want to flip the anchorPoint too, and/or to flip the children too use:<br>
---* sprite->setScaleX(sprite->getScaleX() * -1);<br>
---* return true if the sprite is flipped horizontally, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:isFlippedX() end
---* Return the flag which indicates whether the sprite is flipped vertically or not.<br>
---* It only flips the texture of the sprite, and not the texture of the sprite's children.<br>
---* Also, flipping the texture doesn't alter the anchorPoint.<br>
---* If you want to flip the anchorPoint too, and/or to flip the children too use:<br>
---* sprite->setScaleY(sprite->getScaleY() * -1);<br>
---* return true if the sprite is flipped vertically, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:isFlippedY() end
---* Sets the vertex rect.<br>
---* It will be called internally by setTextureRect.<br>
---* Useful if you want to create 2x images from SD images in Retina Display.<br>
---* Do not call it manually. Use setTextureRect instead.
---@param rect rect_table@ #rect_table rect
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setVertexRect(rect) end
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
---@overload fun(texture:cc.Texture2D,rect:rect_table,rotated:boolean):cc.Sprite
---@overload fun(texture:cc.Texture2D):cc.Sprite
function Sprite:createWithTexture(texture,rect,rotated) end
---* Creates a sprite with an sprite frame name.<br>
---* A SpriteFrame will be fetched from the SpriteFrameCache by spriteFrameName param.<br>
---* If the SpriteFrame doesn't exist it will raise an exception.<br>
---* param   spriteFrameName A null terminated string which indicates the sprite frame name.<br>
---* return  An autoreleased sprite object.
---@param spriteFrameName string@ #string spriteFrameName
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Sprite:createWithSpriteFrameName(spriteFrameName) end
---* Creates a sprite with an sprite frame.<br>
---* param   spriteFrame    A sprite frame which involves a texture and a rect.<br>
---* return  An autoreleased sprite object.
---@param spriteFrame cc.SpriteFrame@ #cc.SpriteFrame spriteFrame
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Sprite:createWithSpriteFrame(spriteFrame) end
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@param tag int@ #int tag
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
---@overload fun(child:cc.Node,zOrder:int,unkown2:string):cc.Sprite
---@overload fun(child:cc.Node,zOrder:int,tag:int):cc.Sprite
function Sprite:addChild(child,zOrder,tag) end
---* 
---@param anchor vec2_table@ #vec2_table anchor
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setAnchorPoint(anchor) end
---* 
---@param rotationX float@ #float rotationX
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setRotationSkewX(rotationX) end
---* 
---@param scaleY float@ #float scaleY
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setScaleY(scaleY) end
---@param scaleX float@ #float scaleX
---@param scaleY float@ #float scaleY
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
---@overload fun(scaleX:float):cc.Sprite
---@overload fun(scaleX:float,scaleY:float):cc.Sprite
function Sprite:setScale(scaleX,scaleY) end
---* 
---@param size size_table@ #size_table size
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setContentSize(size) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:isOpacityModifyRGB() end
---* 
---@param modify boolean@ #bool modify
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setOpacityModifyRGB(modify) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Sprite:init() end
---* 
---@param rotation float@ #float rotation
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setRotation(rotation) end
---* 
---@param value boolean@ #bool value
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setIgnoreAnchorPointForPosition(value) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:draw(renderer,transform,flags) end
---* / @{/ @name Functions inherited from Node.
---@param scaleX float@ #float scaleX
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setScaleX(scaleX) end
---* js NA
---@return string@ string#string ret (return value: string)
function Sprite:getDescription() end
---* 
---@param rotationY float@ #float rotationY
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setRotationSkewY(rotationY) end
---* 
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:sortAllChildren() end
---* 
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:reorderChild(child,zOrder) end
---* 
---@param positionZ float@ #float positionZ
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setPositionZ(positionZ) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:removeChild(child,cleanup) end
---* Updates the quad according the rotation, position, scale values.
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:updateTransform() end
---* 
---@param sx float@ #float sx
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setSkewX(sx) end
---* 
---@param sy float@ #float sy
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setSkewY(sy) end
---* 
---@param bVisible boolean@ #bool bVisible
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:setVisible(bVisible) end
---* js ctor
---@return cc.Sprite@ Sprite#Sprite self (return value: cc.Sprite)
function Sprite:Sprite() end


---@class cc.Sprite3D :  Node@BlendProtocol
local Sprite3D={ }
---@class Sprite3D : cc.Sprite3D
cc.Sprite3D=Sprite3D


---* 
---@param enable boolean@ #bool enable
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setCullFaceEnabled(enable) end
---@param texFile string@ #string texFile
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
---@overload fun(unkown0:cc.Texture2D):cc.Sprite3D
---@overload fun(texFile:string):cc.Sprite3D
function Sprite3D:setTexture(texFile) end
---* 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Sprite3D:getLightMask() end
---*  Adds a new material to a particular mesh of the sprite.<br>
---* meshIndex is the mesh that will be applied to.<br>
---* if meshIndex == -1, then it will be applied to all the meshes that belong to the sprite.
---@param meshIndex int@ #int meshIndex
---@return cc.Material@ Material#Material ret (return value: cc.Material)
function Sprite3D:getMaterial(meshIndex) end
---* 
---@param cullFace unsigned_int@ #unsigned int cullFace
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setCullFace(cullFace) end
---* Get meshes used in sprite 3d
---@return array_table@ array_table#array_table ret (return value: array_table)
function Sprite3D:getMeshes() end
---* remove all attach nodes
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:removeAllAttachNode() end
---@param material cc.Material@ #cc.Material material
---@param meshIndex int@ #int meshIndex
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
---@overload fun(material:cc.Material,meshIndex:int):cc.Sprite3D
---@overload fun(material:cc.Material):cc.Sprite3D
function Sprite3D:setMaterial(material,meshIndex) end
---* get mesh
---@return cc.Mesh@ Mesh#Mesh ret (return value: cc.Mesh)
function Sprite3D:getMesh() end
---*  get mesh count 
---@return int@ int#int ret (return value: int)
function Sprite3D:getMeshCount() end
---* get Mesh by index
---@param index int@ #int index
---@return cc.Mesh@ Mesh#Mesh ret (return value: cc.Mesh)
function Sprite3D:getMeshByIndex(index) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Sprite3D:isForceDepthWrite() end
---* 
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function Sprite3D:getBlendFunc() end
---*  light mask getter & setter, light works only when _lightmask & light's flag is true, default value of _lightmask is 0xffff 
---@param mask unsigned_int@ #unsigned int mask
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setLightMask(mask) end
---* get AttachNode by bone name, return nullptr if not exist
---@param boneName string@ #string boneName
---@return cc.AttachNode@ AttachNode#AttachNode ret (return value: cc.AttachNode)
function Sprite3D:getAttachNode(boneName) end
---* 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setBlendFunc(blendFunc) end
---* force set this Sprite3D to 2D render queue
---@param force2D boolean@ #bool force2D
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setForce2DQueue(force2D) end
---* generate default material
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:genMaterial() end
---* remove attach node
---@param boneName string@ #string boneName
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:removeAttachNode(boneName) end
---* 
---@return cc.Skeleton3D@ Skeleton3D#Skeleton3D ret (return value: cc.Skeleton3D)
function Sprite3D:getSkeleton() end
---* Force to write to depth buffer, this is useful if you want to achieve effects like fading.
---@param value boolean@ #bool value
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setForceDepthWrite(value) end
---* get Mesh by Name, it returns the first one if there are more than one mesh with the same name 
---@param name string@ #string name
---@return cc.Mesh@ Mesh#Mesh ret (return value: cc.Mesh)
function Sprite3D:getMeshByName(name) end
---@param modelPath string@ #string modelPath
---@param texturePath string@ #string texturePath
---@return cc.Sprite3D@ Sprite3D#Sprite3D ret (return value: cc.Sprite3D)
---@overload fun(modelPath:string):cc.Sprite3D
---@overload fun():cc.Sprite3D
---@overload fun(modelPath:string,texturePath:string):cc.Sprite3D
function Sprite3D:create(modelPath,texturePath) end
---* draw
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:draw(renderer,transform,flags) end
---* Executes an action, and returns the action that is executed. For Sprite3D special logic are needed to take care of Fading.<br>
---* This node becomes the action's target. Refer to Action::getTarget()<br>
---* warning Actions don't retain their target.<br>
---* return An Action pointer
---@param action cc.Action@ #cc.Action action
---@return cc.Action@ Action#Action ret (return value: cc.Action)
function Sprite3D:runAction(action) end
---*  just remember bind attributes 
---@param glprogram cc.GLProgram@ #cc.GLProgram glprogram
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setGLProgram(glprogram) end
---* Returns 2d bounding-box<br>
---* Note: the bounding-box is just get from the AABB which as Z=0, so that is not very accurate.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function Sprite3D:getBoundingBox() end
---*  set GLProgramState, you should bind attributes by yourself 
---@param glProgramState cc.GLProgramState@ #cc.GLProgramState glProgramState
---@return cc.Sprite3D@ Sprite3D#Sprite3D self (return value: cc.Sprite3D)
function Sprite3D:setGLProgramState(glProgramState) end


---@class cc.Sprite3DCache 
local Sprite3DCache={ }
---@class Sprite3DCache : cc.Sprite3DCache
cc.Sprite3DCache=Sprite3DCache


---* remove the SpriteData from Sprite3D by given the specified key
---@param key string@ #string key
---@return cc.Sprite3DCache@ Sprite3DCache#Sprite3DCache self (return value: cc.Sprite3DCache)
function Sprite3DCache:removeSprite3DData(key) end
---* remove all the SpriteData from Sprite3D
---@return cc.Sprite3DCache@ Sprite3DCache#Sprite3DCache self (return value: cc.Sprite3DCache)
function Sprite3DCache:removeAllSprite3DData() end
---* 
---@return cc.Sprite3DCache@ Sprite3DCache#Sprite3DCache self (return value: cc.Sprite3DCache)
function Sprite3DCache:destroyInstance() end
---* get & destroy
---@return cc.Sprite3DCache@ Sprite3DCache#Sprite3DCache ret (return value: cc.Sprite3DCache)
function Sprite3DCache:getInstance() end
---* 
---@return cc.Sprite3DCache@ Sprite3DCache#Sprite3DCache self (return value: cc.Sprite3DCache)
function Sprite3DCache:Sprite3DCache() end


---@class cc.Sprite3DMaterial :  Material
local Sprite3DMaterial={ }
---@class Sprite3DMaterial : cc.Sprite3DMaterial
cc.Sprite3DMaterial=Sprite3DMaterial


---* Get material type<br>
---* return Material type
---@return int@ int#int ret (return value: int)
function Sprite3DMaterial:getMaterialType() end
---* Create material with file name, it creates material from cache if it is previously loaded<br>
---* param path Path of material file<br>
---* return Created material
---@param path string@ #string path
---@return cc.Sprite3DMaterial@ Sprite3DMaterial#Sprite3DMaterial ret (return value: cc.Sprite3DMaterial)
function Sprite3DMaterial:createWithFilename(path) end
---* Release all cached materials
---@return cc.Sprite3DMaterial@ Sprite3DMaterial#Sprite3DMaterial self (return value: cc.Sprite3DMaterial)
function Sprite3DMaterial:releaseCachedMaterial() end
---@param type int@ #int type
---@param skinned boolean@ #bool skinned
---@return cc.Sprite3DMaterial@ Sprite3DMaterial#Sprite3DMaterial ret (return value: cc.Sprite3DMaterial)
---@overload fun():cc.Sprite3DMaterial
---@overload fun(type:int,skinned:boolean):cc.Sprite3DMaterial
function Sprite3DMaterial:createBuiltInMaterial(type,skinned) end
---* Create material with GLProgramState<br>
---* param programState GLProgramState instance<br>
---* return Created material
---@param programState cc.GLProgramState@ #cc.GLProgramState programState
---@return cc.Sprite3DMaterial@ Sprite3DMaterial#Sprite3DMaterial ret (return value: cc.Sprite3DMaterial)
function Sprite3DMaterial:createWithGLStateProgram(programState) end
---* Release all built in materials
---@return cc.Sprite3DMaterial@ Sprite3DMaterial#Sprite3DMaterial self (return value: cc.Sprite3DMaterial)
function Sprite3DMaterial:releaseBuiltInMaterial() end
---* Clone material
---@return cc.Material@ Material#Material ret (return value: cc.Material)
function Sprite3DMaterial:clone() end


---@class cc.SpriteBatchNode :  Node@TextureProtocol
local SpriteBatchNode={ }
---@class SpriteBatchNode : cc.SpriteBatchNode
cc.SpriteBatchNode=SpriteBatchNode


---*  Append the child. <br>
---* param sprite A Sprite.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:appendChild(sprite) end
---* 
---@param reorder boolean@ #bool reorder
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:reorderBatch(reorder) end
---* 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function SpriteBatchNode:getTexture() end
---* 
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:setTexture(texture) end
---*  Removes a child given a certain index. It will also cleanup the running actions depending on the cleanup parameter.<br>
---* param index A certain index.<br>
---* param doCleanup Whether or not to cleanup the running actions.<br>
---* warning Removing a child from a SpriteBatchNode is very slow.
---@param index int@ #int index
---@param doCleanup boolean@ #bool doCleanup
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:removeChildAtIndex(index,doCleanup) end
---*  Remove a sprite from Atlas. <br>
---* param sprite A Sprite.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:removeSpriteFromAtlas(sprite) end
---* 
---@param child cc.Sprite@ #cc.Sprite child
---@param z int@ #int z
---@param aTag int@ #int aTag
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode ret (return value: cc.SpriteBatchNode)
function SpriteBatchNode:addSpriteWithoutQuad(child,z,aTag) end
---*  Get the nearest index from the sprite in z.<br>
---* param sprite The parent sprite.<br>
---* param z Z order for drawing priority.<br>
---* return Index.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@param z int@ #int z
---@return int@ int#int ret (return value: int)
function SpriteBatchNode:atlasIndexForChild(sprite,z) end
---*  Increase the Atlas Capacity. 
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:increaseAtlasCapacity() end
---*  Get the Min image block index,in all child. <br>
---* param sprite The parent sprite.<br>
---* return Index.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@return int@ int#int ret (return value: int)
function SpriteBatchNode:lowestAtlasIndexInChild(sprite) end
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function SpriteBatchNode:getBlendFunc() end
---*  initializes a SpriteBatchNode with a texture2d and capacity of children.<br>
---* The capacity will be increased in 33% in runtime if it runs out of space.
---@param tex cc.Texture2D@ #cc.Texture2D tex
---@param capacity int@ #int capacity
---@return boolean@ bool#bool ret (return value: bool)
function SpriteBatchNode:initWithTexture(tex,capacity) end
---*  Sets the TextureAtlas object. <br>
---* param textureAtlas The TextureAtlas object.
---@param textureAtlas cc.TextureAtlas@ #cc.TextureAtlas textureAtlas
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:setTextureAtlas(textureAtlas) end
---*  reserves capacity for the batch node.<br>
---* If the current capacity is bigger, nothing happens.<br>
---* otherwise, a new capacity is allocated 
---@param newCapacity int@ #int newCapacity
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:reserveCapacity(newCapacity) end
---* js NA
---@param cleanup boolean@ #bool cleanup
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:removeAllChildrenWithCleanup(cleanup) end
---*  Inserts a quad at a certain index into the texture atlas. The Sprite won't be added into the children array.<br>
---* This method should be called only when you are dealing with very big AtlasSprite and when most of the Sprite won't be updated.<br>
---* For example: a tile map (TMXMap) or a label with lots of characters (LabelBMFont).
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@param index int@ #int index
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:insertQuadFromSprite(sprite,index) end
---*  initializes a SpriteBatchNode with a file image (.png, .jpeg, .pvr, etc) and a capacity of children.<br>
---* The capacity will be increased in 33% in runtime if it runs out of space.<br>
---* The file will be loaded using the TextureMgr.<br>
---* js init<br>
---* lua init
---@param fileImage string@ #string fileImage
---@param capacity int@ #int capacity
---@return boolean@ bool#bool ret (return value: bool)
function SpriteBatchNode:initWithFile(fileImage,capacity) end
---* code<br>
---* When this function bound into js or lua,the parameter will be changed.<br>
---* In js: var setBlendFunc(var src, var dst).<br>
---* endcode<br>
---* lua NA 
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:setBlendFunc(blendFunc) end
---*  Rebuild index with a sprite all child. <br>
---* param parent The parent sprite.<br>
---* param index The child index.<br>
---* return Index.
---@param parent cc.Sprite@ #cc.Sprite parent
---@param index int@ #int index
---@return int@ int#int ret (return value: int)
function SpriteBatchNode:rebuildIndexInOrder(parent,index) end
---*  Returns the TextureAtlas object. <br>
---* return The TextureAtlas object.
---@return cc.TextureAtlas@ TextureAtlas#TextureAtlas ret (return value: cc.TextureAtlas)
function SpriteBatchNode:getTextureAtlas() end
---*  Get the Max image block index,in all child.<br>
---* param sprite The parent sprite.<br>
---* return Index.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@return int@ int#int ret (return value: int)
function SpriteBatchNode:highestAtlasIndexInChild(sprite) end
---*  Creates a SpriteBatchNode with a file image (.png, .jpeg, .pvr, etc) and capacity of children.<br>
---* The capacity will be increased in 33% in runtime if it runs out of space.<br>
---* The file will be loaded using the TextureMgr.<br>
---* param fileImage A file image (.png, .jpeg, .pvr, etc).<br>
---* param capacity The capacity of children.<br>
---* return Return an autorelease object.
---@param fileImage string@ #string fileImage
---@param capacity int@ #int capacity
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode ret (return value: cc.SpriteBatchNode)
function SpriteBatchNode:create(fileImage,capacity) end
---*  Creates a SpriteBatchNode with a texture2d and capacity of children.<br>
---* The capacity will be increased in 33% in runtime if it runs out of space.<br>
---* param tex A texture2d.<br>
---* param capacity The capacity of children.<br>
---* return Return an autorelease object.
---@param tex cc.Texture2D@ #cc.Texture2D tex
---@param capacity int@ #int capacity
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode ret (return value: cc.SpriteBatchNode)
function SpriteBatchNode:createWithTexture(tex,capacity) end
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@param tag int@ #int tag
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
---@overload fun(child:cc.Node,zOrder:int,unkown2:string):cc.SpriteBatchNode
---@overload fun(child:cc.Node,zOrder:int,tag:int):cc.SpriteBatchNode
function SpriteBatchNode:addChild(child,zOrder,tag) end
---* js NA
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:draw(renderer,transform,flags) end
---* js NA
---@return string@ string#string ret (return value: string)
function SpriteBatchNode:getDescription() end
---* js NA
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param parentTransform mat4_table@ #mat4_table parentTransform
---@param parentFlags unsigned_int@ #unsigned int parentFlags
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:visit(renderer,parentTransform,parentFlags) end
---* 
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:sortAllChildren() end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:removeChild(child,cleanup) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function SpriteBatchNode:init() end
---* 
---@param child cc.Node@ #cc.Node child
---@param zOrder int@ #int zOrder
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:reorderChild(child,zOrder) end
---* js ctor
---@return cc.SpriteBatchNode@ SpriteBatchNode#SpriteBatchNode self (return value: cc.SpriteBatchNode)
function SpriteBatchNode:SpriteBatchNode() end


---@class ccs.SpriteDisplayData :  DisplayData
local SpriteDisplayData={ }
---@class SpriteDisplayData : ccs.SpriteDisplayData
ccs.SpriteDisplayData=SpriteDisplayData


---* 
---@param displayData ccs.DisplayData@ #ccs.DisplayData displayData
---@return ccs.SpriteDisplayData@ SpriteDisplayData#SpriteDisplayData self (return value: ccs.SpriteDisplayData)
function SpriteDisplayData:copy(displayData) end
---* 
---@return ccs.SpriteDisplayData@ SpriteDisplayData#SpriteDisplayData ret (return value: ccs.SpriteDisplayData)
function SpriteDisplayData:create() end
---* js ctor
---@return ccs.SpriteDisplayData@ SpriteDisplayData#SpriteDisplayData self (return value: ccs.SpriteDisplayData)
function SpriteDisplayData:SpriteDisplayData() end


---@class cc.SpriteFrame :  Ref
local SpriteFrame={ }
---@class SpriteFrame : cc.SpriteFrame
cc.SpriteFrame=SpriteFrame


---*  Set anchor point of the frame.<br>
---* param anchorPoint The anchor point of the sprite frame.
---@param anchorPoint vec2_table@ #vec2_table anchorPoint
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setAnchorPoint(anchorPoint) end
---*  Set texture of the frame, the texture is retained.<br>
---* param pobTexture The texture of the sprite frame.
---@param pobTexture cc.Texture2D@ #cc.Texture2D pobTexture
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setTexture(pobTexture) end
---*  Get texture of the frame.<br>
---* return The texture of the sprite frame.
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function SpriteFrame:getTexture() end
---*  Set offset of the frame.<br>
---* param offsetInPixels The offset of the sprite frame, in pixels.
---@param offsetInPixels vec2_table@ #vec2_table offsetInPixels
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setOffsetInPixels(offsetInPixels) end
---*  Get original size of the trimmed image.<br>
---* return The original size of the trimmed image, in pixels.
---@return size_table@ size_table#size_table ret (return value: size_table)
function SpriteFrame:getOriginalSizeInPixels() end
---*  Set original size of the trimmed image.<br>
---* param sizeInPixels The original size of the trimmed image.
---@param sizeInPixels size_table@ #size_table sizeInPixels
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setOriginalSize(sizeInPixels) end
---*  Get center rect of the frame.<br>
---* Useful to create 9-slice sprites<br>
---* return The center rect of the sprite frame in points
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function SpriteFrame:getCenterRect() end
---*  Set rect of the sprite frame.<br>
---* param rectInPixels The rect of the sprite frame, in pixels.
---@param rectInPixels rect_table@ #rect_table rectInPixels
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setRectInPixels(rectInPixels) end
---*  Get rect of the frame.<br>
---* return The rect of the sprite frame.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function SpriteFrame:getRect() end
---* setCenterRect<br>
---* Useful to implement "9 sliced" sprites.<br>
---* The sprite will be sliced into a 3 x 3 grid. The four corners of this grid are applied without<br>
---* performing any scaling. The upper- and lower-middle parts are scaled horizontally, and the left- and right-middle parts are scaled vertically.<br>
---* The center is scaled in both directions.<br>
---* Important: The scaling is based the Sprite's trimmed size.<br>
---* Limitations: Does not work when the sprite is part of `SpriteBatchNode`.<br>
---* param centerRect the Rect in points
---@param centerRect rect_table@ #rect_table centerRect
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setCenterRectInPixels(centerRect) end
---*  Set offset of the frame.<br>
---* param offsets The offset of the sprite frame.
---@param offsets vec2_table@ #vec2_table offsets
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setOffset(offsets) end
---@param filename string@ #string filename
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@param offset vec2_table@ #vec2_table offset
---@param originalSize size_table@ #size_table originalSize
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(filename:string,rect:rect_table,rotated:boolean,offset:vec2_table,originalSize:size_table):boolean
---@overload fun(filename:string,rect:rect_table):boolean
function SpriteFrame:initWithTextureFilename(filename,rect,rotated,offset,originalSize) end
---*  Set rect of the frame.<br>
---* param rect The rect of the sprite.
---@param rect rect_table@ #rect_table rect
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setRect(rect) end
---@param pobTexture cc.Texture2D@ #cc.Texture2D pobTexture
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@param offset vec2_table@ #vec2_table offset
---@param originalSize size_table@ #size_table originalSize
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(pobTexture:cc.Texture2D,rect:rect_table,rotated:boolean,offset:vec2_table,originalSize:size_table):boolean
---@overload fun(pobTexture:cc.Texture2D,rect:rect_table):boolean
function SpriteFrame:initWithTexture(pobTexture,rect,rotated,offset,originalSize) end
---*  Get original size of the trimmed image.<br>
---* return The original size of the trimmed image.
---@return size_table@ size_table#size_table ret (return value: size_table)
function SpriteFrame:getOriginalSize() end
---* 
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame ret (return value: cc.SpriteFrame)
function SpriteFrame:clone() end
---*  Get rect of the sprite frame.<br>
---* return The rect of the sprite frame, in pixels.
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function SpriteFrame:getRectInPixels() end
---* Is the sprite frame rotated or not.<br>
---* return Is rotated if true.
---@return boolean@ bool#bool ret (return value: bool)
function SpriteFrame:isRotated() end
---*  hasCenterRect<br>
---* return Whether or not it has a centerRect
---@return boolean@ bool#bool ret (return value: bool)
function SpriteFrame:hasCenterRect() end
---*  Set rotated of the sprite frame.<br>
---* param rotated Rotated the sprite frame if true.
---@param rotated boolean@ #bool rotated
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setRotated(rotated) end
---*  Get offset of the frame.<br>
---* return The offset of the sprite frame.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function SpriteFrame:getOffset() end
---*  Set original size of the trimmed image.<br>
---* param sizeInPixels The original size of the trimmed image, in pixels.
---@param sizeInPixels size_table@ #size_table sizeInPixels
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:setOriginalSizeInPixels(sizeInPixels) end
---*  Get anchor point of the frame.<br>
---* return The anchor point of the sprite frame.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function SpriteFrame:getAnchorPoint() end
---*  Check if anchor point is defined for the frame.<br>
---* return true if anchor point is available.
---@return boolean@ bool#bool ret (return value: bool)
function SpriteFrame:hasAnchorPoint() end
---*  Get offset of the frame.<br>
---* return The offset of the sprite frame, in pixels.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function SpriteFrame:getOffsetInPixels() end
---@param filename string@ #string filename
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@param offset vec2_table@ #vec2_table offset
---@param originalSize size_table@ #size_table originalSize
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame ret (return value: cc.SpriteFrame)
---@overload fun(filename:string,rect:rect_table,rotated:boolean,offset:vec2_table,originalSize:size_table):cc.SpriteFrame
---@overload fun(filename:string,rect:rect_table):cc.SpriteFrame
function SpriteFrame:create(filename,rect,rotated,offset,originalSize) end
---@param pobTexture cc.Texture2D@ #cc.Texture2D pobTexture
---@param rect rect_table@ #rect_table rect
---@param rotated boolean@ #bool rotated
---@param offset vec2_table@ #vec2_table offset
---@param originalSize size_table@ #size_table originalSize
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame ret (return value: cc.SpriteFrame)
---@overload fun(pobTexture:cc.Texture2D,rect:rect_table,rotated:boolean,offset:vec2_table,originalSize:size_table):cc.SpriteFrame
---@overload fun(pobTexture:cc.Texture2D,rect:rect_table):cc.SpriteFrame
function SpriteFrame:createWithTexture(pobTexture,rect,rotated,offset,originalSize) end
---* lua NA
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame self (return value: cc.SpriteFrame)
function SpriteFrame:SpriteFrame() end


---@class cc.SpriteFrameCache :  Ref
local SpriteFrameCache={ }
---@class SpriteFrameCache : cc.SpriteFrameCache
cc.SpriteFrameCache=SpriteFrameCache


---* 
---@param plist string@ #string plist
---@return boolean@ bool#bool ret (return value: bool)
function SpriteFrameCache:reloadTexture(plist) end
---*  Adds multiple Sprite Frames from a plist file content. The texture will be associated with the created sprite frames. <br>
---* js NA<br>
---* lua addSpriteFrames<br>
---* param plist_content Plist file content string.<br>
---* param texture Texture pointer.
---@param plist_content string@ #string plist_content
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:addSpriteFramesWithFileContent(plist_content,texture) end
---*  Adds an sprite frame with a given name.<br>
---* If the name already exists, then the contents of the old name will be replaced with the new one.<br>
---* param frame A certain sprite frame.<br>
---* param frameName The name of the sprite frame.
---@param frame cc.SpriteFrame@ #cc.SpriteFrame frame
---@param frameName string@ #string frameName
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:addSpriteFrame(frame,frameName) end
---@param plist string@ #string plist
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
---@overload fun(plist:string,unkown1:string):cc.SpriteFrameCache
---@overload fun(plist:string):cc.SpriteFrameCache
---@overload fun(plist:string,texture:cc.Texture2D):cc.SpriteFrameCache
function SpriteFrameCache:addSpriteFramesWithFile(plist,texture) end
---*  Returns an Sprite Frame that was previously added.<br>
---* If the name is not found it will return nil.<br>
---* You should retain the returned copy if you are going to use it.<br>
---* js getSpriteFrame<br>
---* lua getSpriteFrame<br>
---* param name A certain sprite frame name.<br>
---* return The sprite frame.
---@param name string@ #string name
---@return cc.SpriteFrame@ SpriteFrame#SpriteFrame ret (return value: cc.SpriteFrame)
function SpriteFrameCache:getSpriteFrameByName(name) end
---*  Removes multiple Sprite Frames from a plist file.<br>
---* Sprite Frames stored in this file will be removed.<br>
---* It is convenient to call this method when a specific texture needs to be removed.<br>
---* since v0.99.5<br>
---* param plist The name of the plist that needs to removed.
---@param plist string@ #string plist
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:removeSpriteFramesFromFile(plist) end
---*  Initialize method.<br>
---* return if success return true.
---@return boolean@ bool#bool ret (return value: bool)
function SpriteFrameCache:init() end
---*  Purges the dictionary of loaded sprite frames.<br>
---* Call this method if you receive the "Memory Warning".<br>
---* In the short term: it will free some resources preventing your app from being killed.<br>
---* In the medium term: it will allocate more resources.<br>
---* In the long term: it will be the same.
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:removeSpriteFrames() end
---*  Removes unused sprite frames.<br>
---* Sprite Frames that have a retain count of 1 will be deleted.<br>
---* It is convenient to call this method after when starting a new Scene.<br>
---* js NA
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:removeUnusedSpriteFrames() end
---*  Removes multiple Sprite Frames from a plist file content.<br>
---* Sprite Frames stored in this file will be removed.<br>
---* It is convenient to call this method when a specific texture needs to be removed.<br>
---* param plist_content The string of the plist content that needs to removed.<br>
---* js NA
---@param plist_content string@ #string plist_content
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:removeSpriteFramesFromFileContent(plist_content) end
---*  Deletes an sprite frame from the sprite frame cache. <br>
---* param name The name of the sprite frame that needs to removed.
---@param name string@ #string name
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:removeSpriteFrameByName(name) end
---*  Check if multiple Sprite Frames from a plist file have been loaded.<br>
---* js NA<br>
---* lua NA<br>
---* param plist Plist file name.<br>
---* return True if the file is loaded.
---@param plist string@ #string plist
---@return boolean@ bool#bool ret (return value: bool)
function SpriteFrameCache:isSpriteFramesWithFileLoaded(plist) end
---*  Removes all Sprite Frames associated with the specified textures.<br>
---* It is convenient to call this method when a specific texture needs to be removed.<br>
---* since v0.995.<br>
---* param texture The texture that needs to removed.
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:removeSpriteFramesFromTexture(texture) end
---*  Destroys the cache. It releases all the Sprite Frames and the retained instance.<br>
---* js NA
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache self (return value: cc.SpriteFrameCache)
function SpriteFrameCache:destroyInstance() end
---*  Returns the shared instance of the Sprite Frame cache.<br>
---* return The instance of the Sprite Frame Cache.<br>
---* js NA
---@return cc.SpriteFrameCache@ SpriteFrameCache#SpriteFrameCache ret (return value: cc.SpriteFrameCache)
function SpriteFrameCache:getInstance() end


---@class cc.StopGrid :  ActionInstant
local StopGrid={ }
---@class StopGrid : cc.StopGrid
cc.StopGrid=StopGrid


---* brief Create a StopGrid Action.<br>
---* return Return a pointer of StopGrid. When the creation failed, return nil.
---@return cc.StopGrid@ StopGrid#StopGrid ret (return value: cc.StopGrid)
function StopGrid:create() end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.StopGrid@ StopGrid#StopGrid self (return value: cc.StopGrid)
function StopGrid:startWithTarget(target) end
---* 
---@return cc.StopGrid@ StopGrid#StopGrid ret (return value: cc.StopGrid)
function StopGrid:clone() end
---* 
---@return cc.StopGrid@ StopGrid#StopGrid ret (return value: cc.StopGrid)
function StopGrid:reverse() end
---* 
---@return cc.StopGrid@ StopGrid#StopGrid self (return value: cc.StopGrid)
function StopGrid:StopGrid() end


---@class ccui.TabControl :  Widget
local TabControl={ }
---@class TabControl : ccui.TabControl
ccui.TabControl=TabControl


---* set header width, affect all tab<br>
---* param headerWidth each tab header's width
---@param headerWidth float@ #float headerWidth
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:setHeaderWidth(headerWidth) end
---* remove the tab from this TabControl<br>
---* param index The index of tab
---@param index int@ #int index
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:removeTab(index) end
---* get the count of tabs in this TabControl<br>
---* return the count of tabs
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function TabControl:getTabCount() end
---* 
---@return int@ int#int ret (return value: int)
function TabControl:getHeaderDockPlace() end
---* get current selected tab's index<br>
---* return the current selected tab index
---@return int@ int#int ret (return value: int)
function TabControl:getSelectedTabIndex() end
---* insert tab, and init the position of header and container<br>
---* param index The index tab should be<br>
---* param header The header Button, will be a protected child in TabControl<br>
---* param container The container, will be a protected child in TabControl
---@param index int@ #int index
---@param header ccui.TabHeader@ #ccui.TabHeader header
---@param container ccui.Layout@ #ccui.Layout container
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:insertTab(index,header,container) end
---* ignore the textures' size in header, scale them with _headerWidth and _headerHeight<br>
---* param ignore is `true`, the header's texture scale with _headerWidth and _headerHeight<br>
---* ignore is `false`, use the texture's size, do not scale them
---@param ignore boolean@ #bool ignore
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:ignoreHeadersTextureSize(ignore) end
---* get tab header's width<br>
---* return header's width
---@return float@ float#float ret (return value: float)
function TabControl:getHeaderWidth() end
---* the header dock place of header in TabControl<br>
---* param dockPlace The strip place
---@param dockPlace int@ #int dockPlace
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:setHeaderDockPlace(dockPlace) end
---@param index int@ #int index
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
---@overload fun(unkown0:ccui.TabHeader):ccui.TabControl
---@overload fun(index:int):ccui.TabControl
function TabControl:setSelectTab(index) end
---* get TabHeader<br>
---* param index The index of tab
---@param index int@ #int index
---@return ccui.TabHeader@ TabHeader#TabHeader ret (return value: ccui.TabHeader)
function TabControl:getTabHeader(index) end
---* get whether ignore the textures' size in header, scale them with _headerWidth and _headerHeight<br>
---* return whether ignore the textures' size in header
---@return boolean@ bool#bool ret (return value: bool)
function TabControl:isIgnoreHeadersTextureSize() end
---* Add a callback function which would be called when selected tab changed<br>
---* param callback A std::function with type @see `ccTabControlCallback`
---@param callback function@ #function callback
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:setTabChangedEventListener(callback) end
---* set the delta zoom of selected tab<br>
---* param zoom The delta zoom
---@param zoom float@ #float zoom
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:setHeaderSelectedZoom(zoom) end
---* set header height, affect all tab<br>
---* param headerHeight each tab header's height
---@param headerHeight float@ #float headerHeight
---@return ccui.TabControl@ TabControl#TabControl self (return value: ccui.TabControl)
function TabControl:setHeaderHeight(headerHeight) end
---* get the index of tabCell in TabView, return -1 if not exists in.<br>
---* return the index of tabCell in TabView, `-1` means not exists in.
---@param tabCell ccui.TabHeader@ #ccui.TabHeader tabCell
---@return int@ int#int ret (return value: int)
function TabControl:indexOfTabHeader(tabCell) end
---* get Container<br>
---* param index The index of tab
---@param index int@ #int index
---@return ccui.Layout@ Layout#Layout ret (return value: ccui.Layout)
function TabControl:getTabContainer(index) end
---* get the delta zoom of selected tab<br>
---* return zoom, the delta zoom
---@return float@ float#float ret (return value: float)
function TabControl:getHeaderSelectedZoom() end
---* get tab header's height<br>
---* return header's height
---@return int@ int#int ret (return value: int)
function TabControl:getHeaderHeight() end
---* 
---@return ccui.TabControl@ TabControl#TabControl ret (return value: ccui.TabControl)
function TabControl:create() end


---@class ccui.TabHeader :  AbstractCheckButton
local TabHeader={ }
---@class TabHeader : ccui.TabHeader
ccui.TabHeader=TabHeader


---* get the index this header in the TabControl<br>
---* return -1 means not in any TabControl
---@return int@ int#int ret (return value: int)
function TabHeader:getIndexInTabControl() end
---* get the TabHeader text<br>
---* return he TabHeader text
---@return string@ string#string ret (return value: string)
function TabHeader:getTitleText() end
---* Change the font size of TabHeader text<br>
---* param size TabHeader text's font size in float.
---@param size float@ #float size
---@return ccui.TabHeader@ TabHeader#TabHeader self (return value: ccui.TabHeader)
function TabHeader:setTitleFontSize(size) end
---* Change the font name of TabHeader text<br>
---* param fontName a font name string.
---@param fontName string@ #string fontName
---@return ccui.TabHeader@ TabHeader#TabHeader self (return value: ccui.TabHeader)
function TabHeader:setTitleFontName(fontName) end
---* get the font size of TabHeader text<br>
---* return TabHeader text's font size in float.
---@return float@ float#float ret (return value: float)
function TabHeader:getTitleFontSize() end
---* get the font name of TabHeader text<br>
---* return font name in std::string
---@return string@ string#string ret (return value: string)
function TabHeader:getTitleFontName() end
---* get the TabHeader text color.<br>
---* return Color4B of TabHeader text.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function TabHeader:getTitleColor() end
---* Return the inner Label renderer of TabHeader.<br>
---* return The TabHeader Label.
---@return cc.Label@ Label#Label ret (return value: cc.Label)
function TabHeader:getTitleRenderer() end
---* Change the content of Header's text.<br>
---* param text The Header's text.
---@param text string@ #string text
---@return ccui.TabHeader@ TabHeader#TabHeader self (return value: ccui.TabHeader)
function TabHeader:setTitleText(text) end
---* Change the color of he TabHeader text<br>
---* param color The he TabHeader text's color in Color4B.
---@param color color4b_table@ #color4b_table color
---@return ccui.TabHeader@ TabHeader#TabHeader self (return value: ccui.TabHeader)
function TabHeader:setTitleColor(color) end
---@param titleStr string@ #string titleStr
---@param backGround string@ #string backGround
---@param backGroundSelected string@ #string backGroundSelected
---@param cross string@ #string cross
---@param backGroundDisabled string@ #string backGroundDisabled
---@param frontCrossDisabled string@ #string frontCrossDisabled
---@param texType int@ #int texType
---@return ccui.TabHeader@ TabHeader#TabHeader ret (return value: ccui.TabHeader)
---@overload fun(titleStr:string,backGround:string,backGroundSelected:string,unkown3:int):ccui.TabHeader
---@overload fun():ccui.TabHeader
---@overload fun(titleStr:string,backGround:string,backGroundSelected:string,cross:string,backGroundDisabled:string,frontCrossDisabled:string,texType:int):ccui.TabHeader
function TabHeader:create(titleStr,backGround,backGroundSelected,cross,backGroundDisabled,frontCrossDisabled,texType) end


---@class cc.TableView :  ScrollView@ScrollViewDelegate
local TableView={ }
---@class TableView : cc.TableView
cc.TableView=TableView


---* Updates the content of the cell at a given index.<br>
---* param idx index to find a cell
---@param idx int@ #int idx
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:updateCellAtIndex(idx) end
---* determines how cell is ordered and filled in the view.
---@param order int@ #int order
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:setVerticalFillOrder(order) end
---* 
---@param view cc.ScrollView@ #cc.ScrollView view
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:scrollViewDidZoom(view) end
---* 
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:_updateContentSize() end
---* 
---@return int@ int#int ret (return value: int)
function TableView:getVerticalFillOrder() end
---* Removes a cell at a given index<br>
---* param idx index to find a cell
---@param idx int@ #int idx
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:removeCellAtIndex(idx) end
---* 
---@param size size_table@ #size_table size
---@param container cc.Node@ #cc.Node container
---@return boolean@ bool#bool ret (return value: bool)
function TableView:initWithViewSize(size,container) end
---* 
---@param view cc.ScrollView@ #cc.ScrollView view
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:scrollViewDidScroll(view) end
---* reloads data from data source.  the view will be refreshed.
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:reloadData() end
---* Inserts a new cell at a given index<br>
---* param idx location to insert
---@param idx int@ #int idx
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:insertCellAtIndex(idx) end
---* Returns an existing cell at a given index. Returns nil if a cell is nonexistent at the moment of query.<br>
---* param idx index<br>
---* return a cell at a given index
---@param idx int@ #int idx
---@return cc.TableViewCell@ TableViewCell#TableViewCell ret (return value: cc.TableViewCell)
function TableView:cellAtIndex(idx) end
---* Dequeues a free cell if available. nil if not.<br>
---* return free cell
---@return cc.TableViewCell@ TableViewCell#TableViewCell ret (return value: cc.TableViewCell)
function TableView:dequeueCell() end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:onTouchMoved(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:onTouchEnded(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:onTouchCancelled(pTouch,pEvent) end
---* 
---@param pTouch cc.Touch@ #cc.Touch pTouch
---@param pEvent cc.Event@ #cc.Event pEvent
---@return boolean@ bool#bool ret (return value: bool)
function TableView:onTouchBegan(pTouch,pEvent) end
---* js ctor<br>
---* lua new
---@return cc.TableView@ TableView#TableView self (return value: cc.TableView)
function TableView:TableView() end


---@class cc.TableViewCell :  Node
local TableViewCell={ }
---@class TableViewCell : cc.TableViewCell
cc.TableViewCell=TableViewCell


---* Cleans up any resources linked to this cell and resets <code>idx</code> property.
---@return cc.TableViewCell@ TableViewCell#TableViewCell self (return value: cc.TableViewCell)
function TableViewCell:reset() end
---* The index used internally by SWTableView and its subclasses
---@return int@ int#int ret (return value: int)
function TableViewCell:getIdx() end
---* 
---@param uIdx int@ #int uIdx
---@return cc.TableViewCell@ TableViewCell#TableViewCell self (return value: cc.TableViewCell)
function TableViewCell:setIdx(uIdx) end
---* 
---@return cc.TableViewCell@ TableViewCell#TableViewCell ret (return value: cc.TableViewCell)
function TableViewCell:create() end
---* 
---@return cc.TableViewCell@ TableViewCell#TableViewCell self (return value: cc.TableViewCell)
function TableViewCell:TableViewCell() end


---@class cc.TargetedAction :  ActionInterval
local TargetedAction={ }
---@class TargetedAction : cc.TargetedAction
cc.TargetedAction=TargetedAction


---@return cc.Node@ Node#Node ret (return value: cc.Node)
---@overload fun():cc.Node
---@overload fun():cc.Node
function TargetedAction:getForcedTarget() end
---*  Init an action with the specified action and forced target 
---@param target cc.Node@ #cc.Node target
---@param action cc.FiniteTimeAction@ #cc.FiniteTimeAction action
---@return boolean@ bool#bool ret (return value: bool)
function TargetedAction:initWithTarget(target,action) end
---*  Sets the target that the action will be forced to run with.<br>
---* param forcedTarget The target that the action will be forced to run with.
---@param forcedTarget cc.Node@ #cc.Node forcedTarget
---@return cc.TargetedAction@ TargetedAction#TargetedAction self (return value: cc.TargetedAction)
function TargetedAction:setForcedTarget(forcedTarget) end
---*  Create an action with the specified action and forced target.<br>
---* param target The target needs to override.<br>
---* param action The action needs to override.<br>
---* return An autoreleased TargetedAction object.
---@param target cc.Node@ #cc.Node target
---@param action cc.FiniteTimeAction@ #cc.FiniteTimeAction action
---@return cc.TargetedAction@ TargetedAction#TargetedAction ret (return value: cc.TargetedAction)
function TargetedAction:create(target,action) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.TargetedAction@ TargetedAction#TargetedAction self (return value: cc.TargetedAction)
function TargetedAction:startWithTarget(target) end
---* 
---@return cc.TargetedAction@ TargetedAction#TargetedAction ret (return value: cc.TargetedAction)
function TargetedAction:clone() end
---* 
---@return cc.TargetedAction@ TargetedAction#TargetedAction self (return value: cc.TargetedAction)
function TargetedAction:stop() end
---* 
---@return cc.TargetedAction@ TargetedAction#TargetedAction ret (return value: cc.TargetedAction)
function TargetedAction:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.TargetedAction@ TargetedAction#TargetedAction self (return value: cc.TargetedAction)
function TargetedAction:update(time) end
---* 
---@return cc.TargetedAction@ TargetedAction#TargetedAction self (return value: cc.TargetedAction)
function TargetedAction:TargetedAction() end


---@class cc.Technique :  RenderState
local Technique={ }
---@class Technique : cc.Technique
cc.Technique=Technique


---*  Returns the number of Passes in the Technique 
---@return int@ int#int ret (return value: int)
function Technique:getPassCount() end
---*  Returns a new clone of the Technique 
---@return cc.Technique@ Technique#Technique ret (return value: cc.Technique)
function Technique:clone() end
---*  Adds a new pass to the Technique.<br>
---* Order matters. First added, first rendered
---@param pass cc.Pass@ #cc.Pass pass
---@return cc.Technique@ Technique#Technique self (return value: cc.Technique)
function Technique:addPass(pass) end
---*  Returns the list of passes 
---@return array_table@ array_table#array_table ret (return value: array_table)
function Technique:getPasses() end
---*  Returns the name of the Technique 
---@return string@ string#string ret (return value: string)
function Technique:getName() end
---*  Returns the Pass at given index 
---@param index int@ #int index
---@return cc.Pass@ Pass#Pass ret (return value: cc.Pass)
function Technique:getPassByIndex(index) end
---* 
---@param parent cc.Material@ #cc.Material parent
---@return cc.Technique@ Technique#Technique ret (return value: cc.Technique)
function Technique:create(parent) end
---*  Creates a new Technique with a GLProgramState.<br>
---* Method added to support legacy code
---@param parent cc.Material@ #cc.Material parent
---@param state cc.GLProgramState@ #cc.GLProgramState state
---@return cc.Technique@ Technique#Technique ret (return value: cc.Technique)
function Technique:createWithGLProgramState(parent,state) end


---@class cc.Terrain :  Node
local Terrain={ }
---@class Terrain : cc.Terrain
cc.Terrain=Terrain


---* initialize heightMap data 
---@param heightMap string@ #string heightMap
---@return boolean@ bool#bool ret (return value: bool)
function Terrain:initHeightMap(heightMap) end
---* set the MaxDetailAmount.
---@param maxValue int@ #int maxValue
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setMaxDetailMapAmount(maxValue) end
---* show the wireline instead of the surface,Debug Use only.<br>
---* Note only support desktop platform
---@param boolValue boolean@ #bool boolValue
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setDrawWire(boolValue) end
---* get the terrain's height data
---@return array_table@ array_table#array_table ret (return value: array_table)
function Terrain:getHeightData() end
---* set the Detail Map 
---@param index unsigned_int@ #unsigned int index
---@param detailMap cc.Terrain.DetailMap@ #cc.Terrain::DetailMap detailMap
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setDetailMap(index,detailMap) end
---* reset the heightmap data.
---@param heightMap string@ #string heightMap
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:resetHeightMap(heightMap) end
---* set directional light for the terrain<br>
---* param lightDir The direction of directional light, Note that lightDir is in the terrain's local space. Most of the time terrain is placed at (0,0,0) and without rotation, so lightDir is also in the world space.
---@param lightDir vec3_table@ #vec3_table lightDir
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setLightDir(lightDir) end
---*  set the alpha map
---@param newAlphaMapTexture cc.Texture2D@ #cc.Texture2D newAlphaMapTexture
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setAlphaMap(newAlphaMapTexture) end
---* set the skirt height ratio
---@param ratio float@ #float ratio
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setSkirtHeightRatio(ratio) end
---* Convert a world Space position (X,Z) to terrain space position (X,Z)
---@param worldSpace vec2_table@ #vec2_table worldSpace
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Terrain:convertToTerrainSpace(worldSpace) end
---* initialize alphaMap ,detailMaps textures
---@return boolean@ bool#bool ret (return value: bool)
function Terrain:initTextures() end
---* initialize all Properties which terrain need 
---@return boolean@ bool#bool ret (return value: bool)
function Terrain:initProperties() end
---* 
---@param parameter cc.Terrain.TerrainData@ #cc.Terrain::TerrainData parameter
---@param fixedType int@ #int fixedType
---@return boolean@ bool#bool ret (return value: bool)
function Terrain:initWithTerrainData(parameter,fixedType) end
---* Set threshold distance of each LOD level,must equal or greater than the chunk size<br>
---* Note when invoke initHeightMap, the LOD distance will be automatic calculated.
---@param lod1 float@ #float lod1
---@param lod2 float@ #float lod2
---@param lod3 float@ #float lod3
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setLODDistance(lod1,lod2,lod3) end
---* get the terrain's size
---@return size_table@ size_table#size_table ret (return value: size_table)
function Terrain:getTerrainSize() end
---* get the normal of the specified position in terrain<br>
---* return the normal vector of the specified position of the terrain.<br>
---* note the fast normal calculation may not get precise normal vector.
---@param pixelX int@ #int pixelX
---@param pixelY int@ #int pixelY
---@return vec3_table@ vec3_table#vec3_table ret (return value: vec3_table)
function Terrain:getNormal(pixelX,pixelY) end
---* 
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:reload() end
---* get height from the raw height filed
---@param pixelX int@ #int pixelX
---@param pixelY int@ #int pixelY
---@return float@ float#float ret (return value: float)
function Terrain:getImageHeight(pixelX,pixelY) end
---*  set light map texture 
---@param fileName string@ #string fileName
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setLightMap(fileName) end
---* Switch frustum Culling Flag<br>
---* Note frustum culling will remarkable improve your terrain rendering performance. 
---@param boolValue boolean@ #bool boolValue
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:setIsEnableFrustumCull(boolValue) end
---* get the terrain's minimal height.
---@return float@ float#float ret (return value: float)
function Terrain:getMinHeight() end
---* get the terrain's maximal height.
---@return float@ float#float ret (return value: float)
function Terrain:getMaxHeight() end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:draw(renderer,transform,flags) end
---* 
---@return cc.Terrain@ Terrain#Terrain self (return value: cc.Terrain)
function Terrain:Terrain() end


---@class ccui.Text :  Widget@BlendProtocol
local Text={ }
---@class Text : ccui.Text
ccui.Text=Text


---* Enable shadow for the label.<br>
---* todo support blur for shadow effect<br>
---* param shadowColor The color of shadow effect.<br>
---* param offset The offset of shadow effect.<br>
---* param blurRadius The blur radius of shadow effect.
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:enableShadow() end
---* Gets the font size of label.<br>
---* return The font size.
---@return float@ float#float ret (return value: float)
function Text:getFontSize() end
---* 
---@return string@ string#string ret (return value: string)
function Text:getString() end
---@param effect int@ #int effect
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
---@overload fun(effect:int):ccui.Text
---@overload fun():ccui.Text
function Text:disableEffect(effect) end
---* Return current effect type.
---@return int@ int#int ret (return value: int)
function Text:getLabelEffectType() end
---*  Gets text color.<br>
---* return Text color.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function Text:getTextColor() end
---* Returns the blending function that is currently being used.<br>
---* return A BlendFunc structure with source and destination factor which specified pixel arithmetic.<br>
---* js NA<br>
---* lua NA
---@return cc.BlendFunc@ BlendFunc#BlendFunc ret (return value: cc.BlendFunc)
function Text:getBlendFunc() end
---*  Sets text vertical alignment.<br>
---* param alignment vertical text alignment type
---@param alignment int@ #int alignment
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setTextVerticalAlignment(alignment) end
---* Sets the font name of label.<br>
---* If you are trying to use a system font, you could just pass a font name<br>
---* If you are trying to use a TTF, you should pass a file path to the TTF file<br>
---* Usage:<br>
---* code<br>
---* create a system font UIText<br>
---* Text *text = Text::create("Hello", "Arial", 20);<br>
---* it will change the font to system font no matter the previous font type is TTF or system font<br>
---* text->setFontName("Marfelt");<br>
---* it will change the font to TTF font no matter the previous font type is TTF or system font<br>
---* text->setFontName("xxxx/xxx.ttf");<br>
---* endcode<br>
---* param name Font name.
---@param name string@ #string name
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setFontName(name) end
---* Sets the touch scale enabled of label.<br>
---* param enabled Touch scale enabled of label.
---@param enabled boolean@ #bool enabled
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setTouchScaleChangeEnabled(enabled) end
---* Return shadow effect offset value.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Text:getShadowOffset() end
---* 
---@param text string@ #string text
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setString(text) end
---* Return the outline effect size value.
---@return int@ int#int ret (return value: int)
function Text:getOutlineSize() end
---* 
---@param textContent string@ #string textContent
---@param fontName string@ #string fontName
---@param fontSize float@ #float fontSize
---@return boolean@ bool#bool ret (return value: bool)
function Text:init(textContent,fontName,fontSize) end
---* Return the shadow effect blur radius.
---@return float@ float#float ret (return value: float)
function Text:getShadowBlurRadius() end
---* Gets the touch scale enabled of label.<br>
---* return  Touch scale enabled of label.
---@return boolean@ bool#bool ret (return value: bool)
function Text:isTouchScaleChangeEnabled() end
---*  Gets the font name.<br>
---* return Font name.
---@return string@ string#string ret (return value: string)
function Text:getFontName() end
---* Sets the rendering size of the text, you should call this method<br>
---* along with calling `ignoreContentAdaptWithSize(false)`, otherwise the text area<br>
---* size is calculated by the real size of the text content.<br>
---* param size The text rendering area size.
---@param size size_table@ #size_table size
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setTextAreaSize(size) end
---* Gets the string length of the label.<br>
---* Note: This length will be larger than the raw string length,<br>
---* if you want to get the raw string length,<br>
---* you should call this->getString().size() instead.<br>
---* return  String length.
---@return int@ int#int ret (return value: int)
function Text:getStringLength() end
---*  Gets the render size in auto mode.<br>
---* return The size of render size in auto mode.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Text:getAutoRenderSize() end
---* Enable outline for the label.<br>
---* It only works on IOS and Android when you use System fonts.<br>
---* param outlineColor The color of outline.<br>
---* param outlineSize The size of outline.
---@param outlineColor color4b_table@ #color4b_table outlineColor
---@param outlineSize int@ #int outlineSize
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:enableOutline(outlineColor,outlineSize) end
---* Return current effect color value.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function Text:getEffectColor() end
---*  Gets the font type.<br>
---* return The font type.
---@return int@ int#int ret (return value: int)
function Text:getType() end
---*  Gets text horizontal alignment.<br>
---* return Horizontal text alignment type
---@return int@ int#int ret (return value: int)
function Text:getTextHorizontalAlignment() end
---* Return whether the shadow effect is enabled.
---@return boolean@ bool#bool ret (return value: bool)
function Text:isShadowEnabled() end
---* Sets the font size of label.<br>
---* param size The font size.
---@param size float@ #float size
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setFontSize(size) end
---* Return the shadow effect color value.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function Text:getShadowColor() end
---*  Sets text color.<br>
---* param color Text color.
---@param color color4b_table@ #color4b_table color
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setTextColor(color) end
---*  Only support for TTF.<br>
---* param glowColor The color of glow.
---@param glowColor color4b_table@ #color4b_table glowColor
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:enableGlow(glowColor) end
---* Provides a way to treat each character like a Sprite.<br>
---* warning No support system font.
---@param lettetIndex int@ #int lettetIndex
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function Text:getLetter(lettetIndex) end
---* Sets the source blending function.<br>
---* param blendFunc A structure with source and destination factor to specify pixel arithmetic. e.g. {GL_ONE, GL_ONE}, {GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA}.<br>
---* js NA<br>
---* lua NA
---@param blendFunc cc.BlendFunc@ #cc.BlendFunc blendFunc
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setBlendFunc(blendFunc) end
---*  Gets text vertical alignment.<br>
---* return Vertical text alignment type
---@return int@ int#int ret (return value: int)
function Text:getTextVerticalAlignment() end
---*  Return the text rendering area size.<br>
---* return The text rendering area size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Text:getTextAreaSize() end
---*  Sets text horizontal alignment.<br>
---* param alignment Horizontal text alignment type
---@param alignment int@ #int alignment
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:setTextHorizontalAlignment(alignment) end
---@param textContent string@ #string textContent
---@param fontName string@ #string fontName
---@param fontSize float@ #float fontSize
---@return ccui.Text@ Text#Text ret (return value: ccui.Text)
---@overload fun(textContent:string,fontName:string,fontSize:float):ccui.Text
---@overload fun():ccui.Text
function Text:create(textContent,fontName,fontSize) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function Text:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Text:getVirtualRenderer() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Text:init() end
---* Returns the "class name" of widget.
---@return string@ string#string ret (return value: string)
function Text:getDescription() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Text:getVirtualRendererSize() end
---* Default constructor.<br>
---* js ctor<br>
---* lua new
---@return ccui.Text@ Text#Text self (return value: ccui.Text)
function Text:Text() end


---@class ccui.TextAtlas :  Widget
local TextAtlas={ }
---@class TextAtlas : ccui.TextAtlas
ccui.TextAtlas=TextAtlas


---* Gets the string length of the label.<br>
---* Note: This length will be larger than the raw string length,<br>
---* if you want to get the raw string length, you should call this->getString().size() instead<br>
---* return  string length.
---@return int@ int#int ret (return value: int)
function TextAtlas:getStringLength() end
---* 
---@return string@ string#string ret (return value: string)
function TextAtlas:getString() end
---* 
---@param value string@ #string value
---@return ccui.TextAtlas@ TextAtlas#TextAtlas self (return value: ccui.TextAtlas)
function TextAtlas:setString(value) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function TextAtlas:getRenderFile() end
---*  Initializes the LabelAtlas with a string, a char map file(the atlas), the width and height of each element and the starting char of the atlas.<br>
---* param stringValue A given string needs to be displayed.<br>
---* param charMapFile A given char map file name.<br>
---* param itemWidth The element width.<br>
---* param itemHeight The element height.<br>
---* param startCharMap The starting char of the atlas.
---@param stringValue string@ #string stringValue
---@param charMapFile string@ #string charMapFile
---@param itemWidth int@ #int itemWidth
---@param itemHeight int@ #int itemHeight
---@param startCharMap string@ #string startCharMap
---@return ccui.TextAtlas@ TextAtlas#TextAtlas self (return value: ccui.TextAtlas)
function TextAtlas:setProperty(stringValue,charMapFile,itemWidth,itemHeight,startCharMap) end
---* js NA
---@return ccui.TextAtlas@ TextAtlas#TextAtlas self (return value: ccui.TextAtlas)
function TextAtlas:adaptRenderers() end
---@param stringValue string@ #string stringValue
---@param charMapFile string@ #string charMapFile
---@param itemWidth int@ #int itemWidth
---@param itemHeight int@ #int itemHeight
---@param startCharMap string@ #string startCharMap
---@return ccui.TextAtlas@ TextAtlas#TextAtlas ret (return value: ccui.TextAtlas)
---@overload fun(stringValue:string,charMapFile:string,itemWidth:int,itemHeight:int,startCharMap:string):ccui.TextAtlas
---@overload fun():ccui.TextAtlas
function TextAtlas:create(stringValue,charMapFile,itemWidth,itemHeight,startCharMap) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function TextAtlas:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function TextAtlas:getVirtualRenderer() end
---* Returns the "class name" of widget.
---@return string@ string#string ret (return value: string)
function TextAtlas:getDescription() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function TextAtlas:getVirtualRendererSize() end
---* Default constructor.<br>
---* lua new
---@return ccui.TextAtlas@ TextAtlas#TextAtlas self (return value: ccui.TextAtlas)
function TextAtlas:TextAtlas() end


---@class ccui.TextBMFont :  Widget
local TextBMFont={ }
---@class TextBMFont : ccui.TextBMFont
ccui.TextBMFont=TextBMFont


---* Gets the string length of the label.<br>
---* Note: This length will be larger than the raw string length,<br>
---* if you want to get the raw string length, you should call this->getString().size() instead<br>
---* return  string length.
---@return int@ int#int ret (return value: int)
function TextBMFont:getStringLength() end
---* 
---@return string@ string#string ret (return value: string)
function TextBMFont:getString() end
---* 
---@param value string@ #string value
---@return ccui.TextBMFont@ TextBMFont#TextBMFont self (return value: ccui.TextBMFont)
function TextBMFont:setString(value) end
---* 
---@return cc.ResourceData@ ResourceData#ResourceData ret (return value: cc.ResourceData)
function TextBMFont:getRenderFile() end
---*  init a bitmap font atlas with an initial string and the FNT file 
---@param fileName string@ #string fileName
---@return ccui.TextBMFont@ TextBMFont#TextBMFont self (return value: ccui.TextBMFont)
function TextBMFont:setFntFile(fileName) end
---* reset TextBMFont inner label
---@return ccui.TextBMFont@ TextBMFont#TextBMFont self (return value: ccui.TextBMFont)
function TextBMFont:resetRender() end
---@param text string@ #string text
---@param filename string@ #string filename
---@return ccui.TextBMFont@ TextBMFont#TextBMFont ret (return value: ccui.TextBMFont)
---@overload fun(text:string,filename:string):ccui.TextBMFont
---@overload fun():ccui.TextBMFont
function TextBMFont:create(text,filename) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function TextBMFont:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function TextBMFont:getVirtualRenderer() end
---* Returns the "class name" of widget.
---@return string@ string#string ret (return value: string)
function TextBMFont:getDescription() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function TextBMFont:getVirtualRendererSize() end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.TextBMFont@ TextBMFont#TextBMFont self (return value: ccui.TextBMFont)
function TextBMFont:TextBMFont() end


---@class ccui.TextField :  Widget
local TextField={ }
---@class TextField : ccui.TextField
ccui.TextField=TextField


---* brief Toggle attach with IME.<br>
---* param attach True if attach with IME, false otherwise.
---@param attach boolean@ #bool attach
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setAttachWithIME(attach) end
---* brief Query the font size.<br>
---* return The integer font size.
---@return int@ int#int ret (return value: int)
function TextField:getFontSize() end
---* Query the content of TextField.<br>
---* return The string value of TextField.
---@return string@ string#string ret (return value: string)
function TextField:getString() end
---* brief Change password style text.<br>
---* param styleText The styleText for password mask, the default value is "*".
---@param styleText char@ #char styleText
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setPasswordStyleText(styleText) end
---* brief Whether it is ready to delete backward in TextField.<br>
---* return True is the delete backward is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function TextField:getDeleteBackward() end
---* brief Query the text string color.<br>
---* return The color of the text.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function TextField:getTextColor() end
---* brief Get the placeholder of TextField.<br>
---* return A placeholder string.
---@return string@ string#string ret (return value: string)
function TextField:getPlaceHolder() end
---* brief Query whether the IME is attached or not.<br>
---* return True if IME is attached, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function TextField:getAttachWithIME() end
---* brief Change the font name of TextField.<br>
---* param name The font name string.
---@param name string@ #string name
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setFontName(name) end
---* brief Whether it is ready to get the inserted text or not.<br>
---* return True if the insert text is ready, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function TextField:getInsertText() end
---* brief Toggle enable insert text mode<br>
---* param insertText True if enable insert text, false otherwise.
---@param insertText boolean@ #bool insertText
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setInsertText(insertText) end
---* Change content of TextField.<br>
---* param text A string content.
---@param text string@ #string text
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setString(text) end
---* brief Query whether IME is detached or not.<br>
---* return True if IME is detached, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function TextField:getDetachWithIME() end
---* brief Change the vertical text alignment.<br>
---* param alignment A alignment arguments in @see `TextVAlignment`.
---@param alignment int@ #int alignment
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setTextVerticalAlignment(alignment) end
---* Add a event listener to TextField, when some predefined event happens, the callback will be called.<br>
---* param callback A callback function with type of `ccTextFieldCallback`.
---@param callback function@ #function callback
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:addEventListener(callback) end
---* brief Detach the IME.
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:didNotSelectSelf() end
---* brief Query the TextField's font name.<br>
---* return The font name string.
---@return string@ string#string ret (return value: string)
function TextField:getFontName() end
---* brief Change the text area size.<br>
---* param size A delimitation zone.
---@param size size_table@ #size_table size
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setTextAreaSize(size) end
---* brief Attach the IME for inputing.
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:attachWithIME() end
---* brief Query the input string length.<br>
---* return A integer length value.
---@return int@ int#int ret (return value: int)
function TextField:getStringLength() end
---* brief Get the renderer size in auto mode.<br>
---* return A delimitation zone.
---@return size_table@ size_table#size_table ret (return value: size_table)
function TextField:getAutoRenderSize() end
---* brief Toggle enable password input mode.<br>
---* param enable True if enable password input mode, false otherwise.
---@param enable boolean@ #bool enable
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setPasswordEnabled(enable) end
---* brief Query the placeholder string color.<br>
---* return The color of placeholder.
---@return color4b_table@ color4b_table#color4b_table ret (return value: color4b_table)
function TextField:getPlaceHolderColor() end
---* brief Query the password style text.<br>
---* return A password style text.
---@return char@ char#char ret (return value: char)
function TextField:getPasswordStyleText() end
---* brief Toggle maximize length enable<br>
---* param enable True if enable maximize length, false otherwise.
---@param enable boolean@ #bool enable
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setMaxLengthEnabled(enable) end
---* brief Query whether password is enabled or not.<br>
---* return True if password is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function TextField:isPasswordEnabled() end
---* brief Toggle enable delete backward mode.<br>
---* param deleteBackward True is delete backward is enabled, false otherwise.
---@param deleteBackward boolean@ #bool deleteBackward
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setDeleteBackward(deleteBackward) end
---* Set cursor position, if enabled<br>
---* js NA
---@param cursorPosition unsigned_int@ #unsigned int cursorPosition
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setCursorPosition(cursorPosition) end
---* brief Inquire the horizontal alignment<br>
---* return The horizontal alignment
---@return int@ int#int ret (return value: int)
function TextField:getTextHorizontalAlignment() end
---* brief Change font size of TextField.<br>
---* param size The integer font size.
---@param size int@ #int size
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setFontSize(size) end
---* brief Set placeholder of TextField.<br>
---* param value The string value of placeholder.
---@param value string@ #string value
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setPlaceHolder(value) end
---* Set cursor position to hit letter, if enabled<br>
---* js NA
---@param point vec2_table@ #vec2_table point
---@param camera cc.Camera@ #cc.Camera camera
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setCursorFromPoint(point,camera) end
---@param color color3b_table@ #color3b_table color
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
---@overload fun(unkown0:color4b_table):ccui.TextField
---@overload fun(color:color3b_table):ccui.TextField
function TextField:setPlaceHolderColor(color) end
---* brief Change horizontal text alignment.<br>
---* param alignment A alignment arguments in @see `TextHAlignment`.
---@param alignment int@ #int alignment
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setTextHorizontalAlignment(alignment) end
---* brief Change the text color.<br>
---* param textColor The color value in `Color4B`.
---@param textColor color4b_table@ #color4b_table textColor
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setTextColor(textColor) end
---* Set char showing cursor.<br>
---* js NA
---@param cursor char@ #char cursor
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setCursorChar(cursor) end
---* brief Query maximize input length of TextField.<br>
---* return The integer value of maximize input length.
---@return int@ int#int ret (return value: int)
function TextField:getMaxLength() end
---* brief Query whether max length is enabled or not.<br>
---* return True if maximize length is enabled, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function TextField:isMaxLengthEnabled() end
---* brief Toggle detach with IME.<br>
---* param detach True if detach with IME, false otherwise.
---@param detach boolean@ #bool detach
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setDetachWithIME(detach) end
---* brief Inquire the horizontal alignment<br>
---* return The horizontal alignment
---@return int@ int#int ret (return value: int)
function TextField:getTextVerticalAlignment() end
---* brief Toggle enable touch area.<br>
---* param enable True if enable touch area, false otherwise.
---@param enable boolean@ #bool enable
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setTouchAreaEnabled(enable) end
---* brief Change maximize input length limitation.<br>
---* param length A character count in integer.
---@param length int@ #int length
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setMaxLength(length) end
---* Set enable cursor use.<br>
---* js NA
---@param enabled boolean@ #bool enabled
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setCursorEnabled(enabled) end
---* brief Set the touch size<br>
---* The touch size is used for @see `hitTest`.<br>
---* param size A delimitation zone.
---@param size size_table@ #size_table size
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:setTouchSize(size) end
---* brief Get current touch size of TextField.<br>
---* return The TextField's touch size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function TextField:getTouchSize() end
---@param placeholder string@ #string placeholder
---@param fontName string@ #string fontName
---@param fontSize int@ #int fontSize
---@return ccui.TextField@ TextField#TextField ret (return value: ccui.TextField)
---@overload fun(placeholder:string,fontName:string,fontSize:int):ccui.TextField
---@overload fun():ccui.TextField
function TextField:create(placeholder,fontName,fontSize) end
---* 
---@return cc.Ref@ Ref#Ref ret (return value: cc.Ref)
function TextField:createInstance() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function TextField:getVirtualRenderer() end
---* Returns the "class name" of widget.
---@return string@ string#string ret (return value: string)
function TextField:getDescription() end
---* 
---@param dt float@ #float dt
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:update(dt) end
---* 
---@param pt vec2_table@ #vec2_table pt
---@param camera cc.Camera@ #cc.Camera camera
---@param p vec3_table@ #vec3_table p
---@return boolean@ bool#bool ret (return value: bool)
function TextField:hitTest(pt,camera,p) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function TextField:init() end
---* 
---@return size_table@ size_table#size_table ret (return value: size_table)
function TextField:getVirtualRendererSize() end
---* brief Default constructor.
---@return ccui.TextField@ TextField#TextField self (return value: ccui.TextField)
function TextField:TextField() end


---@class cc.Texture2D :  Ref
local Texture2D={ }
---@class Texture2D : cc.Texture2D
cc.Texture2D=Texture2D


---*  Gets max T. 
---@return float@ float#float ret (return value: float)
function Texture2D:getMaxT() end
---* 
---@param alphaTexture cc.Texture2D@ #cc.Texture2D alphaTexture
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:setAlphaTexture(alphaTexture) end
---*  Returns the pixel format.<br>
---* since v2.0
---@return char@ char#char ret (return value: char)
function Texture2D:getStringForFormat() end
---@param image cc.Image@ #cc.Image image
---@param format int@ #int format
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(image:cc.Image,format:int):boolean
---@overload fun(image:cc.Image):boolean
function Texture2D:initWithImage(image,format) end
---*  Gets max S. 
---@return float@ float#float ret (return value: float)
function Texture2D:getMaxS() end
---*  Release only the gl texture.<br>
---* js NA<br>
---* lua NA
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:releaseGLTexture() end
---*  Whether or not the texture has their Alpha premultiplied. 
---@return boolean@ bool#bool ret (return value: bool)
function Texture2D:hasPremultipliedAlpha() end
---*  Gets the height of the texture in pixels. 
---@return int@ int#int ret (return value: int)
function Texture2D:getPixelsHigh() end
---* 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Texture2D:getAlphaTextureName() end
---@param format int@ #int format
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
---@overload fun(format:int):unsigned_int
---@overload fun():unsigned_int
function Texture2D:getBitsPerPixelForFormat(format) end
---*  Gets the texture name. 
---@return unsigned_int@ unsigned int#unsigned int ret (return value: unsigned int)
function Texture2D:getName() end
---@param text char@ #char text
---@param fontName string@ #string fontName
---@param fontSize float@ #float fontSize
---@param dimensions size_table@ #size_table dimensions
---@param hAlignment int@ #int hAlignment
---@param vAlignment int@ #int vAlignment
---@param enableWrap boolean@ #bool enableWrap
---@param overflow int@ #int overflow
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(text:char,unkown1:cc.FontDefinition):boolean
---@overload fun(text:char,fontName:string,fontSize:float,dimensions:size_table,hAlignment:int,vAlignment:int,enableWrap:boolean,overflow:int):boolean
function Texture2D:initWithString(text,fontName,fontSize,dimensions,hAlignment,vAlignment,enableWrap,overflow) end
---*  Sets max T. 
---@param maxT float@ #float maxT
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:setMaxT(maxT) end
---* 
---@return string@ string#string ret (return value: string)
function Texture2D:getPath() end
---*  Draws a texture inside a rect.
---@param rect rect_table@ #rect_table rect
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:drawInRect(rect) end
---*  Get the texture content size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Texture2D:getContentSize() end
---*  Sets alias texture parameters:<br>
---* - GL_TEXTURE_MIN_FILTER = GL_NEAREST<br>
---* - GL_TEXTURE_MAG_FILTER = GL_NEAREST<br>
---* warning Calling this method could allocate additional texture memory.<br>
---* since v0.8
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:setAliasTexParameters() end
---*  Sets antialias texture parameters:<br>
---* - GL_TEXTURE_MIN_FILTER = GL_LINEAR<br>
---* - GL_TEXTURE_MAG_FILTER = GL_LINEAR<br>
---* warning Calling this method could allocate additional texture memory.<br>
---* since v0.8
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:setAntiAliasTexParameters() end
---*  Generates mipmap images for the texture.<br>
---* It only works if the texture size is POT (power of 2).<br>
---* since v0.99.0
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:generateMipmap() end
---* 
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function Texture2D:getAlphaTexture() end
---* Get texture name, dimensions and coordinates message by a string.<br>
---* js NA<br>
---* lua NA
---@return string@ string#string ret (return value: string)
function Texture2D:getDescription() end
---*  Gets the pixel format of the texture. 
---@return int@ int#int ret (return value: int)
function Texture2D:getPixelFormat() end
---*  Set a shader program to the texture.<br>
---* It's used by drawAtPoint and drawInRect
---@param program cc.GLProgram@ #cc.GLProgram program
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:setGLProgram(program) end
---*  Get content size. 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Texture2D:getContentSizeInPixels() end
---*  Gets the width of the texture in pixels. 
---@return int@ int#int ret (return value: int)
function Texture2D:getPixelsWide() end
---* Drawing extensions to make it easy to draw basic quads using a Texture2D object.<br>
---* These functions require GL_TEXTURE_2D and both GL_VERTEX_ARRAY and GL_TEXTURE_COORD_ARRAY client states to be enabled.<br>
---* Draws a texture at a given point. 
---@param point vec2_table@ #vec2_table point
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:drawAtPoint(point) end
---*  Get a shader program from the texture.
---@return cc.GLProgram@ GLProgram#GLProgram ret (return value: cc.GLProgram)
function Texture2D:getGLProgram() end
---*  Whether or not the texture has mip maps.
---@return boolean@ bool#bool ret (return value: bool)
function Texture2D:hasMipmaps() end
---*  Sets max S. 
---@param maxS float@ #float maxS
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:setMaxS(maxS) end
---*  sets the default pixel format for UIImagescontains alpha channel.<br>
---* param format<br>
---* If the UIImage contains alpha channel, then the options are:<br>
---* - generate 32-bit textures: Texture2D::PixelFormat::RGBA8888 (default one)<br>
---* - generate 24-bit textures: Texture2D::PixelFormat::RGB888<br>
---* - generate 16-bit textures: Texture2D::PixelFormat::RGBA4444<br>
---* - generate 16-bit textures: Texture2D::PixelFormat::RGB5A1<br>
---* - generate 16-bit textures: Texture2D::PixelFormat::RGB565<br>
---* - generate 8-bit textures: Texture2D::PixelFormat::A8 (only use it if you use just 1 color)<br>
---* How does it work ?<br>
---* - If the image is an RGBA (with Alpha) then the default pixel format will be used (it can be a 8-bit, 16-bit or 32-bit texture)<br>
---* - If the image is an RGB (without Alpha) then: If the default pixel format is RGBA8888 then a RGBA8888 (32-bit) will be used. Otherwise a RGB565 (16-bit texture) will be used.<br>
---* This parameter is not valid for PVR / PVR.CCZ images.<br>
---* since v0.8
---@param format int@ #int format
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:setDefaultAlphaPixelFormat(format) end
---*  Returns the alpha pixel format.<br>
---* since v0.8
---@return int@ int#int ret (return value: int)
function Texture2D:getDefaultAlphaPixelFormat() end
---* js ctor
---@return cc.Texture2D@ Texture2D#Texture2D self (return value: cc.Texture2D)
function Texture2D:Texture2D() end


---@class cc.TextureCache :  Ref
local TextureCache={ }
---@class TextureCache : cc.TextureCache
cc.TextureCache=TextureCache


---*  Reload texture from the image file.<br>
---* If the file image hasn't loaded before, load it.<br>
---* Otherwise the texture will be reloaded from the file image.<br>
---* param fileName It's the related/absolute path of the file image.<br>
---* return True if the reloading is succeed, otherwise return false.
---@param fileName string@ #string fileName
---@return boolean@ bool#bool ret (return value: bool)
function TextureCache:reloadTexture(fileName) end
---*  Unbind all bound image asynchronous load callbacks.<br>
---* since v3.1
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:unbindAllImageAsync() end
---*  Deletes a texture from the cache given a its key name.<br>
---* param key It's the related/absolute path of the file image.<br>
---* since v0.99.4
---@param key string@ #string key
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:removeTextureForKey(key) end
---*  Purges the dictionary of loaded textures.<br>
---* Call this method if you receive the "Memory Warning".<br>
---* In the short term: it will free some resources preventing your app from being killed.<br>
---* In the medium term: it will allocate more resources.<br>
---* In the long term: it will be the same.
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:removeAllTextures() end
---* js NA<br>
---* lua NA
---@return string@ string#string ret (return value: string)
function TextureCache:getDescription() end
---*  Output to CCLOG the current contents of this TextureCache.<br>
---* This will attempt to calculate the size of each texture, and the total texture memory in use.<br>
---* since v1.0
---@return string@ string#string ret (return value: string)
function TextureCache:getCachedTextureInfo() end
---@param image cc.Image@ #cc.Image image
---@param key string@ #string key
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
---@overload fun(image:cc.Image,key:string):cc.Texture2D
---@overload fun(unkown0:string):cc.Texture2D
function TextureCache:addImage(image,key) end
---*  Unbind a specified bound image asynchronous callback.<br>
---* In the case an object who was bound to an image asynchronous callback was destroyed before the callback is invoked,<br>
---* the object always need to unbind this callback manually.<br>
---* param filename It's the related/absolute path of the file image.<br>
---* since v3.1
---@param filename string@ #string filename
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:unbindImageAsync(filename) end
---*  Returns an already created texture. Returns nil if the texture doesn't exist.<br>
---* param key It's the related/absolute path of the file image.<br>
---* since v0.99.5
---@param key string@ #string key
---@return cc.Texture2D@ Texture2D#Texture2D ret (return value: cc.Texture2D)
function TextureCache:getTextureForKey(key) end
---* Get the file path of the texture<br>
---* param texture A Texture2D object pointer.<br>
---* return The full path of the file.
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return string@ string#string ret (return value: string)
function TextureCache:getTextureFilePath(texture) end
---*  Reload texture from a new file.<br>
---* This function is mainly for editor, won't suggest use it in game for performance reason.<br>
---* param srcName Original texture file name.<br>
---* param dstName New texture file name.<br>
---* since v3.10
---@param srcName string@ #string srcName
---@param dstName string@ #string dstName
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:renameTextureWithKey(srcName,dstName) end
---*  Removes unused textures.<br>
---* Textures that have a retain count of 1 will be deleted.<br>
---* It is convenient to call this method after when starting a new Scene.<br>
---* since v0.8
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:removeUnusedTextures() end
---*  Deletes a texture from the cache given a texture.
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:removeTexture(texture) end
---* Called by director, please do not called outside.
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:waitForQuit() end
---* 
---@param suffix string@ #string suffix
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:setETC1AlphaFileSuffix(suffix) end
---* 
---@return string@ string#string ret (return value: string)
function TextureCache:getETC1AlphaFileSuffix() end
---* js ctor
---@return cc.TextureCache@ TextureCache#TextureCache self (return value: cc.TextureCache)
function TextureCache:TextureCache() end


---@class cc.TextureCube :  Texture2D
local TextureCube={ }
---@class TextureCube : cc.TextureCube
cc.TextureCube=TextureCube


---*  reload texture cube after GLESContext reconstructed.
---@return boolean@ bool#bool ret (return value: bool)
function TextureCube:reloadTexture() end
---*  Sets the min filter, mag filter, wrap s and wrap t texture parameters.<br>
---* If the texture size is NPOT (non power of 2), then in can only use GL_CLAMP_TO_EDGE in GL_TEXTURE_WRAP_{S,T}.
---@param s cc.Texture2D._TexParam@ #cc.Texture2D::_TexParams 
---@return cc.TextureCube@ TextureCube#TextureCube self (return value: cc.TextureCube)
function TextureCube:setTexParameters(s) end
---*  create cube texture from 6 textures.<br>
---* param positive_x texture for the right side of the texture cube face.<br>
---* param negative_x texture for the up side of the texture cube face.<br>
---* param positive_y texture for the top side of the texture cube face<br>
---* param negative_y texture for the bottom side of the texture cube face<br>
---* param positive_z texture for the forward side of the texture cube face.<br>
---* param negative_z texture for the rear side of the texture cube face.<br>
---* return  A new texture cube inited with given parameters.
---@param positive_x string@ #string positive_x
---@param negative_x string@ #string negative_x
---@param positive_y string@ #string positive_y
---@param negative_y string@ #string negative_y
---@param positive_z string@ #string positive_z
---@param negative_z string@ #string negative_z
---@return cc.TextureCube@ TextureCube#TextureCube ret (return value: cc.TextureCube)
function TextureCube:create(positive_x,negative_x,positive_y,negative_y,positive_z,negative_z) end
---* Constructor.
---@return cc.TextureCube@ TextureCube#TextureCube self (return value: cc.TextureCube)
function TextureCube:TextureCube() end


---@class ccs.TextureData :  Ref
local TextureData={ }
---@class TextureData : ccs.TextureData
ccs.TextureData=TextureData


---* 
---@param index int@ #int index
---@return ccs.ContourData@ ContourData#ContourData ret (return value: ccs.ContourData)
function TextureData:getContourData(index) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function TextureData:init() end
---* 
---@param contourData ccs.ContourData@ #ccs.ContourData contourData
---@return ccs.TextureData@ TextureData#TextureData self (return value: ccs.TextureData)
function TextureData:addContourData(contourData) end
---* 
---@return ccs.TextureData@ TextureData#TextureData ret (return value: ccs.TextureData)
function TextureData:create() end
---* js ctor
---@return ccs.TextureData@ TextureData#TextureData self (return value: ccs.TextureData)
function TextureData:TextureData() end


---@class ccs.TextureFrame :  Frame
local TextureFrame={ }
---@class TextureFrame : ccs.TextureFrame
ccs.TextureFrame=TextureFrame


---* 
---@return string@ string#string ret (return value: string)
function TextureFrame:getTextureName() end
---* 
---@param textureName string@ #string textureName
---@return ccs.TextureFrame@ TextureFrame#TextureFrame self (return value: ccs.TextureFrame)
function TextureFrame:setTextureName(textureName) end
---* 
---@return ccs.TextureFrame@ TextureFrame#TextureFrame ret (return value: ccs.TextureFrame)
function TextureFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function TextureFrame:clone() end
---* 
---@param node cc.Node@ #cc.Node node
---@return ccs.TextureFrame@ TextureFrame#TextureFrame self (return value: ccs.TextureFrame)
function TextureFrame:setNode(node) end
---* 
---@return ccs.TextureFrame@ TextureFrame#TextureFrame self (return value: ccs.TextureFrame)
function TextureFrame:TextureFrame() end


---@class cc.TiledGrid3D :  GridBase
local TiledGrid3D={ }
---@class TiledGrid3D : cc.TiledGrid3D
cc.TiledGrid3D=TiledGrid3D


---@param gridSize size_table@ #size_table gridSize
---@param texture cc.Texture2D@ #cc.Texture2D texture
---@param flipped boolean@ #bool flipped
---@param rect rect_table@ #rect_table rect
---@return cc.TiledGrid3D@ TiledGrid3D#TiledGrid3D ret (return value: cc.TiledGrid3D)
---@overload fun(gridSize:size_table,unkown1:rect_table):cc.TiledGrid3D
---@overload fun(gridSize:size_table):cc.TiledGrid3D
---@overload fun(gridSize:size_table,texture:cc.Texture2D,flipped:boolean):cc.TiledGrid3D
---@overload fun(gridSize:size_table,texture:cc.Texture2D,flipped:boolean,rect:rect_table):cc.TiledGrid3D
function TiledGrid3D:create(gridSize,texture,flipped,rect) end
---* 
---@return cc.TiledGrid3D@ TiledGrid3D#TiledGrid3D self (return value: cc.TiledGrid3D)
function TiledGrid3D:calculateVertexPoints() end
---* Implementations for interfaces in base class.
---@return cc.TiledGrid3D@ TiledGrid3D#TiledGrid3D self (return value: cc.TiledGrid3D)
function TiledGrid3D:blit() end
---* 
---@return cc.TiledGrid3D@ TiledGrid3D#TiledGrid3D self (return value: cc.TiledGrid3D)
function TiledGrid3D:reuse() end
---* Constructor.<br>
---* js ctor
---@return cc.TiledGrid3D@ TiledGrid3D#TiledGrid3D self (return value: cc.TiledGrid3D)
function TiledGrid3D:TiledGrid3D() end


---@class cc.TiledGrid3DAction :  GridAction
local TiledGrid3DAction={ }
---@class TiledGrid3DAction : cc.TiledGrid3DAction
cc.TiledGrid3DAction=TiledGrid3DAction


---* 
---@return cc.TiledGrid3DAction@ TiledGrid3DAction#TiledGrid3DAction ret (return value: cc.TiledGrid3DAction)
function TiledGrid3DAction:clone() end
---*  returns the grid 
---@return cc.GridBase@ GridBase#GridBase ret (return value: cc.GridBase)
function TiledGrid3DAction:getGrid() end


---@class cc.TileMapAtlas :  AtlasNode
local TileMapAtlas={ }
---@class TileMapAtlas : cc.TileMapAtlas
cc.TileMapAtlas=TileMapAtlas


---*  initializes a TileMap with a tile file (atlas) with a map file and the width and height of each tile in points.<br>
---* The file will be loaded using the TextureMgr.
---@param tile string@ #string tile
---@param mapFile string@ #string mapFile
---@param tileWidth int@ #int tileWidth
---@param tileHeight int@ #int tileHeight
---@return boolean@ bool#bool ret (return value: bool)
function TileMapAtlas:initWithTileFile(tile,mapFile,tileWidth,tileHeight) end
---*  dealloc the map from memory 
---@return cc.TileMapAtlas@ TileMapAtlas#TileMapAtlas self (return value: cc.TileMapAtlas)
function TileMapAtlas:releaseMap() end
---* Returns a tile from position x,y.<br>
---* For the moment only channel R is used
---@param position vec2_table@ #vec2_table position
---@return color3b_table@ color3b_table#color3b_table ret (return value: color3b_table)
function TileMapAtlas:getTileAt(position) end
---*  sets a tile at position x,y.<br>
---* For the moment only channel R is used
---@param tile color3b_table@ #color3b_table tile
---@param position vec2_table@ #vec2_table position
---@return cc.TileMapAtlas@ TileMapAtlas#TileMapAtlas self (return value: cc.TileMapAtlas)
function TileMapAtlas:setTile(tile,position) end
---*  creates a TileMap with a tile file (atlas) with a map file and the width and height of each tile in points.<br>
---* The tile file will be loaded using the TextureMgr.
---@param tile string@ #string tile
---@param mapFile string@ #string mapFile
---@param tileWidth int@ #int tileWidth
---@param tileHeight int@ #int tileHeight
---@return cc.TileMapAtlas@ TileMapAtlas#TileMapAtlas ret (return value: cc.TileMapAtlas)
function TileMapAtlas:create(tile,mapFile,tileWidth,tileHeight) end
---* js ctor
---@return cc.TileMapAtlas@ TileMapAtlas#TileMapAtlas self (return value: cc.TileMapAtlas)
function TileMapAtlas:TileMapAtlas() end


---@class ccs.Timeline :  Ref
local Timeline={ }
---@class Timeline : ccs.Timeline
ccs.Timeline=Timeline


---* 
---@return ccs.Timeline@ Timeline#Timeline ret (return value: ccs.Timeline)
function Timeline:clone() end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:gotoFrame(frameIndex) end
---* 
---@param node cc.Node@ #cc.Node node
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:setNode(node) end
---* 
---@return ccs.ActionTimeline@ ActionTimeline#ActionTimeline ret (return value: ccs.ActionTimeline)
function Timeline:getActionTimeline() end
---* 
---@param frame ccs.Frame@ #ccs.Frame frame
---@param index int@ #int index
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:insertFrame(frame,index) end
---* 
---@param tag int@ #int tag
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:setActionTag(tag) end
---* 
---@param frame ccs.Frame@ #ccs.Frame frame
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:addFrame(frame) end
---* 
---@return array_table@ array_table#array_table ret (return value: array_table)
function Timeline:getFrames() end
---* 
---@return int@ int#int ret (return value: int)
function Timeline:getActionTag() end
---* 
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Timeline:getNode() end
---* 
---@param frame ccs.Frame@ #ccs.Frame frame
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:removeFrame(frame) end
---* 
---@param action ccs.ActionTimeline@ #ccs.ActionTimeline action
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:setActionTimeline(action) end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:stepToFrame(frameIndex) end
---* 
---@return ccs.Timeline@ Timeline#Timeline ret (return value: ccs.Timeline)
function Timeline:create() end
---* 
---@return ccs.Timeline@ Timeline#Timeline self (return value: ccs.Timeline)
function Timeline:Timeline() end


---@class cc.Timer :  Ref
local Timer={ }
---@class Timer : cc.Timer
cc.Timer=Timer


---* 
---@param seconds float@ #float seconds
---@param _repeat unsigned_int@ #unsigned int repeat
---@param delay float@ #float delay
---@return cc.Timer@ Timer#Timer self (return value: cc.Timer)
function Timer:setupTimerWithInterval(seconds,_repeat,delay) end
---*  triggers the timer 
---@param dt float@ #float dt
---@return cc.Timer@ Timer#Timer self (return value: cc.Timer)
function Timer:update(dt) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Timer:isAborted() end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Timer:isExhausted() end
---* 
---@param dt float@ #float dt
---@return cc.Timer@ Timer#Timer self (return value: cc.Timer)
function Timer:trigger(dt) end
---* 
---@return cc.Timer@ Timer#Timer self (return value: cc.Timer)
function Timer:cancel() end
---* 
---@return cc.Timer@ Timer#Timer self (return value: cc.Timer)
function Timer:setAborted() end


---@class cc.TintBy :  ActionInterval
local TintBy={ }
---@class TintBy : cc.TintBy
cc.TintBy=TintBy


---*  initializes the action with duration and color 
---@param duration float@ #float duration
---@param deltaRed short@ #short deltaRed
---@param deltaGreen short@ #short deltaGreen
---@param deltaBlue short@ #short deltaBlue
---@return boolean@ bool#bool ret (return value: bool)
function TintBy:initWithDuration(duration,deltaRed,deltaGreen,deltaBlue) end
---* Creates an action with duration and color.<br>
---* param duration Duration time, in seconds.<br>
---* param deltaRed Delta red color.<br>
---* param deltaGreen Delta green color.<br>
---* param deltaBlue Delta blue color.<br>
---* return An autoreleased TintBy object.
---@param duration float@ #float duration
---@param deltaRed short@ #short deltaRed
---@param deltaGreen short@ #short deltaGreen
---@param deltaBlue short@ #short deltaBlue
---@return cc.TintBy@ TintBy#TintBy ret (return value: cc.TintBy)
function TintBy:create(duration,deltaRed,deltaGreen,deltaBlue) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.TintBy@ TintBy#TintBy self (return value: cc.TintBy)
function TintBy:startWithTarget(target) end
---* 
---@return cc.TintBy@ TintBy#TintBy ret (return value: cc.TintBy)
function TintBy:clone() end
---* 
---@return cc.TintBy@ TintBy#TintBy ret (return value: cc.TintBy)
function TintBy:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.TintBy@ TintBy#TintBy self (return value: cc.TintBy)
function TintBy:update(time) end
---* 
---@return cc.TintBy@ TintBy#TintBy self (return value: cc.TintBy)
function TintBy:TintBy() end


---@class cc.TintTo :  ActionInterval
local TintTo={ }
---@class TintTo : cc.TintTo
cc.TintTo=TintTo


---*  initializes the action with duration and color 
---@param duration float@ #float duration
---@param red unsigned_char@ #unsigned char red
---@param green unsigned_char@ #unsigned char green
---@param blue unsigned_char@ #unsigned char blue
---@return boolean@ bool#bool ret (return value: bool)
function TintTo:initWithDuration(duration,red,green,blue) end
---@param duration float@ #float duration
---@param red unsigned_char@ #unsigned char red
---@param green unsigned_char@ #unsigned char green
---@param blue unsigned_char@ #unsigned char blue
---@return cc.TintTo@ TintTo#TintTo ret (return value: cc.TintTo)
---@overload fun(duration:float,unkown1:color3b_table):cc.TintTo
---@overload fun(duration:float,red:unsigned_char,green:unsigned_char,blue:unsigned_char):cc.TintTo
function TintTo:create(duration,red,green,blue) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.TintTo@ TintTo#TintTo self (return value: cc.TintTo)
function TintTo:startWithTarget(target) end
---* 
---@return cc.TintTo@ TintTo#TintTo ret (return value: cc.TintTo)
function TintTo:clone() end
---* 
---@return cc.TintTo@ TintTo#TintTo ret (return value: cc.TintTo)
function TintTo:reverse() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.TintTo@ TintTo#TintTo self (return value: cc.TintTo)
function TintTo:update(time) end
---* 
---@return cc.TintTo@ TintTo#TintTo self (return value: cc.TintTo)
function TintTo:TintTo() end


---@class ccexp.TMXLayer :  Node
local TMXLayer={ }
---@class TMXLayer : ccexp.TMXLayer
ccexp.TMXLayer=TMXLayer


---*  Returns the position in points of a given tile coordinate.<br>
---* param tileCoordinate The tile Coordinate.<br>
---* return The position in points of a given tile coordinate.
---@param tileCoordinate vec2_table@ #vec2_table tileCoordinate
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function TMXLayer:getPositionAt(tileCoordinate) end
---*  Set Layer orientation, which is the same as the map orientation. <br>
---* param orientation Layer orientation, which is the same as the map orientation.
---@param orientation int@ #int orientation
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setLayerOrientation(orientation) end
---*  Size of the layer in tiles.<br>
---* return Size of the layer in tiles.
---@return size_table@ size_table#size_table ret (return value: size_table)
function TMXLayer:getLayerSize() end
---*  Set the size of the map's tile. <br>
---* param size The new size of the map's tile.
---@param size size_table@ #size_table size
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setMapTileSize(size) end
---*  Layer orientation, which is the same as the map orientation.<br>
---* return Layer orientation, which is the same as the map orientation.
---@return int@ int#int ret (return value: int)
function TMXLayer:getLayerOrientation() end
---*  Set the properties to the layer.<br>
---* param properties The properties to the layer.
---@param properties map_table@ #map_table properties
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setProperties(properties) end
---*  Set the tile layer name.<br>
---* param layerName The new layer name.
---@param layerName string@ #string layerName
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setLayerName(layerName) end
---*  Removes a tile at given tile coordinate.<br>
---* param tileCoordinate The tile Coordinate.
---@param tileCoordinate vec2_table@ #vec2_table tileCoordinate
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:removeTileAt(tileCoordinate) end
---@return map_table@ map_table#map_table ret (return value: map_table)
---@overload fun():map_table
---@overload fun():map_table
function TMXLayer:getProperties() end
---*  Creates the tiles. 
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setupTiles() end
---*  Set an sprite to the tile,with the tile coordinate and gid.<br>
---* param sprite A Sprite.<br>
---* param pos The tile coordinate.<br>
---* param gid The tile gid.
---@param sprite cc.Sprite@ #cc.Sprite sprite
---@param pos vec2_table@ #vec2_table pos
---@param gid unsigned_int@ #unsigned int gid
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setupTileSprite(sprite,pos,gid) end
---@param gid int@ #int gid
---@param tileCoordinate vec2_table@ #vec2_table tileCoordinate
---@param flags int@ #int flags
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
---@overload fun(gid:int,tileCoordinate:vec2_table,flags:int):ccexp.TMXLayer
---@overload fun(gid:int,tileCoordinate:vec2_table):ccexp.TMXLayer
function TMXLayer:setTileGID(gid,tileCoordinate,flags) end
---*  Size of the map's tile (could be different from the tile's size).<br>
---* return Size of the map's tile (could be different from the tile's size).
---@return size_table@ size_table#size_table ret (return value: size_table)
function TMXLayer:getMapTileSize() end
---*  Return the value for the specific property name.<br>
---* param propertyName The value for the specific property name.<br>
---* return The value for the specific property name.
---@param propertyName string@ #string propertyName
---@return cc.Value@ Value#Value ret (return value: cc.Value)
function TMXLayer:getProperty(propertyName) end
---*  Set the size of the layer in tiles. <br>
---* param size The new size of the layer in tiles.
---@param size size_table@ #size_table size
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setLayerSize(size) end
---*  Get the tile layer name.<br>
---* return The tile layer name.
---@return string@ string#string ret (return value: string)
function TMXLayer:getLayerName() end
---*  Set the tileset information for the layer. <br>
---* param info The new tileset information for the layer.
---@param info cc.TMXTilesetInfo@ #cc.TMXTilesetInfo info
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:setTileSet(info) end
---*  Tileset information for the layer.<br>
---* return Tileset information for the layer.
---@return cc.TMXTilesetInfo@ TMXTilesetInfo#TMXTilesetInfo ret (return value: cc.TMXTilesetInfo)
function TMXLayer:getTileSet() end
---*  Returns the tile (Sprite) at a given a tile coordinate.<br>
---* The returned Sprite will be already added to the TMXLayer. Don't add it again.<br>
---* The Sprite can be treated like any other Sprite: rotated, scaled, translated, opacity, color, etc.<br>
---* You can remove either by calling:<br>
---* - layer->removeChild(sprite, cleanup);<br>
---* return Returns the tile (Sprite) at a given a tile coordinate.
---@param tileCoordinate vec2_table@ #vec2_table tileCoordinate
---@return cc.Sprite@ Sprite#Sprite ret (return value: cc.Sprite)
function TMXLayer:getTileAt(tileCoordinate) end
---*  Creates a FastTMXLayer with an tileset info, a layer info and a map info.<br>
---* param tilesetInfo An tileset info.<br>
---* param layerInfo A layer info.<br>
---* param mapInfo A map info.<br>
---* return Return an autorelease object.
---@param tilesetInfo cc.TMXTilesetInfo@ #cc.TMXTilesetInfo tilesetInfo
---@param layerInfo cc.TMXLayerInfo@ #cc.TMXLayerInfo layerInfo
---@param mapInfo cc.TMXMapInfo@ #cc.TMXMapInfo mapInfo
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer ret (return value: cc.experimental::TMXLayer)
function TMXLayer:create(tilesetInfo,layerInfo,mapInfo) end
---* 
---@param child cc.Node@ #cc.Node child
---@param cleanup boolean@ #bool cleanup
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:removeChild(child,cleanup) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:draw(renderer,transform,flags) end
---* 
---@return string@ string#string ret (return value: string)
function TMXLayer:getDescription() end
---* js ctor
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer self (return value: cc.experimental::TMXLayer)
function TMXLayer:TMXLayer() end


---@class cc.TMXLayerInfo :  Ref
local TMXLayerInfo={ }
---@class TMXLayerInfo : cc.TMXLayerInfo
cc.TMXLayerInfo=TMXLayerInfo


---* 
---@param properties map_table@ #map_table properties
---@return cc.TMXLayerInfo@ TMXLayerInfo#TMXLayerInfo self (return value: cc.TMXLayerInfo)
function TMXLayerInfo:setProperties(properties) end
---* 
---@return map_table@ map_table#map_table ret (return value: map_table)
function TMXLayerInfo:getProperties() end
---* js ctor
---@return cc.TMXLayerInfo@ TMXLayerInfo#TMXLayerInfo self (return value: cc.TMXLayerInfo)
function TMXLayerInfo:TMXLayerInfo() end


---@class cc.TMXMapInfo 
local TMXMapInfo={ }
---@class TMXMapInfo : cc.TMXMapInfo
cc.TMXMapInfo=TMXMapInfo


---* 
---@param currentString string@ #string currentString
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setCurrentString(currentString) end
---* / map hexsidelength
---@return int@ int#int ret (return value: int)
function TMXMapInfo:getHexSideLength() end
---* 
---@param tileSize size_table@ #size_table tileSize
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setTileSize(tileSize) end
---*  initializes a TMX format with a  tmx file 
---@param tmxFile string@ #string tmxFile
---@return boolean@ bool#bool ret (return value: bool)
function TMXMapInfo:initWithTMXFile(tmxFile) end
---* / map orientation
---@return int@ int#int ret (return value: int)
function TMXMapInfo:getOrientation() end
---* 
---@param groups array_table@ #array_table groups
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setObjectGroups(groups) end
---* 
---@param layers array_table@ #array_table layers
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setLayers(layers) end
---*  initializes parsing of an XML file, either a tmx (Map) file or tsx (Tileset) file 
---@param xmlFilename string@ #string xmlFilename
---@return boolean@ bool#bool ret (return value: bool)
function TMXMapInfo:parseXMLFile(xmlFilename) end
---* / parent element
---@return int@ int#int ret (return value: int)
function TMXMapInfo:getParentElement() end
---* 
---@param fileName string@ #string fileName
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setTMXFileName(fileName) end
---* 
---@param xmlString string@ #string xmlString
---@return boolean@ bool#bool ret (return value: bool)
function TMXMapInfo:parseXMLString(xmlString) end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function TMXMapInfo:getLayers() end
---* / map staggeraxis
---@return int@ int#int ret (return value: int)
function TMXMapInfo:getStaggerAxis() end
---* 
---@param hexSideLength int@ #int hexSideLength
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setHexSideLength(hexSideLength) end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function TMXMapInfo:getTilesets() end
---* / parent GID
---@return int@ int#int ret (return value: int)
function TMXMapInfo:getParentGID() end
---* 
---@param element int@ #int element
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setParentElement(element) end
---*  initializes a TMX format with an XML string and a TMX resource path 
---@param tmxString string@ #string tmxString
---@param resourcePath string@ #string resourcePath
---@return boolean@ bool#bool ret (return value: bool)
function TMXMapInfo:initWithXML(tmxString,resourcePath) end
---* 
---@param gid int@ #int gid
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setParentGID(gid) end
---* / layer attribs
---@return int@ int#int ret (return value: int)
function TMXMapInfo:getLayerAttribs() end
---* / tiles width & height
---@return size_table@ size_table#size_table ret (return value: size_table)
function TMXMapInfo:getTileSize() end
---* 
---@return map_table@ map_table#map_table ret (return value: map_table)
function TMXMapInfo:getTileProperties() end
---* / is storing characters?
---@return boolean@ bool#bool ret (return value: bool)
function TMXMapInfo:isStoringCharacters() end
---* 
---@return string@ string#string ret (return value: string)
function TMXMapInfo:getExternalTilesetFileName() end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function TMXMapInfo:getObjectGroups() end
---* 
---@return string@ string#string ret (return value: string)
function TMXMapInfo:getTMXFileName() end
---* 
---@param staggerIndex int@ #int staggerIndex
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setStaggerIndex(staggerIndex) end
---* 
---@param properties map_table@ #map_table properties
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setProperties(properties) end
---* 
---@param orientation int@ #int orientation
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setOrientation(orientation) end
---* 
---@param tileProperties map_table@ #map_table tileProperties
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setTileProperties(tileProperties) end
---* 
---@param mapSize size_table@ #size_table mapSize
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setMapSize(mapSize) end
---* 
---@return string@ string#string ret (return value: string)
function TMXMapInfo:getCurrentString() end
---* 
---@param storingCharacters boolean@ #bool storingCharacters
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setStoringCharacters(storingCharacters) end
---* 
---@param staggerAxis int@ #int staggerAxis
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setStaggerAxis(staggerAxis) end
---* / map width & height
---@return size_table@ size_table#size_table ret (return value: size_table)
function TMXMapInfo:getMapSize() end
---* 
---@param tilesets array_table@ #array_table tilesets
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setTilesets(tilesets) end
---@return map_table@ map_table#map_table ret (return value: map_table)
---@overload fun():map_table
---@overload fun():map_table
function TMXMapInfo:getProperties() end
---* / map stagger index
---@return int@ int#int ret (return value: int)
function TMXMapInfo:getStaggerIndex() end
---* 
---@param layerAttribs int@ #int layerAttribs
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:setLayerAttribs(layerAttribs) end
---*  creates a TMX Format with a tmx file 
---@param tmxFile string@ #string tmxFile
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo ret (return value: cc.TMXMapInfo)
function TMXMapInfo:create(tmxFile) end
---*  creates a TMX Format with an XML string and a TMX resource path 
---@param tmxString string@ #string tmxString
---@param resourcePath string@ #string resourcePath
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo ret (return value: cc.TMXMapInfo)
function TMXMapInfo:createWithXML(tmxString,resourcePath) end
---* js ctor
---@return cc.TMXMapInfo@ TMXMapInfo#TMXMapInfo self (return value: cc.TMXMapInfo)
function TMXMapInfo:TMXMapInfo() end


---@class cc.TMXObjectGroup :  Ref
local TMXObjectGroup={ }
---@class TMXObjectGroup : cc.TMXObjectGroup
cc.TMXObjectGroup=TMXObjectGroup


---*  Sets the offset position of child objects. <br>
---* param offset The offset position of child objects.
---@param offset vec2_table@ #vec2_table offset
---@return cc.TMXObjectGroup@ TMXObjectGroup#TMXObjectGroup self (return value: cc.TMXObjectGroup)
function TMXObjectGroup:setPositionOffset(offset) end
---*  Return the value for the specific property name. <br>
---* param propertyName The specific property name.<br>
---* return Return the value for the specific property name.<br>
---* js NA
---@param propertyName string@ #string propertyName
---@return cc.Value@ Value#Value ret (return value: cc.Value)
function TMXObjectGroup:getProperty(propertyName) end
---*  Gets the offset position of child objects. <br>
---* return The offset position of child objects.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function TMXObjectGroup:getPositionOffset() end
---*  Return the dictionary for the specific object name.<br>
---* It will return the 1st object found on the array for the given name.<br>
---* return Return the dictionary for the specific object name.
---@param objectName string@ #string objectName
---@return map_table@ map_table#map_table ret (return value: map_table)
function TMXObjectGroup:getObject(objectName) end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function TMXObjectGroup:getObjects() end
---*  Set the group name. <br>
---* param groupName A string,it is used to set the group name.
---@param groupName string@ #string groupName
---@return cc.TMXObjectGroup@ TMXObjectGroup#TMXObjectGroup self (return value: cc.TMXObjectGroup)
function TMXObjectGroup:setGroupName(groupName) end
---@return map_table@ map_table#map_table ret (return value: map_table)
---@overload fun():map_table
---@overload fun():map_table
function TMXObjectGroup:getProperties() end
---*  Get the group name. <br>
---* return The group name.
---@return string@ string#string ret (return value: string)
function TMXObjectGroup:getGroupName() end
---*  Sets the list of properties.<br>
---* param properties The list of properties.
---@param properties map_table@ #map_table properties
---@return cc.TMXObjectGroup@ TMXObjectGroup#TMXObjectGroup self (return value: cc.TMXObjectGroup)
function TMXObjectGroup:setProperties(properties) end
---*  Sets the array of the objects.<br>
---* param objects The array of the objects.
---@param objects array_table@ #array_table objects
---@return cc.TMXObjectGroup@ TMXObjectGroup#TMXObjectGroup self (return value: cc.TMXObjectGroup)
function TMXObjectGroup:setObjects(objects) end
---* js ctor
---@return cc.TMXObjectGroup@ TMXObjectGroup#TMXObjectGroup self (return value: cc.TMXObjectGroup)
function TMXObjectGroup:TMXObjectGroup() end


---@class ccexp.TMXTiledMap :  Node
local TMXTiledMap={ }
---@class TMXTiledMap : ccexp.TMXTiledMap
ccexp.TMXTiledMap=TMXTiledMap


---*  Set object groups. <br>
---* param groups An object groups.
---@param groups array_table@ #array_table groups
---@return ccexp.TMXTiledMap@ experimental::TMXTiledMap#experimental::TMXTiledMap self (return value: cc.experimental::TMXTiledMap)
function TMXTiledMap:setObjectGroups(groups) end
---*  Return the value for the specific property name.<br>
---* return Return the value for the specific property name.
---@param propertyName string@ #string propertyName
---@return cc.Value@ Value#Value ret (return value: cc.Value)
function TMXTiledMap:getProperty(propertyName) end
---*  Set the map's size property measured in tiles.<br>
---* param mapSize The map's size property measured in tiles.
---@param mapSize size_table@ #size_table mapSize
---@return ccexp.TMXTiledMap@ experimental::TMXTiledMap#experimental::TMXTiledMap self (return value: cc.experimental::TMXTiledMap)
function TMXTiledMap:setMapSize(mapSize) end
---*  Return the TMXObjectGroup for the specific group. <br>
---* return Return the TMXObjectGroup for the specific group.
---@param groupName string@ #string groupName
---@return cc.TMXObjectGroup@ TMXObjectGroup#TMXObjectGroup ret (return value: cc.TMXObjectGroup)
function TMXTiledMap:getObjectGroup(groupName) end
---@return array_table@ array_table#array_table ret (return value: array_table)
---@overload fun():array_table
---@overload fun():array_table
function TMXTiledMap:getObjectGroups() end
---*  The tiles's size property measured in pixels.<br>
---* return The tiles's size property measured in pixels.
---@return size_table@ size_table#size_table ret (return value: size_table)
function TMXTiledMap:getTileSize() end
---*  The map's size property measured in tiles. <br>
---* return The map's size property measured in tiles.
---@return size_table@ size_table#size_table ret (return value: size_table)
function TMXTiledMap:getMapSize() end
---*  Get properties.<br>
---* return Properties.
---@return map_table@ map_table#map_table ret (return value: map_table)
function TMXTiledMap:getProperties() end
---*  Return properties dictionary for tile GID.<br>
---* return Return properties dictionary for tile GID.
---@param GID int@ #int GID
---@return cc.Value@ Value#Value ret (return value: cc.Value)
function TMXTiledMap:getPropertiesForGID(GID) end
---*  Set the tiles's size property measured in pixels. <br>
---* param tileSize The tiles's size property measured in pixels.
---@param tileSize size_table@ #size_table tileSize
---@return ccexp.TMXTiledMap@ experimental::TMXTiledMap#experimental::TMXTiledMap self (return value: cc.experimental::TMXTiledMap)
function TMXTiledMap:setTileSize(tileSize) end
---*  Set properties. <br>
---* param properties An ValueMap Properties.
---@param properties map_table@ #map_table properties
---@return ccexp.TMXTiledMap@ experimental::TMXTiledMap#experimental::TMXTiledMap self (return value: cc.experimental::TMXTiledMap)
function TMXTiledMap:setProperties(properties) end
---*  Return the FastTMXLayer for the specific layer. <br>
---* return Return the FastTMXLayer for the specific layer.
---@param layerName string@ #string layerName
---@return ccexp.TMXLayer@ experimental::TMXLayer#experimental::TMXLayer ret (return value: cc.experimental::TMXLayer)
function TMXTiledMap:getLayer(layerName) end
---*  Get map orientation. <br>
---* return The map orientation.
---@return int@ int#int ret (return value: int)
function TMXTiledMap:getMapOrientation() end
---*  Set map orientation. <br>
---* param mapOrientation The map orientation.
---@param mapOrientation int@ #int mapOrientation
---@return ccexp.TMXTiledMap@ experimental::TMXTiledMap#experimental::TMXTiledMap self (return value: cc.experimental::TMXTiledMap)
function TMXTiledMap:setMapOrientation(mapOrientation) end
---*  Creates a TMX Tiled Map with a TMX file.<br>
---* return An autorelease object.
---@param tmxFile string@ #string tmxFile
---@return ccexp.TMXTiledMap@ experimental::TMXTiledMap#experimental::TMXTiledMap ret (return value: cc.experimental::TMXTiledMap)
function TMXTiledMap:create(tmxFile) end
---*  Initializes a TMX Tiled Map with a TMX formatted XML string and a path to TMX resources. <br>
---* param tmxString A TMX formatted XML string.<br>
---* param resourcePath A path to TMX resources.<br>
---* return An autorelease object.
---@param tmxString string@ #string tmxString
---@param resourcePath string@ #string resourcePath
---@return ccexp.TMXTiledMap@ experimental::TMXTiledMap#experimental::TMXTiledMap ret (return value: cc.experimental::TMXTiledMap)
function TMXTiledMap:createWithXML(tmxString,resourcePath) end
---* 
---@return string@ string#string ret (return value: string)
function TMXTiledMap:getDescription() end


---@class cc.TMXTilesetInfo :  Ref
local TMXTilesetInfo={ }
---@class TMXTilesetInfo : cc.TMXTilesetInfo
cc.TMXTilesetInfo=TMXTilesetInfo


---* 
---@param gid unsigned_int@ #unsigned int gid
---@return rect_table@ rect_table#rect_table ret (return value: rect_table)
function TMXTilesetInfo:getRectForGID(gid) end
---* js ctor
---@return cc.TMXTilesetInfo@ TMXTilesetInfo#TMXTilesetInfo self (return value: cc.TMXTilesetInfo)
function TMXTilesetInfo:TMXTilesetInfo() end


---@class cc.ToggleVisibility :  ActionInstant
local ToggleVisibility={ }
---@class ToggleVisibility : cc.ToggleVisibility
cc.ToggleVisibility=ToggleVisibility


---*  Allocates and initializes the action.<br>
---* return An autoreleased ToggleVisibility object.
---@return cc.ToggleVisibility@ ToggleVisibility#ToggleVisibility ret (return value: cc.ToggleVisibility)
function ToggleVisibility:create() end
---* 
---@return cc.ToggleVisibility@ ToggleVisibility#ToggleVisibility ret (return value: cc.ToggleVisibility)
function ToggleVisibility:clone() end
---* param time In seconds.
---@param time float@ #float time
---@return cc.ToggleVisibility@ ToggleVisibility#ToggleVisibility self (return value: cc.ToggleVisibility)
function ToggleVisibility:update(time) end
---* 
---@return cc.ToggleVisibility@ ToggleVisibility#ToggleVisibility ret (return value: cc.ToggleVisibility)
function ToggleVisibility:reverse() end
---* 
---@return cc.ToggleVisibility@ ToggleVisibility#ToggleVisibility self (return value: cc.ToggleVisibility)
function ToggleVisibility:ToggleVisibility() end


---@class cc.Touch :  Ref
local Touch={ }
---@class Touch : cc.Touch
cc.Touch=Touch


---*  Returns the previous touch location in screen coordinates. <br>
---* return The previous touch location in screen coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Touch:getPreviousLocationInView() end
---*  Returns the current touch location in OpenGL coordinates.<br>
---* return The current touch location in OpenGL coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Touch:getLocation() end
---*  Returns the delta of 2 current touches locations in screen coordinates.<br>
---* return The delta of 2 current touches locations in screen coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Touch:getDelta() end
---*  Returns the start touch location in screen coordinates.<br>
---* return The start touch location in screen coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Touch:getStartLocationInView() end
---*  Returns the current touch force for 3d touch.<br>
---* return The current touch force for 3d touch.
---@return float@ float#float ret (return value: float)
function Touch:getCurrentForce() end
---*  Returns the start touch location in OpenGL coordinates.<br>
---* return The start touch location in OpenGL coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Touch:getStartLocation() end
---*  Get touch id.<br>
---* js getId<br>
---* lua getId<br>
---* return The id of touch.
---@return int@ int#int ret (return value: int)
function Touch:getID() end
---@param id int@ #int id
---@param x float@ #float x
---@param y float@ #float y
---@param force float@ #float force
---@param maxForce float@ #float maxForce
---@return cc.Touch@ Touch#Touch self (return value: cc.Touch)
---@overload fun(id:int,x:float,y:float,force:float,maxForce:float):cc.Touch
---@overload fun(id:int,x:float,y:float):cc.Touch
function Touch:setTouchInfo(id,x,y,force,maxForce) end
---*  Returns the maximum touch force for 3d touch.<br>
---* return The maximum touch force for 3d touch.
---@return float@ float#float ret (return value: float)
function Touch:getMaxForce() end
---*  Returns the current touch location in screen coordinates.<br>
---* return The current touch location in screen coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Touch:getLocationInView() end
---*  Returns the previous touch location in OpenGL coordinates.<br>
---* return The previous touch location in OpenGL coordinates.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Touch:getPreviousLocation() end
---*  Constructor.<br>
---* js ctor
---@return cc.Touch@ Touch#Touch self (return value: cc.Touch)
function Touch:Touch() end


---@class cc.TransitionCrossFade :  TransitionScene
local TransitionCrossFade={ }
---@class TransitionCrossFade : cc.TransitionCrossFade
cc.TransitionCrossFade=TransitionCrossFade


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionCrossFade object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionCrossFade@ TransitionCrossFade#TransitionCrossFade ret (return value: cc.TransitionCrossFade)
function TransitionCrossFade:create(t,scene) end
---* lua NA
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.TransitionCrossFade@ TransitionCrossFade#TransitionCrossFade self (return value: cc.TransitionCrossFade)
function TransitionCrossFade:draw(renderer,transform,flags) end
---* 
---@return cc.TransitionCrossFade@ TransitionCrossFade#TransitionCrossFade self (return value: cc.TransitionCrossFade)
function TransitionCrossFade:TransitionCrossFade() end


---@class cc.TransitionEaseScene 
local TransitionEaseScene={ }
---@class TransitionEaseScene : cc.TransitionEaseScene
cc.TransitionEaseScene=TransitionEaseScene


---*  Returns the Ease action that will be performed on a linear action.<br>
---* since v0.8.2<br>
---* param action A given interval action.<br>
---* return The Ease action that will be performed on a linear action.
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionEaseScene:easeActionWithAction(action) end


---@class cc.TransitionFade :  TransitionScene
local TransitionFade={ }
---@class TransitionFade : cc.TransitionFade
cc.TransitionFade=TransitionFade


---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@param color color3b_table@ #color3b_table color
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(t:float,scene:cc.Scene):boolean
---@overload fun(t:float,scene:cc.Scene,color:color3b_table):boolean
function TransitionFade:initWithDuration(t,scene,color) end
---@param duration float@ #float duration
---@param scene cc.Scene@ #cc.Scene scene
---@param color color3b_table@ #color3b_table color
---@return cc.TransitionFade@ TransitionFade#TransitionFade ret (return value: cc.TransitionFade)
---@overload fun(duration:float,scene:cc.Scene):cc.TransitionFade
---@overload fun(duration:float,scene:cc.Scene,color:color3b_table):cc.TransitionFade
function TransitionFade:create(duration,scene,color) end
---* 
---@return cc.TransitionFade@ TransitionFade#TransitionFade self (return value: cc.TransitionFade)
function TransitionFade:TransitionFade() end


---@class cc.TransitionFadeBL :  TransitionFadeTR
local TransitionFadeBL={ }
---@class TransitionFadeBL : cc.TransitionFadeBL
cc.TransitionFadeBL=TransitionFadeBL


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionFadeBL object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionFadeBL@ TransitionFadeBL#TransitionFadeBL ret (return value: cc.TransitionFadeBL)
function TransitionFadeBL:create(t,scene) end
---* 
---@param size size_table@ #size_table size
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionFadeBL:actionWithSize(size) end
---* 
---@return cc.TransitionFadeBL@ TransitionFadeBL#TransitionFadeBL self (return value: cc.TransitionFadeBL)
function TransitionFadeBL:TransitionFadeBL() end


---@class cc.TransitionFadeDown :  TransitionFadeTR
local TransitionFadeDown={ }
---@class TransitionFadeDown : cc.TransitionFadeDown
cc.TransitionFadeDown=TransitionFadeDown


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionFadeDown object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionFadeDown@ TransitionFadeDown#TransitionFadeDown ret (return value: cc.TransitionFadeDown)
function TransitionFadeDown:create(t,scene) end
---* 
---@param size size_table@ #size_table size
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionFadeDown:actionWithSize(size) end
---* 
---@return cc.TransitionFadeDown@ TransitionFadeDown#TransitionFadeDown self (return value: cc.TransitionFadeDown)
function TransitionFadeDown:TransitionFadeDown() end


---@class cc.TransitionFadeTR :  TransitionScene@TransitionEaseScene
local TransitionFadeTR={ }
---@class TransitionFadeTR : cc.TransitionFadeTR
cc.TransitionFadeTR=TransitionFadeTR


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionFadeTR:easeActionWithAction(action) end
---*  Returns the action that will be performed with size.<br>
---* param size A given size.<br>
---* return The action that will be performed.
---@param size size_table@ #size_table size
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionFadeTR:actionWithSize(size) end
---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionFadeTR object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionFadeTR@ TransitionFadeTR#TransitionFadeTR ret (return value: cc.TransitionFadeTR)
function TransitionFadeTR:create(t,scene) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.TransitionFadeTR@ TransitionFadeTR#TransitionFadeTR self (return value: cc.TransitionFadeTR)
function TransitionFadeTR:draw(renderer,transform,flags) end
---* 
---@return cc.TransitionFadeTR@ TransitionFadeTR#TransitionFadeTR self (return value: cc.TransitionFadeTR)
function TransitionFadeTR:TransitionFadeTR() end


---@class cc.TransitionFadeUp :  TransitionFadeTR
local TransitionFadeUp={ }
---@class TransitionFadeUp : cc.TransitionFadeUp
cc.TransitionFadeUp=TransitionFadeUp


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionFadeUp object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionFadeUp@ TransitionFadeUp#TransitionFadeUp ret (return value: cc.TransitionFadeUp)
function TransitionFadeUp:create(t,scene) end
---* 
---@param size size_table@ #size_table size
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionFadeUp:actionWithSize(size) end
---* 
---@return cc.TransitionFadeUp@ TransitionFadeUp#TransitionFadeUp self (return value: cc.TransitionFadeUp)
function TransitionFadeUp:TransitionFadeUp() end


---@class cc.TransitionFlipAngular :  TransitionSceneOriented
local TransitionFlipAngular={ }
---@class TransitionFlipAngular : cc.TransitionFlipAngular
cc.TransitionFlipAngular=TransitionFlipAngular


---@param t float@ #float t
---@param s cc.Scene@ #cc.Scene s
---@param o int@ #int o
---@return cc.TransitionFlipAngular@ TransitionFlipAngular#TransitionFlipAngular ret (return value: cc.TransitionFlipAngular)
---@overload fun(t:float,s:cc.Scene):cc.TransitionFlipAngular
---@overload fun(t:float,s:cc.Scene,o:int):cc.TransitionFlipAngular
function TransitionFlipAngular:create(t,s,o) end
---* 
---@return cc.TransitionFlipAngular@ TransitionFlipAngular#TransitionFlipAngular self (return value: cc.TransitionFlipAngular)
function TransitionFlipAngular:TransitionFlipAngular() end


---@class cc.TransitionFlipX :  TransitionSceneOriented
local TransitionFlipX={ }
---@class TransitionFlipX : cc.TransitionFlipX
cc.TransitionFlipX=TransitionFlipX


---@param t float@ #float t
---@param s cc.Scene@ #cc.Scene s
---@param o int@ #int o
---@return cc.TransitionFlipX@ TransitionFlipX#TransitionFlipX ret (return value: cc.TransitionFlipX)
---@overload fun(t:float,s:cc.Scene):cc.TransitionFlipX
---@overload fun(t:float,s:cc.Scene,o:int):cc.TransitionFlipX
function TransitionFlipX:create(t,s,o) end
---* 
---@return cc.TransitionFlipX@ TransitionFlipX#TransitionFlipX self (return value: cc.TransitionFlipX)
function TransitionFlipX:TransitionFlipX() end


---@class cc.TransitionFlipY :  TransitionSceneOriented
local TransitionFlipY={ }
---@class TransitionFlipY : cc.TransitionFlipY
cc.TransitionFlipY=TransitionFlipY


---@param t float@ #float t
---@param s cc.Scene@ #cc.Scene s
---@param o int@ #int o
---@return cc.TransitionFlipY@ TransitionFlipY#TransitionFlipY ret (return value: cc.TransitionFlipY)
---@overload fun(t:float,s:cc.Scene):cc.TransitionFlipY
---@overload fun(t:float,s:cc.Scene,o:int):cc.TransitionFlipY
function TransitionFlipY:create(t,s,o) end
---* 
---@return cc.TransitionFlipY@ TransitionFlipY#TransitionFlipY self (return value: cc.TransitionFlipY)
function TransitionFlipY:TransitionFlipY() end


---@class cc.TransitionJumpZoom :  TransitionScene
local TransitionJumpZoom={ }
---@class TransitionJumpZoom : cc.TransitionJumpZoom
cc.TransitionJumpZoom=TransitionJumpZoom


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionJumpZoom object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionJumpZoom@ TransitionJumpZoom#TransitionJumpZoom ret (return value: cc.TransitionJumpZoom)
function TransitionJumpZoom:create(t,scene) end
---* 
---@return cc.TransitionJumpZoom@ TransitionJumpZoom#TransitionJumpZoom self (return value: cc.TransitionJumpZoom)
function TransitionJumpZoom:TransitionJumpZoom() end


---@class cc.TransitionMoveInB :  TransitionMoveInL
local TransitionMoveInB={ }
---@class TransitionMoveInB : cc.TransitionMoveInB
cc.TransitionMoveInB=TransitionMoveInB


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionMoveInB object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionMoveInB@ TransitionMoveInB#TransitionMoveInB ret (return value: cc.TransitionMoveInB)
function TransitionMoveInB:create(t,scene) end
---* 
---@return cc.TransitionMoveInB@ TransitionMoveInB#TransitionMoveInB self (return value: cc.TransitionMoveInB)
function TransitionMoveInB:TransitionMoveInB() end


---@class cc.TransitionMoveInL :  TransitionScene@TransitionEaseScene
local TransitionMoveInL={ }
---@class TransitionMoveInL : cc.TransitionMoveInL
cc.TransitionMoveInL=TransitionMoveInL


---*  Returns the action that will be performed. <br>
---* return The action that will be performed.
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionMoveInL:action() end
---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionMoveInL:easeActionWithAction(action) end
---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionMoveInL object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionMoveInL@ TransitionMoveInL#TransitionMoveInL ret (return value: cc.TransitionMoveInL)
function TransitionMoveInL:create(t,scene) end
---* 
---@return cc.TransitionMoveInL@ TransitionMoveInL#TransitionMoveInL self (return value: cc.TransitionMoveInL)
function TransitionMoveInL:TransitionMoveInL() end


---@class cc.TransitionMoveInR :  TransitionMoveInL
local TransitionMoveInR={ }
---@class TransitionMoveInR : cc.TransitionMoveInR
cc.TransitionMoveInR=TransitionMoveInR


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionMoveInR object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionMoveInR@ TransitionMoveInR#TransitionMoveInR ret (return value: cc.TransitionMoveInR)
function TransitionMoveInR:create(t,scene) end
---* 
---@return cc.TransitionMoveInR@ TransitionMoveInR#TransitionMoveInR self (return value: cc.TransitionMoveInR)
function TransitionMoveInR:TransitionMoveInR() end


---@class cc.TransitionMoveInT :  TransitionMoveInL
local TransitionMoveInT={ }
---@class TransitionMoveInT : cc.TransitionMoveInT
cc.TransitionMoveInT=TransitionMoveInT


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionMoveInT object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionMoveInT@ TransitionMoveInT#TransitionMoveInT ret (return value: cc.TransitionMoveInT)
function TransitionMoveInT:create(t,scene) end
---* 
---@return cc.TransitionMoveInT@ TransitionMoveInT#TransitionMoveInT self (return value: cc.TransitionMoveInT)
function TransitionMoveInT:TransitionMoveInT() end


---@class cc.TransitionPageTurn :  TransitionScene
local TransitionPageTurn={ }
---@class TransitionPageTurn : cc.TransitionPageTurn
cc.TransitionPageTurn=TransitionPageTurn


---*  Returns the action that will be performed with size.<br>
---* param vector A given size.<br>
---* return The action that will be performed.
---@param vector size_table@ #size_table vector
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionPageTurn:actionWithSize(vector) end
---* Creates a base transition with duration and incoming scene.<br>
---* If back is true then the effect is reversed to appear as if the incoming<br>
---* scene is being turned from left over the outgoing scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* param backwards If back is true then the effect is reversed to appear as if the incoming scene is being turned from left over the outgoing scene.<br>
---* return True if initialize success.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@param backwards boolean@ #bool backwards
---@return boolean@ bool#bool ret (return value: bool)
function TransitionPageTurn:initWithDuration(t,scene,backwards) end
---* Creates a base transition with duration and incoming scene.<br>
---* If back is true then the effect is reversed to appear as if the incoming<br>
---* scene is being turned from left over the outgoing scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* param backwards If back is true then the effect is reversed to appear as if the incoming scene is being turned from left over the outgoing scene.<br>
---* return An autoreleased TransitionPageTurn object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@param backwards boolean@ #bool backwards
---@return cc.TransitionPageTurn@ TransitionPageTurn#TransitionPageTurn ret (return value: cc.TransitionPageTurn)
function TransitionPageTurn:create(t,scene,backwards) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.TransitionPageTurn@ TransitionPageTurn#TransitionPageTurn self (return value: cc.TransitionPageTurn)
function TransitionPageTurn:draw(renderer,transform,flags) end
---* js ctor
---@return cc.TransitionPageTurn@ TransitionPageTurn#TransitionPageTurn self (return value: cc.TransitionPageTurn)
function TransitionPageTurn:TransitionPageTurn() end


---@class cc.TransitionProgress :  TransitionScene
local TransitionProgress={ }
---@class TransitionProgress : cc.TransitionProgress
cc.TransitionProgress=TransitionProgress


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return An autoreleased TransitionProgress object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionProgress@ TransitionProgress#TransitionProgress ret (return value: cc.TransitionProgress)
function TransitionProgress:create(t,scene) end
---* 
---@return cc.TransitionProgress@ TransitionProgress#TransitionProgress self (return value: cc.TransitionProgress)
function TransitionProgress:TransitionProgress() end


---@class cc.TransitionProgressHorizontal :  TransitionProgress
local TransitionProgressHorizontal={ }
---@class TransitionProgressHorizontal : cc.TransitionProgressHorizontal
cc.TransitionProgressHorizontal=TransitionProgressHorizontal


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return An autoreleased TransitionProgressHorizontal object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionProgressHorizontal@ TransitionProgressHorizontal#TransitionProgressHorizontal ret (return value: cc.TransitionProgressHorizontal)
function TransitionProgressHorizontal:create(t,scene) end
---* js ctor
---@return cc.TransitionProgressHorizontal@ TransitionProgressHorizontal#TransitionProgressHorizontal self (return value: cc.TransitionProgressHorizontal)
function TransitionProgressHorizontal:TransitionProgressHorizontal() end


---@class cc.TransitionProgressInOut :  TransitionProgress
local TransitionProgressInOut={ }
---@class TransitionProgressInOut : cc.TransitionProgressInOut
cc.TransitionProgressInOut=TransitionProgressInOut


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return An autoreleased TransitionProgressInOut object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionProgressInOut@ TransitionProgressInOut#TransitionProgressInOut ret (return value: cc.TransitionProgressInOut)
function TransitionProgressInOut:create(t,scene) end
---* js ctor
---@return cc.TransitionProgressInOut@ TransitionProgressInOut#TransitionProgressInOut self (return value: cc.TransitionProgressInOut)
function TransitionProgressInOut:TransitionProgressInOut() end


---@class cc.TransitionProgressOutIn :  TransitionProgress
local TransitionProgressOutIn={ }
---@class TransitionProgressOutIn : cc.TransitionProgressOutIn
cc.TransitionProgressOutIn=TransitionProgressOutIn


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return An autoreleased TransitionProgressOutIn object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionProgressOutIn@ TransitionProgressOutIn#TransitionProgressOutIn ret (return value: cc.TransitionProgressOutIn)
function TransitionProgressOutIn:create(t,scene) end
---* js ctor
---@return cc.TransitionProgressOutIn@ TransitionProgressOutIn#TransitionProgressOutIn self (return value: cc.TransitionProgressOutIn)
function TransitionProgressOutIn:TransitionProgressOutIn() end


---@class cc.TransitionProgressRadialCCW :  TransitionProgress
local TransitionProgressRadialCCW={ }
---@class TransitionProgressRadialCCW : cc.TransitionProgressRadialCCW
cc.TransitionProgressRadialCCW=TransitionProgressRadialCCW


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return An autoreleased TransitionProgressRadialCCW object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionProgressRadialCCW@ TransitionProgressRadialCCW#TransitionProgressRadialCCW ret (return value: cc.TransitionProgressRadialCCW)
function TransitionProgressRadialCCW:create(t,scene) end
---* js ctor
---@return cc.TransitionProgressRadialCCW@ TransitionProgressRadialCCW#TransitionProgressRadialCCW self (return value: cc.TransitionProgressRadialCCW)
function TransitionProgressRadialCCW:TransitionProgressRadialCCW() end


---@class cc.TransitionProgressRadialCW :  TransitionProgress
local TransitionProgressRadialCW={ }
---@class TransitionProgressRadialCW : cc.TransitionProgressRadialCW
cc.TransitionProgressRadialCW=TransitionProgressRadialCW


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return An autoreleased TransitionProgressRadialCW object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionProgressRadialCW@ TransitionProgressRadialCW#TransitionProgressRadialCW ret (return value: cc.TransitionProgressRadialCW)
function TransitionProgressRadialCW:create(t,scene) end
---* js ctor
---@return cc.TransitionProgressRadialCW@ TransitionProgressRadialCW#TransitionProgressRadialCW self (return value: cc.TransitionProgressRadialCW)
function TransitionProgressRadialCW:TransitionProgressRadialCW() end


---@class cc.TransitionProgressVertical :  TransitionProgress
local TransitionProgressVertical={ }
---@class TransitionProgressVertical : cc.TransitionProgressVertical
cc.TransitionProgressVertical=TransitionProgressVertical


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return An autoreleased TransitionProgressVertical object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionProgressVertical@ TransitionProgressVertical#TransitionProgressVertical ret (return value: cc.TransitionProgressVertical)
function TransitionProgressVertical:create(t,scene) end
---* js ctor
---@return cc.TransitionProgressVertical@ TransitionProgressVertical#TransitionProgressVertical self (return value: cc.TransitionProgressVertical)
function TransitionProgressVertical:TransitionProgressVertical() end


---@class cc.TransitionRotoZoom :  TransitionScene
local TransitionRotoZoom={ }
---@class TransitionRotoZoom : cc.TransitionRotoZoom
cc.TransitionRotoZoom=TransitionRotoZoom


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionRotoZoom object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionRotoZoom@ TransitionRotoZoom#TransitionRotoZoom ret (return value: cc.TransitionRotoZoom)
function TransitionRotoZoom:create(t,scene) end
---* 
---@return cc.TransitionRotoZoom@ TransitionRotoZoom#TransitionRotoZoom self (return value: cc.TransitionRotoZoom)
function TransitionRotoZoom:TransitionRotoZoom() end


---@class cc.TransitionScene :  Scene
local TransitionScene={ }
---@class TransitionScene : cc.TransitionScene
cc.TransitionScene=TransitionScene


---* 
---@return cc.Scene@ Scene#Scene ret (return value: cc.Scene)
function TransitionScene:getInScene() end
---*  Called after the transition finishes.
---@return cc.TransitionScene@ TransitionScene#TransitionScene self (return value: cc.TransitionScene)
function TransitionScene:finish() end
---*  initializes a transition with duration and incoming scene 
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return boolean@ bool#bool ret (return value: bool)
function TransitionScene:initWithDuration(t,scene) end
---* 
---@return float@ float#float ret (return value: float)
function TransitionScene:getDuration() end
---*  Used by some transitions to hide the outer scene.
---@return cc.TransitionScene@ TransitionScene#TransitionScene self (return value: cc.TransitionScene)
function TransitionScene:hideOutShowIn() end
---*  Creates a base transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionScene object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionScene@ TransitionScene#TransitionScene ret (return value: cc.TransitionScene)
function TransitionScene:create(t,scene) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.TransitionScene@ TransitionScene#TransitionScene self (return value: cc.TransitionScene)
function TransitionScene:draw(renderer,transform,flags) end
---* 
---@return cc.TransitionScene@ TransitionScene#TransitionScene self (return value: cc.TransitionScene)
function TransitionScene:cleanup() end
---* 
---@return cc.TransitionScene@ TransitionScene#TransitionScene self (return value: cc.TransitionScene)
function TransitionScene:TransitionScene() end


---@class cc.TransitionSceneOriented :  TransitionScene
local TransitionSceneOriented={ }
---@class TransitionSceneOriented : cc.TransitionSceneOriented
cc.TransitionSceneOriented=TransitionSceneOriented


---*  initializes a transition with duration and incoming scene 
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@param orientation int@ #int orientation
---@return boolean@ bool#bool ret (return value: bool)
function TransitionSceneOriented:initWithDuration(t,scene,orientation) end
---*  Creates a transition with duration, incoming scene and orientation.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* param orientation A given orientation: LeftOver, RightOver, UpOver, DownOver.<br>
---* return A autoreleased TransitionSceneOriented object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@param orientation int@ #int orientation
---@return cc.TransitionSceneOriented@ TransitionSceneOriented#TransitionSceneOriented ret (return value: cc.TransitionSceneOriented)
function TransitionSceneOriented:create(t,scene,orientation) end
---* 
---@return cc.TransitionSceneOriented@ TransitionSceneOriented#TransitionSceneOriented self (return value: cc.TransitionSceneOriented)
function TransitionSceneOriented:TransitionSceneOriented() end


---@class cc.TransitionShrinkGrow :  TransitionScene@TransitionEaseScene
local TransitionShrinkGrow={ }
---@class TransitionShrinkGrow : cc.TransitionShrinkGrow
cc.TransitionShrinkGrow=TransitionShrinkGrow


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionShrinkGrow:easeActionWithAction(action) end
---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionShrinkGrow object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionShrinkGrow@ TransitionShrinkGrow#TransitionShrinkGrow ret (return value: cc.TransitionShrinkGrow)
function TransitionShrinkGrow:create(t,scene) end
---* 
---@return cc.TransitionShrinkGrow@ TransitionShrinkGrow#TransitionShrinkGrow self (return value: cc.TransitionShrinkGrow)
function TransitionShrinkGrow:TransitionShrinkGrow() end


---@class cc.TransitionSlideInB :  TransitionSlideInL
local TransitionSlideInB={ }
---@class TransitionSlideInB : cc.TransitionSlideInB
cc.TransitionSlideInB=TransitionSlideInB


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionSlideInB object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionSlideInB@ TransitionSlideInB#TransitionSlideInB ret (return value: cc.TransitionSlideInB)
function TransitionSlideInB:create(t,scene) end
---*  returns the action that will be performed by the incoming and outgoing scene 
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSlideInB:action() end
---* 
---@return cc.TransitionSlideInB@ TransitionSlideInB#TransitionSlideInB self (return value: cc.TransitionSlideInB)
function TransitionSlideInB:TransitionSlideInB() end


---@class cc.TransitionSlideInL :  TransitionScene@TransitionEaseScene
local TransitionSlideInL={ }
---@class TransitionSlideInL : cc.TransitionSlideInL
cc.TransitionSlideInL=TransitionSlideInL


---*  Returns the action that will be performed by the incoming and outgoing scene.<br>
---* return The action that will be performed by the incoming and outgoing scene.
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSlideInL:action() end
---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSlideInL:easeActionWithAction(action) end
---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionSlideInL object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionSlideInL@ TransitionSlideInL#TransitionSlideInL ret (return value: cc.TransitionSlideInL)
function TransitionSlideInL:create(t,scene) end
---* 
---@return cc.TransitionSlideInL@ TransitionSlideInL#TransitionSlideInL self (return value: cc.TransitionSlideInL)
function TransitionSlideInL:TransitionSlideInL() end


---@class cc.TransitionSlideInR :  TransitionSlideInL
local TransitionSlideInR={ }
---@class TransitionSlideInR : cc.TransitionSlideInR
cc.TransitionSlideInR=TransitionSlideInR


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionSlideInR object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionSlideInR@ TransitionSlideInR#TransitionSlideInR ret (return value: cc.TransitionSlideInR)
function TransitionSlideInR:create(t,scene) end
---*  Returns the action that will be performed by the incoming and outgoing scene. 
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSlideInR:action() end
---* 
---@return cc.TransitionSlideInR@ TransitionSlideInR#TransitionSlideInR self (return value: cc.TransitionSlideInR)
function TransitionSlideInR:TransitionSlideInR() end


---@class cc.TransitionSlideInT :  TransitionSlideInL
local TransitionSlideInT={ }
---@class TransitionSlideInT : cc.TransitionSlideInT
cc.TransitionSlideInT=TransitionSlideInT


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionSlideInT object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionSlideInT@ TransitionSlideInT#TransitionSlideInT ret (return value: cc.TransitionSlideInT)
function TransitionSlideInT:create(t,scene) end
---*  returns the action that will be performed by the incoming and outgoing scene 
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSlideInT:action() end
---* 
---@return cc.TransitionSlideInT@ TransitionSlideInT#TransitionSlideInT self (return value: cc.TransitionSlideInT)
function TransitionSlideInT:TransitionSlideInT() end


---@class cc.TransitionSplitCols :  TransitionScene@TransitionEaseScene
local TransitionSplitCols={ }
---@class TransitionSplitCols : cc.TransitionSplitCols
cc.TransitionSplitCols=TransitionSplitCols


---*  Returns the action that will be performed.<br>
---* return The action that will be performed.
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSplitCols:action() end
---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSplitCols:easeActionWithAction(action) end
---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionSplitCols object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionSplitCols@ TransitionSplitCols#TransitionSplitCols ret (return value: cc.TransitionSplitCols)
function TransitionSplitCols:create(t,scene) end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.TransitionSplitCols@ TransitionSplitCols#TransitionSplitCols self (return value: cc.TransitionSplitCols)
function TransitionSplitCols:draw(renderer,transform,flags) end
---* 
---@return cc.TransitionSplitCols@ TransitionSplitCols#TransitionSplitCols self (return value: cc.TransitionSplitCols)
function TransitionSplitCols:TransitionSplitCols() end


---@class cc.TransitionSplitRows :  TransitionSplitCols
local TransitionSplitRows={ }
---@class TransitionSplitRows : cc.TransitionSplitRows
cc.TransitionSplitRows=TransitionSplitRows


---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionSplitRows object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionSplitRows@ TransitionSplitRows#TransitionSplitRows ret (return value: cc.TransitionSplitRows)
function TransitionSplitRows:create(t,scene) end
---* 
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionSplitRows:action() end
---* 
---@return cc.TransitionSplitRows@ TransitionSplitRows#TransitionSplitRows self (return value: cc.TransitionSplitRows)
function TransitionSplitRows:TransitionSplitRows() end


---@class cc.TransitionTurnOffTiles :  TransitionScene@TransitionEaseScene
local TransitionTurnOffTiles={ }
---@class TransitionTurnOffTiles : cc.TransitionTurnOffTiles
cc.TransitionTurnOffTiles=TransitionTurnOffTiles


---* 
---@param action cc.ActionInterval@ #cc.ActionInterval action
---@return cc.ActionInterval@ ActionInterval#ActionInterval ret (return value: cc.ActionInterval)
function TransitionTurnOffTiles:easeActionWithAction(action) end
---*  Creates a transition with duration and incoming scene.<br>
---* param t Duration time, in seconds.<br>
---* param scene A given scene.<br>
---* return A autoreleased TransitionTurnOffTiles object.
---@param t float@ #float t
---@param scene cc.Scene@ #cc.Scene scene
---@return cc.TransitionTurnOffTiles@ TransitionTurnOffTiles#TransitionTurnOffTiles ret (return value: cc.TransitionTurnOffTiles)
function TransitionTurnOffTiles:create(t,scene) end
---* js NA
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return cc.TransitionTurnOffTiles@ TransitionTurnOffTiles#TransitionTurnOffTiles self (return value: cc.TransitionTurnOffTiles)
function TransitionTurnOffTiles:draw(renderer,transform,flags) end
---* 
---@return cc.TransitionTurnOffTiles@ TransitionTurnOffTiles#TransitionTurnOffTiles self (return value: cc.TransitionTurnOffTiles)
function TransitionTurnOffTiles:TransitionTurnOffTiles() end


---@class cc.TransitionZoomFlipAngular :  TransitionSceneOriented
local TransitionZoomFlipAngular={ }
---@class TransitionZoomFlipAngular : cc.TransitionZoomFlipAngular
cc.TransitionZoomFlipAngular=TransitionZoomFlipAngular


---@param t float@ #float t
---@param s cc.Scene@ #cc.Scene s
---@param o int@ #int o
---@return cc.TransitionZoomFlipAngular@ TransitionZoomFlipAngular#TransitionZoomFlipAngular ret (return value: cc.TransitionZoomFlipAngular)
---@overload fun(t:float,s:cc.Scene):cc.TransitionZoomFlipAngular
---@overload fun(t:float,s:cc.Scene,o:int):cc.TransitionZoomFlipAngular
function TransitionZoomFlipAngular:create(t,s,o) end
---* 
---@return cc.TransitionZoomFlipAngular@ TransitionZoomFlipAngular#TransitionZoomFlipAngular self (return value: cc.TransitionZoomFlipAngular)
function TransitionZoomFlipAngular:TransitionZoomFlipAngular() end


---@class cc.TransitionZoomFlipX :  TransitionSceneOriented
local TransitionZoomFlipX={ }
---@class TransitionZoomFlipX : cc.TransitionZoomFlipX
cc.TransitionZoomFlipX=TransitionZoomFlipX


---@param t float@ #float t
---@param s cc.Scene@ #cc.Scene s
---@param o int@ #int o
---@return cc.TransitionZoomFlipX@ TransitionZoomFlipX#TransitionZoomFlipX ret (return value: cc.TransitionZoomFlipX)
---@overload fun(t:float,s:cc.Scene):cc.TransitionZoomFlipX
---@overload fun(t:float,s:cc.Scene,o:int):cc.TransitionZoomFlipX
function TransitionZoomFlipX:create(t,s,o) end
---* 
---@return cc.TransitionZoomFlipX@ TransitionZoomFlipX#TransitionZoomFlipX self (return value: cc.TransitionZoomFlipX)
function TransitionZoomFlipX:TransitionZoomFlipX() end


---@class cc.TransitionZoomFlipY :  TransitionSceneOriented
local TransitionZoomFlipY={ }
---@class TransitionZoomFlipY : cc.TransitionZoomFlipY
cc.TransitionZoomFlipY=TransitionZoomFlipY


---@param t float@ #float t
---@param s cc.Scene@ #cc.Scene s
---@param o int@ #int o
---@return cc.TransitionZoomFlipY@ TransitionZoomFlipY#TransitionZoomFlipY ret (return value: cc.TransitionZoomFlipY)
---@overload fun(t:float,s:cc.Scene):cc.TransitionZoomFlipY
---@overload fun(t:float,s:cc.Scene,o:int):cc.TransitionZoomFlipY
function TransitionZoomFlipY:create(t,s,o) end
---* 
---@return cc.TransitionZoomFlipY@ TransitionZoomFlipY#TransitionZoomFlipY self (return value: cc.TransitionZoomFlipY)
function TransitionZoomFlipY:TransitionZoomFlipY() end


---@class cc.TurnOffTiles :  TiledGrid3DAction
local TurnOffTiles={ }
---@class TurnOffTiles : cc.TurnOffTiles
cc.TurnOffTiles=TurnOffTiles


---* brief Show the tile at specified position.<br>
---* param pos The position index of the tile should be shown.
---@param pos vec2_table@ #vec2_table pos
---@return cc.TurnOffTiles@ TurnOffTiles#TurnOffTiles self (return value: cc.TurnOffTiles)
function TurnOffTiles:turnOnTile(pos) end
---* brief Hide the tile at specified position.<br>
---* param pos The position index of the tile should be hide.
---@param pos vec2_table@ #vec2_table pos
---@return cc.TurnOffTiles@ TurnOffTiles#TurnOffTiles self (return value: cc.TurnOffTiles)
function TurnOffTiles:turnOffTile(pos) end
---* brief Initializes the action with grid size, random seed and duration.<br>
---* param duration Specify the duration of the TurnOffTiles action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param seed Specify the random seed.<br>
---* return If the Initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param seed unsigned_int@ #unsigned int seed
---@return boolean@ bool#bool ret (return value: bool)
function TurnOffTiles:initWithDuration(duration,gridSize,seed) end
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param seed unsigned_int@ #unsigned int seed
---@return cc.TurnOffTiles@ TurnOffTiles#TurnOffTiles ret (return value: cc.TurnOffTiles)
---@overload fun(duration:float,gridSize:size_table,seed:unsigned_int):cc.TurnOffTiles
---@overload fun(duration:float,gridSize:size_table):cc.TurnOffTiles
function TurnOffTiles:create(duration,gridSize,seed) end
---* 
---@param target cc.Node@ #cc.Node target
---@return cc.TurnOffTiles@ TurnOffTiles#TurnOffTiles self (return value: cc.TurnOffTiles)
function TurnOffTiles:startWithTarget(target) end
---* 
---@return cc.TurnOffTiles@ TurnOffTiles#TurnOffTiles ret (return value: cc.TurnOffTiles)
function TurnOffTiles:clone() end
---* 
---@param time float@ #float time
---@return cc.TurnOffTiles@ TurnOffTiles#TurnOffTiles self (return value: cc.TurnOffTiles)
function TurnOffTiles:update(time) end
---* 
---@return cc.TurnOffTiles@ TurnOffTiles#TurnOffTiles self (return value: cc.TurnOffTiles)
function TurnOffTiles:TurnOffTiles() end


---@class ccs.Tween :  ProcessBase
local Tween={ }
---@class Tween : ccs.Tween
ccs.Tween=Tween


---* 
---@return ccs.ArmatureAnimation@ ArmatureAnimation#ArmatureAnimation ret (return value: ccs.ArmatureAnimation)
function Tween:getAnimation() end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.Tween@ Tween#Tween self (return value: ccs.Tween)
function Tween:gotoAndPause(frameIndex) end
---* Start the Process<br>
---* param  movementBoneData  the MovementBoneData include all FrameData<br>
---* param  durationTo the number of frames changing to this animation needs.<br>
---* param  durationTween  the number of frames this animation actual last.<br>
---* param  loop   whether the animation is loop<br>
---* loop < 0 : use the value from MovementData get from Action Editor<br>
---* loop = 0 : this animation is not loop<br>
---* loop > 0 : this animation is loop<br>
---* param  tweenEasing    tween easing is used for calculate easing effect<br>
---* TWEEN_EASING_MAX : use the value from MovementData get from Action Editor<br>
---* -1 : fade out<br>
---* 0  : line<br>
---* 1  : fade in<br>
---* 2  : fade in and out
---@param movementBoneData ccs.MovementBoneData@ #ccs.MovementBoneData movementBoneData
---@param durationTo int@ #int durationTo
---@param durationTween int@ #int durationTween
---@param loop int@ #int loop
---@param tweenEasing int@ #int tweenEasing
---@return ccs.Tween@ Tween#Tween self (return value: ccs.Tween)
function Tween:play(movementBoneData,durationTo,durationTween,loop,tweenEasing) end
---* 
---@param frameIndex int@ #int frameIndex
---@return ccs.Tween@ Tween#Tween self (return value: ccs.Tween)
function Tween:gotoAndPlay(frameIndex) end
---* Init with a Bone<br>
---* param bone the Bone Tween will bind to
---@param bone ccs.Bone@ #ccs.Bone bone
---@return boolean@ bool#bool ret (return value: bool)
function Tween:init(bone) end
---* 
---@param animation ccs.ArmatureAnimation@ #ccs.ArmatureAnimation animation
---@return ccs.Tween@ Tween#Tween self (return value: ccs.Tween)
function Tween:setAnimation(animation) end
---* Create with a Bone<br>
---* param bone the Bone Tween will bind to
---@param bone ccs.Bone@ #ccs.Bone bone
---@return ccs.Tween@ Tween#Tween ret (return value: ccs.Tween)
function Tween:create(bone) end
---* 
---@return ccs.Tween@ Tween#Tween self (return value: ccs.Tween)
function Tween:Tween() end


---@class cc.Twirl :  Grid3DAction
local Twirl={ }
---@class Twirl : cc.Twirl
cc.Twirl=Twirl


---* brief Set the amplitude rate of the effect.<br>
---* param amplitudeRate The value of amplitude rate will be set.
---@param amplitudeRate float@ #float amplitudeRate
---@return cc.Twirl@ Twirl#Twirl self (return value: cc.Twirl)
function Twirl:setAmplitudeRate(amplitudeRate) end
---* brief Initializes the action with center position, number of twirls, amplitude, a grid size and duration.<br>
---* param duration Specify the duration of the Twirl action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param position Specify the center position of the twirl action.<br>
---* param twirls Specify the twirls count of the Twirl action.<br>
---* param amplitude Specify the amplitude of the Twirl action.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param position vec2_table@ #vec2_table position
---@param twirls unsigned_int@ #unsigned int twirls
---@param amplitude float@ #float amplitude
---@return boolean@ bool#bool ret (return value: bool)
function Twirl:initWithDuration(duration,gridSize,position,twirls,amplitude) end
---* brief Get the amplitude rate of the effect.<br>
---* return Return the amplitude rate of the effect.
---@return float@ float#float ret (return value: float)
function Twirl:getAmplitudeRate() end
---* brief Set the amplitude to the effect.<br>
---* param amplitude The value of amplitude will be set.
---@param amplitude float@ #float amplitude
---@return cc.Twirl@ Twirl#Twirl self (return value: cc.Twirl)
function Twirl:setAmplitude(amplitude) end
---* brief Get the amplitude of the effect.<br>
---* return Return the amplitude of the effect.
---@return float@ float#float ret (return value: float)
function Twirl:getAmplitude() end
---* brief Set the center position of twirl action.<br>
---* param position The center position of twirl action will be set.
---@param position vec2_table@ #vec2_table position
---@return cc.Twirl@ Twirl#Twirl self (return value: cc.Twirl)
function Twirl:setPosition(position) end
---* brief Get the center position of twirl action.<br>
---* return The center position of twirl action.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Twirl:getPosition() end
---* brief Create the action with center position, number of twirls, amplitude, a grid size and duration.<br>
---* param duration Specify the duration of the Twirl action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param position Specify the center position of the twirl action.<br>
---* param twirls Specify the twirls count of the Twirl action.<br>
---* param amplitude Specify the amplitude of the Twirl action.<br>
---* return If the creation success, return a pointer of Twirl action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param position vec2_table@ #vec2_table position
---@param twirls unsigned_int@ #unsigned int twirls
---@param amplitude float@ #float amplitude
---@return cc.Twirl@ Twirl#Twirl ret (return value: cc.Twirl)
function Twirl:create(duration,gridSize,position,twirls,amplitude) end
---* 
---@return cc.Twirl@ Twirl#Twirl ret (return value: cc.Twirl)
function Twirl:clone() end
---* 
---@param time float@ #float time
---@return cc.Twirl@ Twirl#Twirl self (return value: cc.Twirl)
function Twirl:update(time) end
---* 
---@return cc.Twirl@ Twirl#Twirl self (return value: cc.Twirl)
function Twirl:Twirl() end


---@class cc.UserDefault 
local UserDefault={ }
---@class UserDefault : cc.UserDefault
cc.UserDefault=UserDefault


---* Set integer value by key.<br>
---* param key The key to set.<br>
---* param value A integer value to set to the key.<br>
---* js NA
---@param key char@ #char key
---@param value int@ #int value
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:setIntegerForKey(key,value) end
---* delete any value by key,<br>
---* param key The key to delete value.<br>
---* js NA
---@param key char@ #char key
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:deleteValueForKey(key) end
---@param key char@ #char key
---@param defaultValue float@ #float defaultValue
---@return float@ float#float ret (return value: float)
---@overload fun(key:char,defaultValue:float):float
---@overload fun(key:char):float
function UserDefault:getFloatForKey(key,defaultValue) end
---@param key char@ #char key
---@param defaultValue boolean@ #bool defaultValue
---@return boolean@ bool#bool ret (return value: bool)
---@overload fun(key:char,defaultValue:boolean):boolean
---@overload fun(key:char):boolean
function UserDefault:getBoolForKey(key,defaultValue) end
---* Set double value by key.<br>
---* param key The key to set.<br>
---* param value A double value to set to the key.<br>
---* js NA
---@param key char@ #char key
---@param value double@ #double value
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:setDoubleForKey(key,value) end
---* Set float value by key.<br>
---* param key The key to set.<br>
---* param value A float value to set to the key.<br>
---* js NA
---@param key char@ #char key
---@param value float@ #float value
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:setFloatForKey(key,value) end
---@param key char@ #char key
---@param defaultValue string@ #string defaultValue
---@return string@ string#string ret (return value: string)
---@overload fun(key:char,defaultValue:string):string
---@overload fun(key:char):string
function UserDefault:getStringForKey(key,defaultValue) end
---* Set string value by key.<br>
---* param key The key to set.<br>
---* param value A string value to set to the key.<br>
---* js NA
---@param key char@ #char key
---@param value string@ #string value
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:setStringForKey(key,value) end
---* You should invoke this function to save values set by setXXXForKey().<br>
---* js NA
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:flush() end
---@param key char@ #char key
---@param defaultValue int@ #int defaultValue
---@return int@ int#int ret (return value: int)
---@overload fun(key:char,defaultValue:int):int
---@overload fun(key:char):int
function UserDefault:getIntegerForKey(key,defaultValue) end
---@param key char@ #char key
---@param defaultValue double@ #double defaultValue
---@return double@ double#double ret (return value: double)
---@overload fun(key:char,defaultValue:double):double
---@overload fun(key:char):double
function UserDefault:getDoubleForKey(key,defaultValue) end
---* Set bool value by key.<br>
---* param key The key to set.<br>
---* param value A bool value to set to the key.<br>
---* js NA
---@param key char@ #char key
---@param value boolean@ #bool value
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:setBoolForKey(key,value) end
---* js NA
---@return cc.UserDefault@ UserDefault#UserDefault self (return value: cc.UserDefault)
function UserDefault:destroyInstance() end
---*  All supported platforms other iOS & Android use xml file to save values. This function is return the file path of the xml path.<br>
---* js NA
---@return string@ string#string ret (return value: string)
function UserDefault:getXMLFilePath() end
---*  All supported platforms other iOS & Android and CC_PLATFORM_WINRT use xml file to save values. This function checks whether the xml file exists or not.<br>
---* return True if the xml file exists, false if not.<br>
---* js NA
---@return boolean@ bool#bool ret (return value: bool)
function UserDefault:isXMLFileExist() end


---@class ccui.VBox :  Layout
local VBox={ }
---@class VBox : ccui.VBox
ccui.VBox=VBox


---* 
---@param size size_table@ #size_table size
---@return boolean@ bool#bool ret (return value: bool)
function VBox:initWithSize(size) end
---@param size size_table@ #size_table size
---@return ccui.VBox@ VBox#VBox ret (return value: ccui.VBox)
---@overload fun(size:size_table):ccui.VBox
---@overload fun():ccui.VBox
function VBox:create(size) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function VBox:init() end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.VBox@ VBox#VBox self (return value: ccui.VBox)
function VBox:VBox() end


---@class ccexp.VideoPlayer :  Widget
local VideoPlayer={ }
---@class VideoPlayer : ccexp.VideoPlayer
ccexp.VideoPlayer=VideoPlayer


---* brief Get the local video file name.<br>
---* return The video file name.
---@return string@ string#string ret (return value: string)
function VideoPlayer:getFileName() end
---* brief Get the URL of remoting video source.<br>
---* return A remoting URL address.
---@return string@ string#string ret (return value: string)
function VideoPlayer:getURL() end
---* Starts playback.
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:play() end
---* Checks whether the VideoPlayer is set to listen user input to resume and pause the video<br>
---* return true if the videoplayer user input is set, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function VideoPlayer:isUserInputEnabled() end
---* Causes the video player to keep aspect ratio or no when displaying the video.<br>
---* param enable    Specify true to keep aspect ratio or false to scale the video until <br>
---* both dimensions fit the visible bounds of the view exactly.
---@param enable boolean@ #bool enable
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setKeepAspectRatioEnabled(enable) end
---* Stops playback.
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:stop() end
---* Causes the video player to enter or exit full-screen mode.<br>
---* param fullscreen    Specify true to enter full-screen mode or false to exit full-screen mode.
---@param fullscreen boolean@ #bool fullscreen
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setFullScreenEnabled(fullscreen) end
---* Sets a file path as a video source for VideoPlayer.
---@param videoPath string@ #string videoPath
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setFileName(videoPath) end
---* Sets a URL as a video source for VideoPlayer.
---@param _videoURL string@ #string _videoURL
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setURL(_videoURL) end
---* Set the style of the player<br>
---* param style The corresponding style
---@param style int@ #int style
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setStyle(style) end
---* Seeks to specified time position.<br>
---* param sec   The offset in seconds from the start to seek to.
---@param sec float@ #float sec
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:seekTo(sec) end
---* Indicates whether the video player keep aspect ratio when displaying the video.
---@return boolean@ bool#bool ret (return value: bool)
function VideoPlayer:isKeepAspectRatioEnabled() end
---* brief A function which will be called when video is playing.<br>
---* param event @see VideoPlayer::EventType.
---@param event int@ #int event
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:onPlayEvent(event) end
---* Indicates whether the video player is in full-screen mode.<br>
---* return True if the video player is in full-screen mode, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function VideoPlayer:isFullScreenEnabled() end
---* Checks whether the VideoPlayer is set with looping mode.<br>
---* return true if the videoplayer is set to loop, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function VideoPlayer:isLooping() end
---* Checks whether the VideoPlayer is playing.<br>
---* return True if currently playing, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function VideoPlayer:isPlaying() end
---* brief Set if playback is done in loop mode<br>
---* param looping the video will or not automatically restart at the end
---@param looping boolean@ #bool looping
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setLooping(looping) end
---* Set if the player will enable user input for basic pause and resume of video<br>
---* param enableInput If true, input will be handled for basic functionality (pause/resume)
---@param enableInput boolean@ #bool enableInput
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setUserInputEnabled(enableInput) end
---* 
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer ret (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:create() end
---* 
---@param renderer cc.Renderer@ #cc.Renderer renderer
---@param transform mat4_table@ #mat4_table transform
---@param flags unsigned_int@ #unsigned int flags
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:draw(renderer,transform,flags) end
---* Pauses playback.
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:pause() end
---* 
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:onEnter() end
---* 
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:onExit() end
---* Resumes playback.
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:resume() end
---* 
---@param visible boolean@ #bool visible
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:setVisible(visible) end
---* 
---@return ccexp.VideoPlayer@ experimental::ui::VideoPlayer#experimental::ui::VideoPlayer self (return value: cc.experimental::ui::VideoPlayer)
function VideoPlayer:VideoPlayer() end


---@class ccs.VisibleFrame :  Frame
local VisibleFrame={ }
---@class VisibleFrame : ccs.VisibleFrame
ccs.VisibleFrame=VisibleFrame


---* 
---@return boolean@ bool#bool ret (return value: bool)
function VisibleFrame:isVisible() end
---* 
---@param visible boolean@ #bool visible
---@return ccs.VisibleFrame@ VisibleFrame#VisibleFrame self (return value: ccs.VisibleFrame)
function VisibleFrame:setVisible(visible) end
---* 
---@return ccs.VisibleFrame@ VisibleFrame#VisibleFrame ret (return value: ccs.VisibleFrame)
function VisibleFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function VisibleFrame:clone() end
---* 
---@return ccs.VisibleFrame@ VisibleFrame#VisibleFrame self (return value: ccs.VisibleFrame)
function VisibleFrame:VisibleFrame() end


---@class cc.Waves :  Grid3DAction
local Waves={ }
---@class Waves : cc.Waves
cc.Waves=Waves


---* brief Set the amplitude rate of the effect.<br>
---* param amplitudeRate The value of amplitude rate will be set.
---@param amplitudeRate float@ #float amplitudeRate
---@return cc.Waves@ Waves#Waves self (return value: cc.Waves)
function Waves:setAmplitudeRate(amplitudeRate) end
---* brief Initializes the action with amplitude, horizontal sin, vertical sin, grid size, waves count and duration.<br>
---* param duration Specify the duration of the Waves action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the Waves action.<br>
---* param amplitude Specify the amplitude of the Waves action.<br>
---* param horizontal Specify whether waves on horizontal.<br>
---* param vertical Specify whether waves on vertical.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@param horizontal boolean@ #bool horizontal
---@param vertical boolean@ #bool vertical
---@return boolean@ bool#bool ret (return value: bool)
function Waves:initWithDuration(duration,gridSize,waves,amplitude,horizontal,vertical) end
---* brief Get the amplitude of the effect.<br>
---* return Return the amplitude of the effect.
---@return float@ float#float ret (return value: float)
function Waves:getAmplitude() end
---* brief Get the amplitude rate of the effect.<br>
---* return Return the amplitude rate of the effect.
---@return float@ float#float ret (return value: float)
function Waves:getAmplitudeRate() end
---* brief Set the amplitude to the effect.<br>
---* param amplitude The value of amplitude will be set.
---@param amplitude float@ #float amplitude
---@return cc.Waves@ Waves#Waves self (return value: cc.Waves)
function Waves:setAmplitude(amplitude) end
---* brief Create the action with amplitude, horizontal sin, vertical sin, grid size, waves count and duration.<br>
---* param duration Specify the duration of the Waves action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the Waves action.<br>
---* param amplitude Specify the amplitude of the Waves action.<br>
---* param horizontal Specify whether waves on horizontal.<br>
---* param vertical Specify whether waves on vertical.<br>
---* return If the creation success, return a pointer of Waves action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@param horizontal boolean@ #bool horizontal
---@param vertical boolean@ #bool vertical
---@return cc.Waves@ Waves#Waves ret (return value: cc.Waves)
function Waves:create(duration,gridSize,waves,amplitude,horizontal,vertical) end
---* 
---@return cc.Waves@ Waves#Waves ret (return value: cc.Waves)
function Waves:clone() end
---* 
---@param time float@ #float time
---@return cc.Waves@ Waves#Waves self (return value: cc.Waves)
function Waves:update(time) end
---* 
---@return cc.Waves@ Waves#Waves self (return value: cc.Waves)
function Waves:Waves() end


---@class cc.Waves3D :  Grid3DAction
local Waves3D={ }
---@class Waves3D : cc.Waves3D
cc.Waves3D=Waves3D


---* brief Set the amplitude rate of the effect.<br>
---* param amplitudeRate The value of amplitude rate will be set.
---@param amplitudeRate float@ #float amplitudeRate
---@return cc.Waves3D@ Waves3D#Waves3D self (return value: cc.Waves3D)
function Waves3D:setAmplitudeRate(amplitudeRate) end
---* brief Initializes an action with duration, grid size, waves and amplitude.<br>
---* param duration Specify the duration of the Waves3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the Waves3D action.<br>
---* param amplitude Specify the amplitude of the Waves3D action.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return boolean@ bool#bool ret (return value: bool)
function Waves3D:initWithDuration(duration,gridSize,waves,amplitude) end
---* brief Get the amplitude of the effect.<br>
---* return Return the amplitude of the effect.
---@return float@ float#float ret (return value: float)
function Waves3D:getAmplitude() end
---* brief Get the amplitude rate of the effect.<br>
---* return Return the amplitude rate of the effect.
---@return float@ float#float ret (return value: float)
function Waves3D:getAmplitudeRate() end
---* brief Set the amplitude to the effect.<br>
---* param amplitude The value of amplitude will be set.
---@param amplitude float@ #float amplitude
---@return cc.Waves3D@ Waves3D#Waves3D self (return value: cc.Waves3D)
function Waves3D:setAmplitude(amplitude) end
---* brief Create an action with duration, grid size, waves and amplitude.<br>
---* param duration Specify the duration of the Waves3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the Waves3D action.<br>
---* param amplitude Specify the amplitude of the Waves3D action.<br>
---* return If the creation success, return a pointer of Waves3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return cc.Waves3D@ Waves3D#Waves3D ret (return value: cc.Waves3D)
function Waves3D:create(duration,gridSize,waves,amplitude) end
---* 
---@return cc.Waves3D@ Waves3D#Waves3D ret (return value: cc.Waves3D)
function Waves3D:clone() end
---* 
---@param time float@ #float time
---@return cc.Waves3D@ Waves3D#Waves3D self (return value: cc.Waves3D)
function Waves3D:update(time) end
---* 
---@return cc.Waves3D@ Waves3D#Waves3D self (return value: cc.Waves3D)
function Waves3D:Waves3D() end


---@class cc.WavesTiles3D :  TiledGrid3DAction
local WavesTiles3D={ }
---@class WavesTiles3D : cc.WavesTiles3D
cc.WavesTiles3D=WavesTiles3D


---* brief Set the amplitude rate of the effect.<br>
---* param amplitudeRate The value of amplitude rate will be set.
---@param amplitudeRate float@ #float amplitudeRate
---@return cc.WavesTiles3D@ WavesTiles3D#WavesTiles3D self (return value: cc.WavesTiles3D)
function WavesTiles3D:setAmplitudeRate(amplitudeRate) end
---* brief Initializes an action with duration, grid size, waves count and amplitude.<br>
---* param duration Specify the duration of the WavesTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the WavesTiles3D action.<br>
---* param amplitude Specify the amplitude of the WavesTiles3D action.<br>
---* return If the initialization success, return true; otherwise, return false.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return boolean@ bool#bool ret (return value: bool)
function WavesTiles3D:initWithDuration(duration,gridSize,waves,amplitude) end
---* brief Get the amplitude of the effect.<br>
---* return Return the amplitude of the effect.
---@return float@ float#float ret (return value: float)
function WavesTiles3D:getAmplitude() end
---* brief Get the amplitude rate of the effect.<br>
---* return Return the amplitude rate of the effect.
---@return float@ float#float ret (return value: float)
function WavesTiles3D:getAmplitudeRate() end
---* brief Set the amplitude to the effect.<br>
---* param amplitude The value of amplitude will be set.
---@param amplitude float@ #float amplitude
---@return cc.WavesTiles3D@ WavesTiles3D#WavesTiles3D self (return value: cc.WavesTiles3D)
function WavesTiles3D:setAmplitude(amplitude) end
---* brief Create the action with a number of waves, the waves amplitude, the grid size and the duration.<br>
---* param duration Specify the duration of the WavesTiles3D action. It's a value in seconds.<br>
---* param gridSize Specify the size of the grid.<br>
---* param waves Specify the waves count of the WavesTiles3D action.<br>
---* param amplitude Specify the amplitude of the WavesTiles3D action.<br>
---* return If the creation success, return a pointer of WavesTiles3D action; otherwise, return nil.
---@param duration float@ #float duration
---@param gridSize size_table@ #size_table gridSize
---@param waves unsigned_int@ #unsigned int waves
---@param amplitude float@ #float amplitude
---@return cc.WavesTiles3D@ WavesTiles3D#WavesTiles3D ret (return value: cc.WavesTiles3D)
function WavesTiles3D:create(duration,gridSize,waves,amplitude) end
---* 
---@return cc.WavesTiles3D@ WavesTiles3D#WavesTiles3D ret (return value: cc.WavesTiles3D)
function WavesTiles3D:clone() end
---* 
---@param time float@ #float time
---@return cc.WavesTiles3D@ WavesTiles3D#WavesTiles3D self (return value: cc.WavesTiles3D)
function WavesTiles3D:update(time) end
---* 
---@return cc.WavesTiles3D@ WavesTiles3D#WavesTiles3D self (return value: cc.WavesTiles3D)
function WavesTiles3D:WavesTiles3D() end


---@class ccexp.WebView :  Widget
local WebView={ }
---@class WebView : ccexp.WebView
ccexp.WebView=WebView


---* SetOpacity of webview.
---@param opacity float@ #float opacity
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:setOpacityWebView(opacity) end
---* Gets whether this WebView has a back history item.<br>
---* return WebView has a back history item.
---@return boolean@ bool#bool ret (return value: bool)
function WebView:canGoBack() end
---* Sets the main page content and base URL.<br>
---* param string The content for the main page.<br>
---* param baseURL The base URL for the content.
---@param string string@ #string string
---@param baseURL string@ #string baseURL
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:loadHTMLString(string,baseURL) end
---* Goes forward in the history.
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:goForward() end
---* Goes back in the history.
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:goBack() end
---* Set WebView should support zooming. The default value is false.
---@param scalesPageToFit boolean@ #bool scalesPageToFit
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:setScalesPageToFit(scalesPageToFit) end
---* Loads the given fileName.<br>
---* param fileName Content fileName.
---@param fileName string@ #string fileName
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:loadFile(fileName) end
---@param url string@ #string url
---@param cleanCachedData boolean@ #bool cleanCachedData
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
---@overload fun(url:string,cleanCachedData:boolean):ccexp.WebView
---@overload fun(url:string):ccexp.WebView
function WebView:loadURL(url,cleanCachedData) end
---* Set whether the webview bounces at end of scroll of WebView.
---@param bounce boolean@ #bool bounce
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:setBounces(bounce) end
---* Evaluates JavaScript in the context of the currently displayed page.
---@param js string@ #string js
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:evaluateJS(js) end
---* set the background transparent
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:setBackgroundTransparent() end
---* Get the Javascript callback.
---@return function@ function#function ret (return value: function)
function WebView:getOnJSCallback() end
---* Gets whether this WebView has a forward history item.<br>
---* return WebView has a forward history item.
---@return boolean@ bool#bool ret (return value: bool)
function WebView:canGoForward() end
---* Stops the current load.
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:stopLoading() end
---* getOpacity of webview.
---@return float@ float#float ret (return value: float)
function WebView:getOpacityWebView() end
---* Reloads the current URL.
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:reload() end
---* Set javascript interface scheme.<br>
---* see WebView::setOnJSCallback()
---@param scheme string@ #string scheme
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:setJavascriptInterfaceScheme(scheme) end
---* Allocates and initializes a WebView.
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView ret (return value: cc.experimental::ui::WebView)
function WebView:create() end
---* 
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:onEnter() end
---* Toggle visibility of WebView.
---@param visible boolean@ #bool visible
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:setVisible(visible) end
---* 
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:onExit() end
---* Default constructor.
---@return ccexp.WebView@ experimental::ui::WebView#experimental::ui::WebView self (return value: cc.experimental::ui::WebView)
function WebView:WebView() end


---@class ccui.Widget :  ProtectedNode@LayoutParameterProtocol
local Widget={ }
---@class Widget : ccui.Widget
ccui.Widget=Widget


---* Toggle layout component enable.<br>
---* param enable Layout Component of a widget
---@param enable boolean@ #bool enable
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setLayoutComponentEnabled(enable) end
---* Changes the percent that is widget's percent size<br>
---* param percent that is widget's percent size
---@param percent vec2_table@ #vec2_table percent
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setSizePercent(percent) end
---* Get the user defined widget size.<br>
---* return User defined size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Widget:getCustomSize() end
---* Gets the left boundary position of this widget in parent's coordination system.<br>
---* return The left boundary position of this widget.
---@return float@ float#float ret (return value: float)
function Widget:getLeftBoundary() end
---* Sets whether the widget should be flipped horizontally or not.<br>
---* param flippedX true if the widget should be flipped horizontally, false otherwise.
---@param flippedX boolean@ #bool flippedX
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setFlippedX(flippedX) end
---* Set callback name.<br>
---* param callbackName A string representation of callback name.
---@param callbackName string@ #string callbackName
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setCallbackName(callbackName) end
---* Gets the inner Renderer node of widget.<br>
---* For example, a button's Virtual Renderer is it's texture renderer.<br>
---* return Node pointer.
---@return cc.Node@ Node#Node ret (return value: cc.Node)
function Widget:getVirtualRenderer() end
---* brief Allow widget touch events to propagate to its parents. Set false will disable propagation<br>
---* param isPropagate  True to allow propagation, false otherwise.<br>
---* since v3.3
---@param isPropagate boolean@ #bool isPropagate
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setPropagateTouchEvents(isPropagate) end
---* Query whether unify size enable state. <br>
---* return true represent the widget use Unify Size, false represent the widget couldn't use Unify Size
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isUnifySizeEnabled() end
---* Get size percent of widget.<br>
---* return Percent size.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Widget:getSizePercent() end
---* Set the percent(x,y) of the widget in OpenGL coordinates<br>
---* param percent  The percent (x,y) of the widget in OpenGL coordinates
---@param percent vec2_table@ #vec2_table percent
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setPositionPercent(percent) end
---* Toggle widget swallow touch option.<br>
---* brief Specify widget to swallow touches or not<br>
---* param swallow True to swallow touch, false otherwise.<br>
---* since v3.3
---@param swallow boolean@ #bool swallow
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setSwallowTouches(swallow) end
---* Get the content size of widget.<br>
---* warning This API exists mainly for keeping back compatibility.<br>
---* return 
---@return size_table@ size_table#size_table ret (return value: size_table)
function Widget:getLayoutSize() end
---* Sets whether the widget is highlighted<br>
---* The default value is false, a widget is default to not highlighted<br>
---* param highlight   true if the widget is highlighted, false if the widget is not highlighted.
---@param highlight boolean@ #bool highlight
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setHighlighted(highlight) end
---* Changes the position type of the widget<br>
---* see `PositionType`<br>
---* param type  the position type of widget
---@param type int@ #int type
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setPositionType(type) end
---* Query whether the widget ignores user defined content size or not<br>
---* return True means ignore user defined content size, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isIgnoreContentAdaptWithSize() end
---* Get the virtual renderer's size<br>
---* return Widget virtual renderer size.
---@return size_table@ size_table#size_table ret (return value: size_table)
function Widget:getVirtualRendererSize() end
---* Determines if the widget is highlighted<br>
---* return true if the widget is highlighted, false if the widget is not highlighted.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isHighlighted() end
---* Gets LayoutParameter of widget.<br>
---* see LayoutParameter<br>
---* return LayoutParameter
---@return ccui.LayoutParameter@ LayoutParameter#LayoutParameter ret (return value: ccui.LayoutParameter)
function Widget:getLayoutParameter() end
---* Gets the position type of the widget<br>
---* see `PositionType`<br>
---* return type  the position type of widget
---@return int@ int#int ret (return value: int)
function Widget:getPositionType() end
---* Gets the top boundary position of this widget in parent's coordination system.<br>
---* return The top boundary position of this widget.
---@return float@ float#float ret (return value: float)
function Widget:getTopBoundary() end
---* Toggle whether ignore user defined content size for widget.<br>
---* Set true will ignore user defined content size which means <br>
---* the widget size is always equal to the return value of `getVirtualRendererSize`.<br>
---* param ignore set member variable _ignoreSize to ignore
---@param ignore boolean@ #bool ignore
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:ignoreContentAdaptWithSize(ignore) end
---* When a widget is in a layout, you could call this method to get the next focused widget within a specified direction. <br>
---* If the widget is not in a layout, it will return itself<br>
---* param direction the direction to look for the next focused widget in a layout<br>
---* param current  the current focused widget<br>
---* return the next focused widget in a layout
---@param direction int@ #int direction
---@param current ccui.Widget@ #ccui.Widget current
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Widget:findNextFocusedWidget(direction,current) end
---* Determines if the widget is enabled or not.<br>
---* return true if the widget is enabled, false if the widget is disabled.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isEnabled() end
---* Query whether widget is focused or not.<br>
---* return  whether the widget is focused or not
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isFocused() end
---* Gets the touch began point of widget when widget is selected.<br>
---* return the touch began point.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Widget:getTouchBeganPosition() end
---* Determines if the widget is touch enabled<br>
---* return true if the widget is touch enabled, false if the widget is touch disabled.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isTouchEnabled() end
---* Query callback name.<br>
---* return The callback name.
---@return string@ string#string ret (return value: string)
function Widget:getCallbackName() end
---* Get the action tag.<br>
---* return Action tag.
---@return int@ int#int ret (return value: int)
function Widget:getActionTag() end
---* Gets position of widget in world space.<br>
---* return Position of widget in world space.
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Widget:getWorldPosition() end
---* Query widget's focus enable state.<br>
---* return true represent the widget could accept focus, false represent the widget couldn't accept focus
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isFocusEnabled() end
---* Toggle widget focus status.<br>
---* param focus  pass true to let the widget get focus or pass false to let the widget lose focus
---@param focus boolean@ #bool focus
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setFocused(focus) end
---* Set the tag of action.<br>
---* param tag  A integer tag value.
---@param tag int@ #int tag
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setActionTag(tag) end
---* Sets whether the widget is touch enabled.<br>
---* The default value is false, a widget is default to touch disabled.<br>
---* param enabled   True if the widget is touch enabled, false if the widget is touch disabled.
---@param enabled boolean@ #bool enabled
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setTouchEnabled(enabled) end
---* Sets whether the widget should be flipped vertically or not.<br>
---* param flippedY true if the widget should be flipped vertically, false otherwise.
---@param flippedY boolean@ #bool flippedY
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setFlippedY(flippedY) end
---* Sets whether the widget is enabled<br>
---* true if the widget is enabled, widget may be touched , false if the widget is disabled, widget cannot be touched.<br>
---* Note: If you want to change the widget's appearance  to disabled state, you should also call  `setBright(false)`.<br>
---* The default value is true, a widget is default to enable touch.<br>
---* param enabled Set to true to enable touch, false otherwise.
---@param enabled boolean@ #bool enabled
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setEnabled(enabled) end
---* Gets the right boundary position of this widget in parent's coordination system.<br>
---* return The right boundary position of this widget.
---@return float@ float#float ret (return value: float)
function Widget:getRightBoundary() end
---* To set the bright style of widget.<br>
---* see BrightStyle<br>
---* param style   BrightStyle::NORMAL means the widget is in normal state, BrightStyle::HIGHLIGHT means the widget is in highlight state.
---@param style int@ #int style
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setBrightStyle(style) end
---* Sets a LayoutParameter to widget.<br>
---* see LayoutParameter<br>
---* param parameter LayoutParameter pointer
---@param parameter ccui.LayoutParameter@ #ccui.LayoutParameter parameter
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setLayoutParameter(parameter) end
---* Create a new widget copy of the original one.<br>
---* return A cloned widget copy of original.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Widget:clone() end
---* Allow widget to accept focus.<br>
---* param enable pass true/false to enable/disable the focus ability of a widget
---@param enable boolean@ #bool enable
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setFocusEnabled(enable) end
---* Gets the bottom boundary position of this widget in parent's coordination system.<br>
---* return The bottom boundary position of this widget.
---@return float@ float#float ret (return value: float)
function Widget:getBottomBoundary() end
---* Determines if the widget is bright<br>
---* return true if the widget is bright, false if the widget is dark.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isBright() end
---* Dispatch a EventFocus through a EventDispatcher<br>
---* param widgetLoseFocus  The widget which lose its focus<br>
---* param widgetGetFocus he widget which get its focus
---@param widgetLoseFocus ccui.Widget@ #ccui.Widget widgetLoseFocus
---@param widgetGetFocus ccui.Widget@ #ccui.Widget widgetGetFocus
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:dispatchFocusEvent(widgetLoseFocus,widgetGetFocus) end
---* Toggle use unify size.<br>
---* param enable True to use unify size, false otherwise.
---@param enable boolean@ #bool enable
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setUnifySizeEnabled(enable) end
---* Return whether the widget is propagate touch events to its parents or not<br>
---* return whether touch event propagation is allowed or not.<br>
---* since v3.3
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isPropagateTouchEvents() end
---* Checks a point is in widget's content space.<br>
---* This function is used for determining touch area of widget.<br>
---* param pt        The point in `Vec2`.<br>
---* param camera    The camera look at widget, used to convert GL screen point to near/far plane.<br>
---* param p         Point to a Vec3 for store the intersect point, if don't need them set to nullptr.<br>
---* return true if the point is in widget's content space, false otherwise.
---@param pt vec2_table@ #vec2_table pt
---@param camera cc.Camera@ #cc.Camera camera
---@param p vec3_table@ #vec3_table p
---@return boolean@ bool#bool ret (return value: bool)
function Widget:hitTest(pt,camera,p) end
---* Query whether layout component is enabled or not. <br>
---* return true represent the widget use Layout Component, false represent the widget couldn't use Layout Component.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isLayoutComponentEnabled() end
---* when a widget calls this method, it will get focus immediately.
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:requestFocus() end
---@param parentSize size_table@ #size_table parentSize
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
---@overload fun(parentSize:size_table):ccui.Widget
---@overload fun():ccui.Widget
function Widget:updateSizeAndPosition(parentSize) end
---* This method is called when a focus change event happens<br>
---* param widgetLostFocus  The widget which lose its focus<br>
---* param widgetGetFocus  The widget which get its focus
---@param widgetLostFocus ccui.Widget@ #ccui.Widget widgetLostFocus
---@param widgetGetFocus ccui.Widget@ #ccui.Widget widgetGetFocus
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:onFocusChange(widgetLostFocus,widgetGetFocus) end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Widget:getTouchMovePosition() end
---* Gets the size type of widget.<br>
---* see `SizeType`
---@return int@ int#int ret (return value: int)
function Widget:getSizeType() end
---* Query callback type.<br>
---* return Callback type string.
---@return string@ string#string ret (return value: string)
function Widget:getCallbackType() end
---* 
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Widget:getTouchEndPosition() end
---* Gets the percent (x,y) of the widget in OpenGL coordinates<br>
---* see setPosition(const Vec2&)<br>
---* return The percent (x,y) of the widget in OpenGL coordinates
---@return vec2_table@ vec2_table#vec2_table ret (return value: vec2_table)
function Widget:getPositionPercent() end
---* brief Propagate touch events to its parents
---@param event int@ #int event
---@param sender ccui.Widget@ #ccui.Widget sender
---@param touch cc.Touch@ #cc.Touch touch
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:propagateTouchEvent(event,sender,touch) end
---* Returns the flag which indicates whether the widget is flipped horizontally or not.<br>
---* It not only flips the texture of the widget, but also the texture of the widget's children.<br>
---* Also, flipping relies on widget's anchor point.<br>
---* Internally, it just use setScaleX(-1) to flip the widget.<br>
---* return true if the widget is flipped horizontally, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isFlippedX() end
---* Return the flag which indicates whether the widget is flipped vertically or not.<br>
---* It not only flips the texture of the widget, but also the texture of the widget's children.<br>
---* Also, flipping relies on widget's anchor point.<br>
---* Internally, it just use setScaleY(-1) to flip the widget.<br>
---* return true if the widget is flipped vertically, false otherwise.
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isFlippedY() end
---* Checks a point if in parent's area.<br>
---* param pt A point in `Vec2`.<br>
---* return true if the point is in parent's area, false otherwise.
---@param pt vec2_table@ #vec2_table pt
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isClippingParentContainsPoint(pt) end
---* Changes the size type of widget.<br>
---* see `SizeType`<br>
---* param type that is widget's size type
---@param type int@ #int type
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setSizeType(type) end
---* 
---@param event int@ #int event
---@param sender ccui.Widget@ #ccui.Widget sender
---@param touch cc.Touch@ #cc.Touch touch
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:interceptTouchEvent(event,sender,touch) end
---* Sets whether the widget is bright<br>
---* The default value is true, a widget is default to bright<br>
---* param bright   true if the widget is bright, false if the widget is dark.
---@param bright boolean@ #bool bright
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setBright(bright) end
---* Set callback type.<br>
---* param callbackType A string representation of callback type.
---@param callbackType string@ #string callbackType
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setCallbackType(callbackType) end
---* Return whether the widget is swallowing touch or not<br>
---* return Whether touch is swallowed.<br>
---* since v3.3
---@return boolean@ bool#bool ret (return value: bool)
function Widget:isSwallowTouches() end
---* 
---@param enable boolean@ #bool enable
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:enableDpadNavigation(enable) end
---* Return a current focused widget in your UI scene.<br>
---* No matter what widget object you call this method on , it will return you the exact one focused widget.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Widget:getCurrentFocusedWidget() end
---* Create and return a empty Widget instance pointer.
---@return ccui.Widget@ Widget#Widget ret (return value: ccui.Widget)
function Widget:create() end
---* 
---@param scaleY float@ #float scaleY
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setScaleY(scaleY) end
---* 
---@param scaleX float@ #float scaleX
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setScaleX(scaleX) end
---* 
---@return float@ float#float ret (return value: float)
function Widget:getScaleY() end
---* 
---@return float@ float#float ret (return value: float)
function Widget:getScaleX() end
---* Returns the string representation of widget class name<br>
---* return get the class description.
---@return string@ string#string ret (return value: string)
function Widget:getDescription() end
---@param scalex float@ #float scalex
---@param scaley float@ #float scaley
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
---@overload fun(scalex:float,scaley:float):ccui.Widget
---@overload fun(scalex:float):ccui.Widget
function Widget:setScale(scalex,scaley) end
---* 
---@return boolean@ bool#bool ret (return value: bool)
function Widget:init() end
---* Changes the position (x,y) of the widget in OpenGL coordinates<br>
---* Usually we use p(x,y) to compose a Vec2 object.<br>
---* The original point (0,0) is at the left-bottom corner of screen.<br>
---* param pos  The position (x,y) of the widget in OpenGL coordinates
---@param pos vec2_table@ #vec2_table pos
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setPosition(pos) end
---* Changes the size that is widget's size<br>
---* param contentSize A content size in `Size`.
---@param contentSize size_table@ #size_table contentSize
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:setContentSize(contentSize) end
---* 
---@return float@ float#float ret (return value: float)
function Widget:getScale() end
---* Default constructor<br>
---* js ctor<br>
---* lua new
---@return ccui.Widget@ Widget#Widget self (return value: ccui.Widget)
function Widget:Widget() end


---@class ccs.ZOrderFrame :  Frame
local ZOrderFrame={ }
---@class ZOrderFrame : ccs.ZOrderFrame
ccs.ZOrderFrame=ZOrderFrame


---* 
---@return int@ int#int ret (return value: int)
function ZOrderFrame:getZOrder() end
---* 
---@param zorder int@ #int zorder
---@return ccs.ZOrderFrame@ ZOrderFrame#ZOrderFrame self (return value: ccs.ZOrderFrame)
function ZOrderFrame:setZOrder(zorder) end
---* 
---@return ccs.ZOrderFrame@ ZOrderFrame#ZOrderFrame ret (return value: ccs.ZOrderFrame)
function ZOrderFrame:create() end
---* 
---@return ccs.Frame@ Frame#Frame ret (return value: ccs.Frame)
function ZOrderFrame:clone() end
---* 
---@return ccs.ZOrderFrame@ ZOrderFrame#ZOrderFrame self (return value: ccs.ZOrderFrame)
function ZOrderFrame:ZOrderFrame() end---@class cc.ResourceData

---@class int

---@class float

---@class size_table

---@class unsigned_int

---@class self

---@class vec3_table

---@class array_table

---@class char

---@class vec2_table

---@class ccs.ActionNode

---@class ccs.AnimationInfo

---@class color3b_table

---@class unsigned_char

---@class map_table

---@class rect_table

---@class cc.Animation3DData

---@class cc.BlendFunc

---@class cc.Renderer

---@class mat4_table

---@class void

---@class cc.TextureAtlas

---@class cc.Bone3D

---@class color4b_table

---@class cc._ccBezierConfig

---@class ccs.ColliderDetector

---@class color4f_table

---@class cc.SkinData

---@class cc.MaterialDatas

---@class cc.NodeDatas

---@class ccexp.Viewport

---@class cc.AABB

---@class ccexp.FrameBuffer

---@class cc.Camer

---@class point_table

---@class cc.CCBSequenceProperty

---@class cc.Value

---@class cc.CCBSequence

---@class cc.NodeLoaderLibrary

---@class cc.CCBMemberVariableAssigner

---@class cc.CCBSelectorResolver

---@class cc.NodeLoaderListener

---@class unsigned short

---@class color3b_tabl

---@class double

---@class cc.IMEKeyboardNotificationInfo

---@class vec4_table

---@class floa

---@class cc.VRIRenderer

---@class boo

---@class GLContextAttrs

---@class cc._ttfConfig

---@class cc.FontAtlas

---@class cc.MeshVertexAttrib

---@class cc.MeshIndexData

---@class cc.MeshSkin

---@class cc.Quaternion

---@class cc.OffMeshLinkData

---@class cc.NavMeshAgentParam

---@class cc.AffineTransform

---@class cc.Particle3DAffector

---@class cc.Particle3DRender

---@class cc.Particle3DEmitter

---@class cc.VertexAttribBinding

---@class btTypedConstraint

---@class btRigidBody

---@class cc.Physics3DRigidBodyDes

---@class btCollisionShape

---@class cpBody

---@class cc.PhysicsMaterial

---@class cc.PhysicsContactData

---@class cc.V3F_C4B_T2F_Quad

---@class cc.TrianglesCommand.Triangles

---@class long

---@class cc.PUEmitter

---@class cc.PUListener

---@class cc.PUBehaviour

---@class cc.PUParticle3D

---@class cc.PUObserver

---@class cc.RenderState.StateBlock

---@class spTrackEntry

---@class spAnimation

---@class spAtlas

---@class spSkeletonData

---@class spVertexEffect

---@class spSkeleton

---@class cc.TextureCub

---@class cc.ScrollView

---@class cc.Terrain.DetailMap

---@class cc.Terrain.TerrainData

---@class cc.FontDefinition

---@class cc.Texture2D._TexParam

---@class short

